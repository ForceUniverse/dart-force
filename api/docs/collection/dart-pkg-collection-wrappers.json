{"name":"dart-pkg-collection-wrappers","qualifiedName":"collection/dart-pkg-collection-wrappers","comment":"<p>Delegating wrappers for <a>dart-core.Iterable</a>, <a>dart-core.List</a>, <a>dart-core.Set</a>, <a>collection/dart-pkg-collection-wrappers.Queue</a> and <a>dart-core.Map</a>.</p>\n<p>Also adds unmodifiable views for <code>Set</code> and <code>Map</code>, and a fixed length\nview for <code>List</code>. The unmodifable list view from <code>dart:collection</code> is exported\nas well, just for completeness.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"DelegatingIterable","qualifiedName":"collection/dart-pkg-collection-wrappers.DelegatingIterable","preview":"<p>Creates an <a>collection/dart-core.Iterable</a> that delegates all operations to a base iterable.</p>"},{"name":"DelegatingList","qualifiedName":"collection/dart-pkg-collection-wrappers.DelegatingList","preview":"<p>Creates a <a>collection/dart-core.List</a> that delegates all operations to a base list.</p>"},{"name":"DelegatingMap","qualifiedName":"collection/dart-pkg-collection-wrappers.DelegatingMap","preview":"<p>Creates a <a>collection/dart-core.Map</a> that delegates all operations to a base map.</p>"},{"name":"DelegatingQueue","qualifiedName":"collection/dart-pkg-collection-wrappers.DelegatingQueue","preview":"<p>Creates a <a>collection/dart-pkg-collection-wrappers.Queue</a> that delegates all operations to a base queue.</p>"},{"name":"DelegatingSet","qualifiedName":"collection/dart-pkg-collection-wrappers.DelegatingSet","preview":"<p>Creates a <a>collection/dart-core.Set</a> that delegates all operations to a base set.</p>"},{"name":"MapKeySet","qualifiedName":"collection/dart-pkg-collection-wrappers.MapKeySet","preview":"<p>An unmodifiable <a>collection/dart-core.Set</a> view of the keys of a <a>collection/dart-core.Map</a>.</p>"},{"name":"MapValueSet","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet","preview":"<p>Creates a modifiable <a>collection/dart-core.Set</a> view of the values of a <a>collection/dart-core.Map</a>.</p>"},{"name":"NonGrowableListMixin","qualifiedName":"collection/dart-pkg-collection-wrappers.NonGrowableListMixin","preview":"<p>Mixin class that implements a throwing version of all list operations that\nchange the List's length.</p>"},{"name":"NonGrowableListView","qualifiedName":"collection/dart-pkg-collection-wrappers.NonGrowableListView","preview":"<p>A fixed-length list.</p>"},{"name":"UnmodifiableListView","qualifiedName":"collection/dart-pkg-collection-wrappers.UnmodifiableListView","preview":"<p>An unmodifiable <a>collection/dart-core.List</a> view of another List.</p>"},{"name":"UnmodifiableMapMixin","qualifiedName":"collection/dart-pkg-collection-wrappers.UnmodifiableMapMixin","preview":"<p>Mixin class that implements a throwing version of all map operations that\nchange the Map.</p>"},{"name":"UnmodifiableMapView","qualifiedName":"collection/dart-pkg-collection-wrappers.UnmodifiableMapView","preview":"<p>An unmodifiable map.</p>"},{"name":"UnmodifiableSetMixin","qualifiedName":"collection/dart-pkg-collection-wrappers.UnmodifiableSetMixin","preview":"<p>Mixin class that implements a throwing version of all set operations that\nchange the Set.</p>"},{"name":"UnmodifiableSetView","qualifiedName":"collection/dart-pkg-collection-wrappers.UnmodifiableSetView","preview":"<p>An unmodifiable set.</p>"}],"typedef":{},"error":[]},"packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"}