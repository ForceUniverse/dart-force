{"name":"MapValueSet","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet","comment":"<p>Creates a modifiable <a>collection/dart-core.Set</a> view of the values of a <a>collection/dart-core.Map</a>.</p>\n<p>The <code>Set</code> view assumes that the keys of the <code>Map</code> can be uniquely determined\nfrom the values. The <code>keyForValue</code> function passed to the constructor finds\nthe key for a single value. The <code>keyForValue</code> function should be consistent\nwith equality. If <code>value1 == value2</code> then <code>keyForValue(value1)</code> and\n<code>keyForValue(value2)</code> should be considered equal keys by the underlying map,\nand vice versa.</p>\n<p>Modifying the set will modify the underlying map based on the key returned by\n<code>keyForValue</code>.</p>\n<p>If the <code>Map</code> contents are not compatible with the <code>keyForValue</code> function, the\nset will not work consistently, and may give meaningless responses or do\ninconsistent updates.</p>\n<p>This set can, for example, be used on a map from database record IDs to the\nrecords. It exposes the records as a set, and allows for writing both\n<code>recordSet.add(databaseRecord)</code> and <code>recordMap[id]</code>.</p>\n<p>Effectively, the map will act as a kind of index for the set.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Set"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isEmpty":{"name":"isEmpty","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.isEmpty","comment":"","commentFrom":"dart-core.IterableBase.isEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.isNotEmpty","comment":"","commentFrom":"dart-core.IterableBase.isNotEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.length","comment":"<p>Returns the number of elements in the iterable.</p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.</p>","commentFrom":"dart-core.EfficientLength.length","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.MapValueSet-","comment":"<p>Creates a new <a>collection/dart-pkg-collection-wrappers.MapValueSet</a> based on <a>collection/dart-pkg-collection-wrappers.MapValueSet.MapValueSet-.base</a>.</p>\n<p><a>collection/dart-pkg-collection-wrappers.MapValueSet.MapValueSet-.keyForValue</a> returns the key in the map that should be associated with the\ngiven value. The set's notion of equality is identical to the equality of\nthe return values of <a>collection/dart-pkg-collection-wrappers.MapValueSet.MapValueSet-.keyForValue</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"base":{"name":"base","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.K","inner":[]},{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}]}],"value":null,"annotations":[]},"keyForValue":{"name":"keyForValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.K","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.add","comment":"<p>Adds <a>collection/dart-pkg-collection-wrappers.MapValueSet.add.value</a> into the set. Returns <code>true</code> if <a>collection/dart-pkg-collection-wrappers.MapValueSet.add.value</a> was added to the set.</p>\n<p>If <a>collection/dart-pkg-collection-wrappers.MapValueSet.add.value</a> already exists, the set is not changed and <code>false</code> is returned.</p>","commentFrom":"dart-core.Set.add","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.addAll","comment":"<p>Adds all of <a>collection/dart-pkg-collection-wrappers.MapValueSet.addAll.elements</a> to this Set.</p>\n<p>Equivalent to adding each element in <a>collection/dart-pkg-collection-wrappers.MapValueSet.addAll.elements</a> using <a>collection/dart-pkg-collection-wrappers.MapValueSet.add</a>,\nbut some collections may be able to optimize it.</p>","commentFrom":"dart-core.Set.addAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.clear","comment":"<p>Removes all elements in the set.</p>","commentFrom":"dart-core.Set.clear","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.contains","comment":"<p>Returns true if value is in the set.</p>","commentFrom":"dart-core.Set.contains","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsAll":{"name":"containsAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.containsAll","comment":"<p>Returns whether this Set contains all the elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.containsAll.other</a>.</p>","commentFrom":"dart-core.Set.containsAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"difference":{"name":"difference","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.difference","comment":"<p>Returns a new set with the the elements of this that are not in <a>collection/dart-pkg-collection-wrappers.MapValueSet.difference.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> that are\nnot elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.difference.other</a> according to <code>other.contains</code>.</p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation this uses.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.intersection","comment":"<p>Returns a new set which is the intersection between this and <a>collection/dart-pkg-collection-wrappers.MapValueSet.intersection.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> that are\nalso elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.intersection.other</a> according to <code>other.contains</code>.</p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation this uses.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"lookup":{"name":"lookup","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.lookup","comment":"<p>If an object equal to object is in the set, return it.</p>\n<p>Checks if there is an object in the set that is equal to object.\nIf so, that object is returned, otherwise returns null.</p>","commentFrom":"dart-core.Set.lookup","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.remove","comment":"<p>Removes <a>collection/dart-pkg-collection-wrappers.MapValueSet.remove.value</a> from the set. Returns true if <a>collection/dart-pkg-collection-wrappers.MapValueSet.remove.value</a> was\nin the set. Returns false otherwise. The method has no effect\nif <a>collection/dart-pkg-collection-wrappers.MapValueSet.remove.value</a> value was not in the set.</p>","commentFrom":"dart-core.Set.remove","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAll":{"name":"removeAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.removeAll","comment":"<p>Removes each element of <a>collection/dart-pkg-collection-wrappers.MapValueSet.removeAll.elements</a> from this set.</p>","commentFrom":"dart-core.Set.removeAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"removeWhere":{"name":"removeWhere","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.removeWhere","comment":"<p>Removes all elements of this set that satisfy <a>collection/dart-pkg-collection-wrappers.MapValueSet.removeWhere.test</a>.</p>","commentFrom":"dart-core.Set.removeWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"retainAll":{"name":"retainAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.retainAll","comment":"<p>Removes all elements of this set that are not elements in <a>collection/dart-pkg-collection-wrappers.MapValueSet.retainAll.elements</a>.</p>\n<p>Checks for each element of <a>collection/dart-pkg-collection-wrappers.MapValueSet.retainAll.elements</a> whether there is an element in this\nset that is equal to it (according to <code>this.contains</code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements</code> are removed.</p>","commentFrom":"dart-core.Set.retainAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainWhere":{"name":"retainWhere","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.retainWhere","comment":"<p>Removes all elements of this set that fail to satisfy <a>collection/dart-pkg-collection-wrappers.MapValueSet.retainWhere.test</a>.</p>","commentFrom":"dart-core.Set.retainWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"union":{"name":"union","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.union","comment":"<p>Returns a new set which contains all the elements of this and <a>collection/dart-pkg-collection-wrappers.MapValueSet.union.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> and all\nthe elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.union.other</a>.</p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation this uses.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"collection/dart-pkg-collection-wrappers.MapValueSet.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.first","comment":"<p>Returns the first element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>. Otherwise this method is\nequivalent to <code>this.elementAt(0)</code></p>","commentFrom":"dart-core.Iterable.first","inheritedFrom":"dart-core.IterableBase.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>collection/dart-pkg-collection-wrappers.MapValueSet.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.isEmpty","comment":"<p>Returns true if there is no element in this collection.</p>","commentFrom":"dart-core.Iterable.isEmpty","inheritedFrom":"dart-core.IterableBase.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.isNotEmpty","comment":"<p>Returns true if there is at least one element in this collection.</p>","commentFrom":"dart-core.Iterable.isNotEmpty","inheritedFrom":"dart-core.IterableBase.isNotEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.iterator","comment":"<p>Provides an iterator that iterates over the elements of this set.</p>\n<p>The order of iteration is defined by the individual <code>Set</code> implementation,\nbut must be consistent between changes to the set.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.iterator","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-core.Set.E","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.last","comment":"<p>Returns the last element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.last","inheritedFrom":"dart-core.IterableBase.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.length","comment":"<p>Returns the number of elements in the iterable.</p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.</p>","commentFrom":"","inheritedFrom":"dart-core.EfficientLength.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.single","comment":"<p>Returns the single element in <code>this</code>.</p>\n<p>If <code>this</code> is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.single","inheritedFrom":"dart-core.IterableBase.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>collection/dart-pkg-collection-wrappers.MapValueSet.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>collection/dart-pkg-collection-wrappers.MapValueSet.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.add","comment":"<p>Adds <a>collection/dart-pkg-collection-wrappers.MapValueSet.add.value</a> into the set. Returns <code>true</code> if <a>collection/dart-pkg-collection-wrappers.MapValueSet.add.value</a> was added to the set.</p>\n<p>If <a>collection/dart-pkg-collection-wrappers.MapValueSet.add.value</a> already exists, the set is not changed and <code>false</code> is returned.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.addAll","comment":"<p>Adds all of <a>collection/dart-pkg-collection-wrappers.MapValueSet.addAll.elements</a> to this Set.</p>\n<p>Equivalent to adding each element in <a>collection/dart-pkg-collection-wrappers.MapValueSet.addAll.elements</a> using <a>collection/dart-pkg-collection-wrappers.MapValueSet.add</a>,\nbut some collections may be able to optimize it.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.addAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Set.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.any","comment":"<p>Returns true if one element of this collection satisfies the\npredicate test. Returns false otherwise.</p>","commentFrom":"dart-core.Iterable.any","inheritedFrom":"dart-core.IterableBase.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.clear","comment":"<p>Removes all elements in the set.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.clear","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.contains","comment":"<p>Returns true if <a>collection/dart-pkg-collection-wrappers.MapValueSet.contains.value</a> is in the set.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.contains","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsAll":{"name":"containsAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.containsAll","comment":"<p>Returns whether this Set contains all the elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.containsAll.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.containsAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"difference":{"name":"difference","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.difference","comment":"<p>Returns a new set with the the elements of this that are not in <a>collection/dart-pkg-collection-wrappers.MapValueSet.difference.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> that\nare not elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.difference.other</a> according to <code>other.contains</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.difference","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Set.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Set.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.elementAt","comment":"<p>Returns the <a>collection/dart-pkg-collection-wrappers.MapValueSet.elementAt.index</a>th element.</p>\n<p>The <a>collection/dart-pkg-collection-wrappers.MapValueSet.elementAt.index</a> must be non-negative and less than <a>collection/dart-core.IterableBase.length</a>.</p>\n<p>Note: if <code>this</code> does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least <a>collection/dart-pkg-collection-wrappers.MapValueSet.elementAt.index</a> elements in <code>this</code>.</p>","commentFrom":"dart-core.Iterable.elementAt","inheritedFrom":"dart-core.IterableBase.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.every","comment":"<p>Returns true if every elements of this collection satisify the\npredicate test. Returns <code>false</code> otherwise.</p>","commentFrom":"dart-core.Iterable.every","inheritedFrom":"dart-core.IterableBase.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.expand","comment":"<p>Expands each element of this <a>dart-core.Iterable</a> into zero or more elements.</p>\n<p>The resulting Iterable runs through the elements returned\nby <a>collection/dart-pkg-collection-wrappers.MapValueSet.expand.f</a> for each element of this, in order.</p>\n<p>The returned <a>dart-core.Iterable</a> is lazy, and calls <a>collection/dart-pkg-collection-wrappers.MapValueSet.expand.f</a> for each element\nof this every time it's iterated.</p>","commentFrom":"dart-core.Iterable.expand","inheritedFrom":"dart-core.IterableBase.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.firstWhere","comment":"<p>Returns the first element that satisfies the given predicate <a>collection/dart-pkg-collection-wrappers.MapValueSet.firstWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>collection/dart-pkg-collection-wrappers.MapValueSet.firstWhere.orElse</a> function is\nreturned. By default, when <a>collection/dart-pkg-collection-wrappers.MapValueSet.firstWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.firstWhere","inheritedFrom":"dart-core.IterableBase.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.fold","comment":"<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.</p>\n<p>Use <a>collection/dart-pkg-collection-wrappers.MapValueSet.fold.initialValue</a> as the initial value, and the function <a>collection/dart-pkg-collection-wrappers.MapValueSet.fold.combine</a> to\ncreate a new value from the previous one and an element.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n</code></pre>","commentFrom":"dart-core.Iterable.fold","inheritedFrom":"dart-core.IterableBase.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.forEach","comment":"<p>Applies the function <a>collection/dart-pkg-collection-wrappers.MapValueSet.forEach.f</a> to each element of this collection.</p>","commentFrom":"dart-core.Iterable.forEach","inheritedFrom":"dart-core.IterableBase.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.intersection","comment":"<p>Returns a new set which is the intersection between this set and <a>collection/dart-pkg-collection-wrappers.MapValueSet.intersection.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> that\nare also elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.intersection.other</a> according to <code>other.contains</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.intersection","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Set.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.join","comment":"<p>Converts each element to a <a>dart-core.String</a> and concatenates the strings.</p>\n<p>Converts each element to a <a>dart-core.String</a> by calling <a>collection/dart-pkg-collection-wrappers.MapValueSet.toString</a> on it.\nThen concatenates the strings, optionally separated by the <a>collection/dart-pkg-collection-wrappers.MapValueSet.join.separator</a>\nstring.</p>","commentFrom":"dart-core.Iterable.join","inheritedFrom":"dart-core.IterableBase.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.lastWhere","comment":"<p>Returns the last element that satisfies the given predicate <a>collection/dart-pkg-collection-wrappers.MapValueSet.lastWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>collection/dart-pkg-collection-wrappers.MapValueSet.lastWhere.orElse</a> function is\nreturned. By default, when <a>collection/dart-pkg-collection-wrappers.MapValueSet.lastWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.lastWhere","inheritedFrom":"dart-core.IterableBase.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"lookup":{"name":"lookup","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.lookup","comment":"<p>If an object equal to <a>collection/dart-pkg-collection-wrappers.MapValueSet.lookup.object</a> is in the set, return it.</p>\n<p>Checks if there is an object in the set that is equal to <a>collection/dart-pkg-collection-wrappers.MapValueSet.lookup.object</a>.\nIf so, that object is returned, otherwise returns null.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.lookup","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set.E","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.map","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> where each element <code>e</code> of <code>this</code> is replaced\nby the result of <code>f(e)</code>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>collection/dart-pkg-collection-wrappers.MapValueSet.map.f</a> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>collection/dart-pkg-collection-wrappers.MapValueSet.map.f</a> multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.map","inheritedFrom":"dart-core.IterableBase.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.noSuchMethod","comment":"<p><a>collection/dart-pkg-collection-wrappers.MapValueSet.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>collection/dart-pkg-collection-wrappers.MapValueSet.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>collection/dart-pkg-collection-wrappers.MapValueSet.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>collection/dart-pkg-collection-wrappers.MapValueSet.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.reduce","comment":"<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.reduce((value, element) =&gt; value + element);\n</code></pre>","commentFrom":"dart-core.Iterable.reduce","inheritedFrom":"dart-core.IterableBase.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.IterableBase.E","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.remove","comment":"<p>Removes <a>collection/dart-pkg-collection-wrappers.MapValueSet.remove.value</a> from the set. Returns true if <a>collection/dart-pkg-collection-wrappers.MapValueSet.remove.value</a> was\nin the set. Returns false otherwise. The method has no effect\nif <a>collection/dart-pkg-collection-wrappers.MapValueSet.remove.value</a> value was not in the set.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAll":{"name":"removeAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.removeAll","comment":"<p>Removes each element of <a>collection/dart-pkg-collection-wrappers.MapValueSet.removeAll.elements</a> from this set.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.removeAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"removeWhere":{"name":"removeWhere","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.removeWhere","comment":"<p>Removes all elements of this set that satisfy <a>collection/dart-pkg-collection-wrappers.MapValueSet.removeWhere.test</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.removeWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"retainAll":{"name":"retainAll","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.retainAll","comment":"<p>Removes all elements of this set that are not elements in <a>collection/dart-pkg-collection-wrappers.MapValueSet.retainAll.elements</a>.</p>\n<p>Checks for each element of <a>collection/dart-pkg-collection-wrappers.MapValueSet.retainAll.elements</a> whether there is an element in this\nset that is equal to it (according to <code>this.contains</code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements</code> are removed.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.retainAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainWhere":{"name":"retainWhere","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.retainWhere","comment":"<p>Removes all elements of this set that fail to satisfy <a>collection/dart-pkg-collection-wrappers.MapValueSet.retainWhere.test</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.retainWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.singleWhere","comment":"<p>Returns the single element that satisfies <a>collection/dart-pkg-collection-wrappers.MapValueSet.singleWhere.test</a>. If no or more than one\nelement match then a <a>dart-core.StateError</a> is thrown.</p>","commentFrom":"dart-core.Iterable.singleWhere","inheritedFrom":"dart-core.IterableBase.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.skip","comment":"<p>Returns an Iterable that skips the first <a>collection/dart-pkg-collection-wrappers.MapValueSet.skip.n</a> elements.</p>\n<p>If <code>this</code> has fewer than <a>collection/dart-pkg-collection-wrappers.MapValueSet.skip.n</a> elements, then the resulting Iterable is\nempty.</p>\n<p>It is an error if <a>collection/dart-pkg-collection-wrappers.MapValueSet.skip.n</a> is negative.</p>","commentFrom":"dart-core.Iterable.skip","inheritedFrom":"dart-core.IterableBase.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.skipWhile","comment":"<p>Returns an Iterable that skips elements while <a>collection/dart-pkg-collection-wrappers.MapValueSet.skipWhile.test</a> is satisfied.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of <code>this</code>.</p>\n<p>As long as the iterator's elements satisfy <a>collection/dart-pkg-collection-wrappers.MapValueSet.skipWhile.test</a> they are\ndiscarded. Once an element does not satisfy the <a>collection/dart-pkg-collection-wrappers.MapValueSet.skipWhile.test</a> the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of <code>this</code> starting from the\nfirst element that does not satisfy <a>collection/dart-pkg-collection-wrappers.MapValueSet.skipWhile.test</a>.</p>","commentFrom":"dart-core.Iterable.skipWhile","inheritedFrom":"dart-core.IterableBase.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.take","comment":"<p>Returns an <a>dart-core.Iterable</a> with at most <a>collection/dart-pkg-collection-wrappers.MapValueSet.take.n</a> elements.</p>\n<p>The returned <a>dart-core.Iterable</a> may contain fewer than <a>collection/dart-pkg-collection-wrappers.MapValueSet.take.n</a> elements, if <code>this</code>\ncontains fewer than <a>collection/dart-pkg-collection-wrappers.MapValueSet.take.n</a> elements.</p>\n<p>It is an error if <a>collection/dart-pkg-collection-wrappers.MapValueSet.take.n</a> is negative.</p>","commentFrom":"dart-core.Iterable.take","inheritedFrom":"dart-core.IterableBase.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.takeWhile","comment":"<p>Returns an Iterable that stops once <a>collection/dart-pkg-collection-wrappers.MapValueSet.takeWhile.test</a> is not satisfied anymore.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of <code>this</code>.</p>\n<p>When the iterator encounters an element <code>e</code> that does not satisfy <a>collection/dart-pkg-collection-wrappers.MapValueSet.takeWhile.test</a>,\nit discards <code>e</code> and moves into the finished state. That is, it does not\nget or provide any more elements.</p>","commentFrom":"dart-core.Iterable.takeWhile","inheritedFrom":"dart-core.IterableBase.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.toList","comment":"<p>Creates a <a>dart-core.List</a> containing the elements of this <a>dart-core.Iterable</a>.</p>\n<p>The elements are in iteration order. The list is fixed-length\nif <a>collection/dart-pkg-collection-wrappers.MapValueSet.toList.growable</a> is false.</p>","commentFrom":"dart-core.Iterable.toList","inheritedFrom":"dart-core.IterableBase.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.toSet","comment":"<p>Creates a <a>dart-core.Set</a> containing the elements of this <a>dart-core.Iterable</a>.</p>","commentFrom":"dart-core.Iterable.toSet","inheritedFrom":"dart-core.IterableBase.toSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"union":{"name":"union","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.union","comment":"<p>Returns a new set which contains all the elements of this set and <a>collection/dart-pkg-collection-wrappers.MapValueSet.union.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> and\nall the elements of <a>collection/dart-pkg-collection-wrappers.MapValueSet.union.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Set.union","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Set.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Set.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"collection/dart-pkg-collection-wrappers.MapValueSet.where","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> with all elements that satisfy the\npredicate test.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function test will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction test multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.where","inheritedFrom":"dart-core.IterableBase.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{"K":{"name":"K","type":"dart.core.Object"},"V":{"name":"V","type":"dart.core.Object"}}}