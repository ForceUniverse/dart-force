{"name":"DeepCollectionEquality","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality","comment":"<p>Deep equality on collections.</p>\n<p>Recognizes lists, sets, iterables and maps and compares their elements using\ndeep equality as well.</p>\n<p>Non-iterable/map objects are compared using a configurable base equality.</p>\n<p>Works in one of two modes: ordered or unordered.</p>\n<p>In ordered mode, lists and iterables are required to have equal elements\nin the same order. In unordered mode, the order of elements in iterables\nand lists are not importan.</p>\n<p>A list is only equal to another list, likewise for sets and maps. All other\niterables are compared as iterables only.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["collection/dart-pkg-collection.Equality"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.DeepCollectionEquality-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"base":{"name":"base","optional":true,"named":false,"default":true,"type":[{"outer":"collection/dart-pkg-collection.Equality","inner":[]}],"value":"ConstructedConstant(DefaultEquality())","annotations":[]}},"annotations":[]},"unordered":{"name":"unordered","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.DeepCollectionEquality-unordered","comment":"<p>Creates a deep equality on collections where the order of lists and\niterables are not considered important. That is, lists and iterables are\ntreated as unordered iterables.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"base":{"name":"base","optional":true,"named":false,"default":true,"type":[{"outer":"collection/dart-pkg-collection.Equality","inner":[]}],"value":"ConstructedConstant(DefaultEquality())","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"equals":{"name":"equals","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.equals","comment":"<p>Compare two elements for being equal.</p>\n<p>This should be a proper equality relation.</p>","commentFrom":"dart-pkg-collection-equality.Equality.equals","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"e1":{"name":"e1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"e2":{"name":"e2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"hash":{"name":"hash","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.hash","comment":"<p>Get a hashcode of an element.</p>\n<p>The hashcode should be compatible with <a>collection/dart-pkg-collection.DeepCollectionEquality.equals</a>, so that if\n<code>equals(a, b)</code> then <code>hash(a) == hash(b)</code>.</p>","commentFrom":"dart-pkg-collection-equality.Equality.hash","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"o":{"name":"o","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isValidKey":{"name":"isValidKey","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.isValidKey","comment":"<p>Test whether an object is a valid argument to <a>collection/dart-pkg-collection.DeepCollectionEquality.equals</a> and <a>collection/dart-pkg-collection.DeepCollectionEquality.hash</a>.</p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.</p>","commentFrom":"dart-pkg-collection-equality.Equality.isValidKey","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"o":{"name":"o","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>collection/dart-pkg-collection.DeepCollectionEquality.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>collection/dart-pkg-collection.DeepCollectionEquality.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>collection/dart-pkg-collection.DeepCollectionEquality.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"equals":{"name":"equals","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.equals","comment":"<p>Compare two elements for being equal.</p>\n<p>This should be a proper equality relation.</p>","commentFrom":"","inheritedFrom":"dart-pkg-collection.Equality.equals","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"e1":{"name":"e1","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection.Equality.E","inner":[]}],"value":null,"annotations":[]},"e2":{"name":"e2","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection.Equality.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"hash":{"name":"hash","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.hash","comment":"<p>Get a hashcode of an element.</p>\n<p>The hashcode should be compatible with <a>collection/dart-pkg-collection.DeepCollectionEquality.equals</a>, so that if\n<code>equals(a, b)</code> then <code>hash(a) == hash(b)</code>.</p>","commentFrom":"","inheritedFrom":"dart-pkg-collection.Equality.hash","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"collection/dart-pkg-collection.Equality.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isValidKey":{"name":"isValidKey","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.isValidKey","comment":"<p>Test whether an object is a valid argument to <a>collection/dart-pkg-collection.DeepCollectionEquality.equals</a> and <a>collection/dart-pkg-collection.DeepCollectionEquality.hash</a>.</p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.</p>","commentFrom":"","inheritedFrom":"dart-pkg-collection.Equality.isValidKey","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"o":{"name":"o","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.noSuchMethod","comment":"<p><a>collection/dart-pkg-collection.DeepCollectionEquality.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>collection/dart-pkg-collection.DeepCollectionEquality.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>collection/dart-pkg-collection.DeepCollectionEquality.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>collection/dart-pkg-collection.DeepCollectionEquality.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"collection/dart-pkg-collection.DeepCollectionEquality.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}