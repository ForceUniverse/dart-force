{"name":"Context","qualifiedName":"path/path.Context","comment":"<p>An instantiable class for manipulating paths. Unlike the top-level\nfunctions, this lets you explicitly select what platform the paths will use.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"current":{"name":"current","qualifiedName":"path/path.Context.current","comment":"<p>The current directory that relative paths will be relative to.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"style":{"name":"style","qualifiedName":"path/path.Context.style","comment":"<p>The style of path that this context works with.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"path/path.Style","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"separator":{"name":"separator","qualifiedName":"path/path.Context.separator","comment":"<p>Gets the path separator for the context's <a>path/path.Context.style</a>. On Mac and Linux,\nthis is <code>/</code>. On Windows, it's <code>\\</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"path/path.Context.Context-","comment":"<p>Creates a new path context for the given style and current directory.</p>\n<p>If <a>path/path.Context.Context-.style</a> is omitted, it uses the host operating system's path style. If\nonly <a>path/path.Context.Context-.current</a> is omitted, it defaults \".\". If <em>both</em> <a>path/path.Context.Context-.style</a> and\n<a>path/path.Context.Context-.current</a> are omitted, <a>path/path.Context.Context-.current</a> defaults to the real current working\ndirectory.</p>\n<p>On the browser, <a>path/path.Context.Context-.style</a> defaults to <a>path/path-style.Style.url</a> and <a>path/path.Context.Context-.current</a> defaults to\nthe current URL.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"path/path.Context","inner":[]}],"parameters":{"style":{"name":"style","optional":true,"named":true,"default":false,"type":[{"outer":"path/path.Style","inner":[]}],"value":null,"annotations":[]},"current":{"name":"current","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"absolute":{"name":"absolute","qualifiedName":"path/path.Context.absolute","comment":"<p>Creates a new path by appending the given path parts to <a>path/path.Context.current</a>.\nEquivalent to join() with <a>path/path.Context.current</a> as the first argument. Example:</p>\n<pre><code>var context = new Context(current: '/root');\ncontext.absolute('path', 'to', 'foo'); // -&gt; '/root/path/to/foo'\n</code></pre>\n<p>If <a>path/path.Context.current</a> isn't absolute, this won't return an absolute path.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"part1":{"name":"part1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part2":{"name":"part2","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part3":{"name":"part3","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part4":{"name":"part4","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part5":{"name":"part5","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part6":{"name":"part6","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part7":{"name":"part7","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"basename":{"name":"basename","qualifiedName":"path/path.Context.basename","comment":"<p>Gets the part of <a>path/path.Context.basename.path</a> after the last separator on the context's\nplatform.</p>\n<pre><code>context.basename('path/to/foo.dart'); // -&gt; 'foo.dart'\ncontext.basename('path/to');          // -&gt; 'to'\n</code></pre>\n<p>Trailing separators are ignored.</p>\n<pre><code>context.basename('path/to/'); // -&gt; 'to'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"basenameWithoutExtension":{"name":"basenameWithoutExtension","qualifiedName":"path/path.Context.basenameWithoutExtension","comment":"<p>Gets the part of <a>path/path.Context.basenameWithoutExtension.path</a> after the last separator on the context's\nplatform, and without any trailing file extension.</p>\n<pre><code>context.basenameWithoutExtension('path/to/foo.dart'); // -&gt; 'foo'\n</code></pre>\n<p>Trailing separators are ignored.</p>\n<pre><code>context.basenameWithoutExtension('path/to/foo.dart/'); // -&gt; 'foo'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"dirname":{"name":"dirname","qualifiedName":"path/path.Context.dirname","comment":"<p>Gets the part of <a>path/path.Context.dirname.path</a> before the last separator.</p>\n<pre><code>context.dirname('path/to/foo.dart'); // -&gt; 'path/to'\ncontext.dirname('path/to');          // -&gt; 'path'\n</code></pre>\n<p>Trailing separators are ignored.</p>\n<pre><code>context.dirname('path/to/'); // -&gt; 'path'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"extension":{"name":"extension","qualifiedName":"path/path.Context.extension","comment":"<p>Gets the file extension of <a>path/path.Context.extension.path</a>: the portion of <a>path/path.Context.basename</a> from the last\n<code>.</code> to the end (including the <code>.</code> itself).</p>\n<pre><code>context.extension('path/to/foo.dart'); // -&gt; '.dart'\ncontext.extension('path/to/foo'); // -&gt; ''\ncontext.extension('path.to/foo'); // -&gt; ''\ncontext.extension('path/to/foo.dart.js'); // -&gt; '.js'\n</code></pre>\n<p>If the file name starts with a <code>.</code>, then it is not considered an\nextension:</p>\n<pre><code>context.extension('~/.bashrc');    // -&gt; ''\ncontext.extension('~/.notes.txt'); // -&gt; '.txt'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromUri":{"name":"fromUri","qualifiedName":"path/path.Context.fromUri","comment":"<p>Returns the path represented by <a>path/path.Context.fromUri.uri</a>, which may be a <a>dart-core.String</a> or a <a>dart-core.Uri</a>.</p>\n<p>For POSIX and Windows styles, <a>path/path.Context.fromUri.uri</a> must be a <code>file:</code> URI. For the URL\nstyle, this will just convert <a>path/path.Context.fromUri.uri</a> to a string.</p>\n<pre><code>// POSIX\ncontext.fromUri('file:///path/to/foo')\n  // -&gt; '/path/to/foo'\n\n// Windows\ncontext.fromUri('file:///C:/path/to/foo')\n  // -&gt; r'C:\\path\\to\\foo'\n\n// URL\ncontext.fromUri('http://dartlang.org/path/to/foo')\n  // -&gt; 'http://dartlang.org/path/to/foo'\n</code></pre>\n<p>If <a>path/path.Context.fromUri.uri</a> is relative, a relative path will be returned.</p>\n<pre><code>path.fromUri('path/to/foo'); // -&gt; 'path/to/foo'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isAbsolute":{"name":"isAbsolute","qualifiedName":"path/path.Context.isAbsolute","comment":"<p>Returns <code>true</code> if <a>path/path.Context.isAbsolute.path</a> is an absolute path and <code>false</code> if it is a\nrelative path.</p>\n<p>On POSIX systems, absolute paths start with a <code>/</code> (forward slash). On\nWindows, an absolute path starts with <code>\\\\</code>, or a drive letter followed by\n<code>:/</code> or <code>:\\</code>. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. <code>http://dartlang.org</code>, <code>file://</code>) or with a <code>/</code>.</p>\n<p>URLs that start with <code>/</code> are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, <a>path/path.Context.isAbsolute</a> will return true for\nthem. They can be detected using <a>path/path.Context.isRootRelative</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isRelative":{"name":"isRelative","qualifiedName":"path/path.Context.isRelative","comment":"<p>Returns <code>true</code> if <a>path/path.Context.isRelative.path</a> is a relative path and <code>false</code> if it is absolute.\nOn POSIX systems, absolute paths start with a <code>/</code> (forward slash). On\nWindows, an absolute path starts with <code>\\\\</code>, or a drive letter followed by\n<code>:/</code> or <code>:\\</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isRootRelative":{"name":"isRootRelative","qualifiedName":"path/path.Context.isRootRelative","comment":"<p>Returns <code>true</code> if <a>path/path.Context.isRootRelative.path</a> is a root-relative path and <code>false</code> if it's not.</p>\n<p>URLs that start with <code>/</code> are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, <a>path/path.Context.isAbsolute</a> will return true for\nthem. They can be detected using <a>path/path.Context.isRootRelative</a>.</p>\n<p>No POSIX and Windows paths are root-relative.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isWithin":{"name":"isWithin","qualifiedName":"path/path.Context.isWithin","comment":"<p>Returns <code>true</code> if <a>path/path.Context.isWithin.child</a> is a path beneath <code>parent</code>, and <code>false</code>\notherwise.</p>\n<pre><code>path.isWithin('/root/path', '/root/path/a'); // -&gt; true\npath.isWithin('/root/path', '/root/other'); // -&gt; false\npath.isWithin('/root/path', '/root/path'); // -&gt; false\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"path/path.Context.join","comment":"<p>Joins the given path parts into a single path. Example:</p>\n<pre><code>context.join('path', 'to', 'foo'); // -&gt; 'path/to/foo'\n</code></pre>\n<p>If any part ends in a path separator, then a redundant separator will not\nbe added:</p>\n<pre><code>context.join('path/', 'to', 'foo'); // -&gt; 'path/to/foo\n</code></pre>\n<p>If a part is an absolute path, then anything before that will be ignored:</p>\n<pre><code>context.join('path', '/to', 'foo'); // -&gt; '/to/foo'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"part1":{"name":"part1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part2":{"name":"part2","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part3":{"name":"part3","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part4":{"name":"part4","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part5":{"name":"part5","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part6":{"name":"part6","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part7":{"name":"part7","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"part8":{"name":"part8","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"joinAll":{"name":"joinAll","qualifiedName":"path/path.Context.joinAll","comment":"<p>Joins the given path parts into a single path. Example:</p>\n<pre><code>context.joinAll(['path', 'to', 'foo']); // -&gt; 'path/to/foo'\n</code></pre>\n<p>If any part ends in a path separator, then a redundant separator will not\nbe added:</p>\n<pre><code>context.joinAll(['path/', 'to', 'foo']); // -&gt; 'path/to/foo\n</code></pre>\n<p>If a part is an absolute path, then anything before that will be ignored:</p>\n<pre><code>context.joinAll(['path', '/to', 'foo']); // -&gt; '/to/foo'\n</code></pre>\n<p>For a fixed number of parts, <a>path/path.Context.join</a> is usually terser.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"parts":{"name":"parts","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"normalize":{"name":"normalize","qualifiedName":"path/path.Context.normalize","comment":"<p>Normalizes <a>path/path.Context.normalize.path</a>, simplifying it by handling <code>..</code>, and <code>.</code>, and\nremoving redundant path separators whenever possible.</p>\n<pre><code>context.normalize('path/./to/..//file.text'); // -&gt; 'path/file.txt'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prettyUri":{"name":"prettyUri","qualifiedName":"path/path.Context.prettyUri","comment":"<p>Returns a terse, human-readable representation of <a>path/path.Context.prettyUri.uri</a>.</p>\n<p><a>path/path.Context.prettyUri.uri</a> can be a <a>dart-core.String</a> or a <a>dart-core.Uri</a>. If it can be made relative to the\ncurrent working directory, that's done. Otherwise, it's returned as-is.\nThis gracefully handles non-<code>file:</code> URIs for <a>path/path-style.Style.posix</a> and\n<a>path/path-style.Style.windows</a>.</p>\n<p>The returned value is meant for human consumption, and may be either URI-\nor path-formatted.</p>\n<pre><code>// POSIX\nvar context = new Context(current: '/root/path');\ncontext.prettyUri('file:///root/path/a/b.dart'); // -&gt; 'a/b.dart'\ncontext.prettyUri('http://dartlang.org/'); // -&gt; 'http://dartlang.org'\n\n// Windows\nvar context = new Context(current: r'C:\\root\\path');\ncontext.prettyUri('file:///C:/root/path/a/b.dart'); // -&gt; r'a\\b.dart'\ncontext.prettyUri('http://dartlang.org/'); // -&gt; 'http://dartlang.org'\n\n// URL\nvar context = new Context(current: 'http://dartlang.org/root/path');\ncontext.prettyUri('http://dartlang.org/root/path/a/b.dart');\n    // -&gt; r'a/b.dart'\ncontext.prettyUri('file:///root/path'); // -&gt; 'file:///root/path'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"relative":{"name":"relative","qualifiedName":"path/path.Context.relative","comment":"<p>Attempts to convert <a>path/path.Context.relative.path</a> to an equivalent relative path relative to\nroot.</p>\n<pre><code>var context = new Context(current: '/root/path');\ncontext.relative('/root/path/a/b.dart'); // -&gt; 'a/b.dart'\ncontext.relative('/root/other.dart'); // -&gt; '../other.dart'\n</code></pre>\n<p>If the <a>path/path.Context.relative.from</a> argument is passed, <a>path/path.Context.relative.path</a> is made relative to that instead.</p>\n<pre><code>context.relative('/root/path/a/b.dart',\n    from: '/root/path'); // -&gt; 'a/b.dart'\ncontext.relative('/root/other.dart',\n    from: '/root/path'); // -&gt; '../other.dart'\n</code></pre>\n<p>If <a>path/path.Context.relative.path</a> and/or <a>path/path.Context.relative.from</a> are relative paths, they are assumed to be\nrelative to <a>path/path.Context.current</a>.</p>\n<p>Since there is no relative path from one drive letter to another on\nWindows, this will return an absolute path in that case.</p>\n<pre><code>context.relative(r'D:\\other', from: r'C:\\other'); // -&gt; 'D:\\other'\n</code></pre>\n<p>This will also return an absolute path if an absolute <a>path/path.Context.relative.path</a> is passed to\na context with a relative path for <a>path/path.Context.current</a>.</p>\n<pre><code>var context = new Context(r'some/relative/path');\ncontext.relative(r'/absolute/path'); // -&gt; '/absolute/path'\n</code></pre>\n<p>If root is relative, it may be impossible to determine a path from\n<a>path/path.Context.relative.from</a> to <a>path/path.Context.relative.path</a>. For example, if root and <a>path/path.Context.relative.path</a> are \".\" and <a>path/path.Context.relative.from</a> is\n\"/\", no path can be determined. In this case, a <a>path/path.PathException</a> will be\nthrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"from":{"name":"from","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"rootPrefix":{"name":"rootPrefix","qualifiedName":"path/path.Context.rootPrefix","comment":"<p>Returns the root of <a>path/path.Context.rootPrefix.path</a> if it's absolute, or an empty string if it's\nrelative.</p>\n<pre><code>// Unix\ncontext.rootPrefix('path/to/foo'); // -&gt; ''\ncontext.rootPrefix('/path/to/foo'); // -&gt; '/'\n\n// Windows\ncontext.rootPrefix(r'path\\to\\foo'); // -&gt; ''\ncontext.rootPrefix(r'C:\\path\\to\\foo'); // -&gt; r'C:\\'\n\n// URL\ncontext.rootPrefix('path/to/foo'); // -&gt; ''\ncontext.rootPrefix('http://dartlang.org/path/to/foo');\n  // -&gt; 'http://dartlang.org'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"split":{"name":"split","qualifiedName":"path/path.Context.split","comment":"<p>Splits <a>path/path.Context.split.path</a> into its components using the current platform's\n<a>path/path.Context.separator</a>. Example:</p>\n<pre><code>context.split('path/to/foo'); // -&gt; ['path', 'to', 'foo']\n</code></pre>\n<p>The path will <em>not</em> be normalized before splitting.</p>\n<pre><code>context.split('path/../foo'); // -&gt; ['path', '..', 'foo']\n</code></pre>\n<p>If <a>path/path.Context.split.path</a> is absolute, the root directory will be the first element in the\narray. Example:</p>\n<pre><code>// Unix\ncontext.split('/path/to/foo'); // -&gt; ['/', 'path', 'to', 'foo']\n\n// Windows\ncontext.split(r'C:\\path\\to\\foo'); // -&gt; [r'C:\\', 'path', 'to', 'foo']\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toUri":{"name":"toUri","qualifiedName":"path/path.Context.toUri","comment":"<p>Returns the URI that represents <a>path/path.Context.toUri.path</a>.</p>\n<p>For POSIX and Windows styles, this will return a <code>file:</code> URI. For the URL\nstyle, this will just convert <a>path/path.Context.toUri.path</a> to a <a>dart-core.Uri</a>.</p>\n<pre><code>// POSIX\ncontext.toUri('/path/to/foo')\n  // -&gt; Uri.parse('file:///path/to/foo')\n\n// Windows\ncontext.toUri(r'C:\\path\\to\\foo')\n  // -&gt; Uri.parse('file:///C:/path/to/foo')\n\n// URL\ncontext.toUri('http://dartlang.org/path/to/foo')\n  // -&gt; Uri.parse('http://dartlang.org/path/to/foo')\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"withoutExtension":{"name":"withoutExtension","qualifiedName":"path/path.Context.withoutExtension","comment":"<p>Removes a trailing extension from the last part of <a>path/path.Context.withoutExtension.path</a>.</p>\n<pre><code>context.withoutExtension('path/to/foo.dart'); // -&gt; 'path/to/foo'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"path/path.Context.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>path/path.Context.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"path/path.Context.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"path/path.Context.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>path/path.Context.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>path/path.Context.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"path/path.Context.noSuchMethod","comment":"<p><a>path/path.Context.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>path/path.Context.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>path/path.Context.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>path/path.Context.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"path/path.Context.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}