{"name":"HashMap","qualifiedName":"dart-collection.HashMap","comment":"<p>A hash-table based implementation of <a>dart-core.Map</a>.</p>\n<p>The keys of a <code>HashMap</code> must have consistent Object.operator==\nand <a>dart-core.Object.hashCode</a> implementations. This means that the <code>==</code> operator\nmust define a stable equivalence relation on the keys (reflexive,\nanti-symmetric, transitive, and consistent over time), and that <code>hashCode</code>\nmust be the same for objects that are considered equal by <code>==</code>.</p>\n<p>The map allows <code>null</code> as a key.</p>\n<p>Iterating the map's keys, values or entries (through forEach)\nmay happen in any order.\nThe itearation order only changes when the map is modified.\nValues are iterated in the same order as their associated keys,\nso iterating the keys and values in parallel\nwill give matching key and value pairs.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-core.Map"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-collection.HashMap.HashMap-","comment":"<p>Creates an unordered hash-table based <a>dart-core.Map</a>.</p>\n<p>The created map is not ordered in any way. When iterating the keys or\nvalues, the iteration order is unspecified except that it will stay the\nsame as long as the map isn't changed.</p>\n<p>If <a>dart-collection.HashMap.HashMap-.equals</a> is provided, it is used to compare the keys in the table with\nnew keys. If <a>dart-collection.HashMap.HashMap-.equals</a> is omitted, the key's own Object.operator== is used\ninstead.</p>\n<p>Similar, if <a>dart-collection.HashMap.HashMap-.hashCode</a> is provided, it is used to produce a hash value\nfor keys in order to place them in the hash table. If it is omitted, the\nkey's own <a>dart-collection.HashMap.hashCode</a> is used.</p>\n<p>If using methods like operator, remove and containsKey together\nwith a custom equality and hashcode, an extra <code>isValidKey</code> function\ncan be supplied. This function is called before calling <a>dart-collection.HashMap.HashMap-.equals</a> or\n<a>dart-collection.HashMap.HashMap-.hashCode</a> with an argument that may not be a <a>dart-collection.HashMap.K</a> instance, and if the\ncall returns false, the key is assumed to not be in the set.\nThe <a>dart-collection.HashMap.HashMap-.isValidKey</a> function defaults to just testing if the object is a\n<a>dart-collection.HashMap.K</a> instance.</p>\n<p>The used <code>equals</code> and <code>hashCode</code> method should always be consistent,\nso that if <code>equals(a, b)</code> then <code>hashCode(a) == hashCode(b)</code>. The hash\nof an object, or what it compares equal to, should not change while the\nobject is in the table. If it does change, the result is unpredictable.</p>\n<p>If you supply one of <a>dart-collection.HashMap.HashMap-.equals</a> and <a>dart-collection.HashMap.HashMap-.hashCode</a>,\nyou should generally also to supply the other.\nAn example would be using <a>dart-core.identical</a> and <a>dart-core.identityHashCode</a>,\nwhich is equivalent to using the shorthand <a>dart-collection.HashMap.HashMap-identity</a>).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.HashMap","inner":[{"outer":"dart-collection.HashMap.K","inner":[]},{"outer":"dart-collection.HashMap.V","inner":[]}]}],"parameters":{"equals":{"name":"equals","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"key1":{"name":"key1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.HashMap.K","inner":[]}],"value":null,"annotations":[]},"key2":{"name":"key2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.HashMap.K","inner":[]}],"value":null,"annotations":[]}}}},"hashCode":{"name":"hashCode","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.HashMap.K","inner":[]}],"value":null,"annotations":[]}}}},"isValidKey":{"name":"isValidKey","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"potentialKey":{"name":"potentialKey","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"from":{"name":"from","qualifiedName":"dart-collection.HashMap.HashMap-from","comment":"<p>Creates a <a>dart-collection.HashMap</a> that contains all key value pairs of <a>dart-collection.HashMap.HashMap-from.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.HashMap","inner":[{"outer":"dart-collection.HashMap.K","inner":[]},{"outer":"dart-collection.HashMap.V","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-collection.HashMap.K","inner":[]},{"outer":"dart-collection.HashMap.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"fromIterable":{"name":"fromIterable","qualifiedName":"dart-collection.HashMap.HashMap-fromIterable","comment":"<p>Creates a <a>dart-collection.HashMap</a> where the keys and values are computed from the\n<a>dart-collection.HashMap.HashMap-fromIterable.iterable</a>.</p>\n<p>For each element of the <a>dart-collection.HashMap.HashMap-fromIterable.iterable</a> this constructor computes a key/value\npair, by applying <a>dart-collection.HashMap.HashMap-fromIterable.key</a> and <a>dart-collection.HashMap.HashMap-fromIterable.value</a> respectively.</p>\n<p>The keys of the key/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.</p>\n<p>If no values are specified for <a>dart-collection.HashMap.HashMap-fromIterable.key</a> and <a>dart-collection.HashMap.HashMap-fromIterable.value</a> the default is the\nidentity function.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.HashMap","inner":[{"outer":"dart-collection.HashMap.K","inner":[]},{"outer":"dart-collection.HashMap.V","inner":[]}]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"key":{"name":"key","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-collection.HashMap.K","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"value":{"name":"value","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-collection.HashMap.V","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"fromIterables":{"name":"fromIterables","qualifiedName":"dart-collection.HashMap.HashMap-fromIterables","comment":"<p>Creates a <a>dart-collection.HashMap</a> associating the given <a>dart-collection.HashMap.HashMap-fromIterables.keys</a> to <a>dart-collection.HashMap.HashMap-fromIterables.values</a>.</p>\n<p>This constructor iterates over <a>dart-collection.HashMap.HashMap-fromIterables.keys</a> and <a>dart-collection.HashMap.HashMap-fromIterables.values</a> and maps each element of\n<a>dart-collection.HashMap.HashMap-fromIterables.keys</a> to the corresponding element of <a>dart-collection.HashMap.HashMap-fromIterables.values</a>.</p>\n<p>If <a>dart-collection.HashMap.HashMap-fromIterables.keys</a> contains the same object multiple times, the last occurrence\noverwrites the previous value.</p>\n<p>It is an error if the two <a>dart-core.Iterable</a>s don't have the same length.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.HashMap","inner":[{"outer":"dart-collection.HashMap.K","inner":[]},{"outer":"dart-collection.HashMap.V","inner":[]}]}],"parameters":{"keys":{"name":"keys","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.HashMap.K","inner":[]}]}],"value":null,"annotations":[]},"values":{"name":"values","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.HashMap.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"identity":{"name":"identity","qualifiedName":"dart-collection.HashMap.HashMap-identity","comment":"<p>Creates an unordered identity-based map.</p>\n<p>Effectively a shorthand for:</p>\n<pre><code>new HashMap(equals: identical, hashCode: identityHashCodeOf)\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.HashMap","inner":[{"outer":"dart-collection.HashMap.K","inner":[]},{"outer":"dart-collection.HashMap.V","inner":[]}]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-collection.HashMap.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-collection.HashMap.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-collection.HashMap.isEmpty","comment":"<p>Returns true if there is no key-value pair in the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.isEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-collection.HashMap.isNotEmpty","comment":"<p>Returns true if there is at least one key-value pair in the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.isNotEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"keys":{"name":"keys","qualifiedName":"dart-collection.HashMap.keys","comment":"<p>The keys of this.</p>\n<p>The returned iterable has efficient <code>length</code> and <code>contains</code> operations,\nbased on <a>dart-collection.HashMap.length</a> and <a>dart-collection.HashMap.containsKey</a> of the map.</p>\n<p>The order of iteration is defined by the individual <code>Map</code> implementation,\nbut must be consistent between changes to the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.keys","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.K","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-collection.HashMap.length","comment":"<p>The number of key-value pairs in the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-collection.HashMap.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"values":{"name":"values","qualifiedName":"dart-collection.HashMap.values","comment":"<p>The values of this.</p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a>dart-collection.HashMap.keys</a> and <a>dart-collection.HashMap.values</a> in parrallel will\nprovided matching pairs of keys and values.</p>\n<p>The returned iterable has an efficient <code>length</code> method based on the\n<a>dart-collection.HashMap.length</a> of the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.values","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-collection.HashMap.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-collection.HashMap.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-collection.HashMap.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"dart-collection.HashMap.[]","comment":"<p>Returns the value for the given <a>dart-collection.HashMap.[].key</a> or null if <a>dart-collection.HashMap.[].key</a> is not\nin the map. Because null values are supported, one should either\nuse <a>dart-collection.HashMap.containsKey</a> to distinguish between an absent key and a null\nvalue, or use the <a>dart-collection.HashMap.putIfAbsent</a> method.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.[]","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"dart-collection.HashMap.[]=","comment":"<p>Associates the <a>dart-collection.HashMap.[]=.key</a> with the given <a>dart-collection.HashMap.[]=.value</a>.</p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key-value pair is added to the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.[]=","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.V","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addAll":{"name":"addAll","qualifiedName":"dart-collection.HashMap.addAll","comment":"<p>Adds all key-value pairs of <a>dart-collection.HashMap.addAll.other</a> to this map.</p>\n<p>If a key of <a>dart-collection.HashMap.addAll.other</a> is already in this map, its value is overwritten.</p>\n<p>The operation is equivalent to doing <code>this[key] = value</code> for each key\nand associated value in other. It iterates over <a>dart-collection.HashMap.addAll.other</a>, which must\ntherefore not change during the iteration.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.addAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-collection.HashMap.clear","comment":"<p>Removes all pairs from the map.</p>\n<p>After this, the map is empty.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.clear","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"containsKey":{"name":"containsKey","qualifiedName":"dart-collection.HashMap.containsKey","comment":"<p>Returns true if this map contains the given key.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.containsKey","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsValue":{"name":"containsValue","qualifiedName":"dart-collection.HashMap.containsValue","comment":"<p>Returns true if this map contains the given value.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.containsValue","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-collection.HashMap.forEach","comment":"<p>Applies <a>dart-collection.HashMap.forEach.f</a> to each {key, value} pair of the map.</p>\n<p>Adding or removing keys from the map during iteration is not allowed.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.forEach","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.V","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-collection.HashMap.noSuchMethod","comment":"<p><a>dart-collection.HashMap.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-collection.HashMap.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-collection.HashMap.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-collection.HashMap.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"putIfAbsent":{"name":"putIfAbsent","qualifiedName":"dart-collection.HashMap.putIfAbsent","comment":"<p>If <a>dart-collection.HashMap.putIfAbsent.key</a> is not associated to a value, calls <a>dart-collection.HashMap.putIfAbsent.ifAbsent</a> and\nupdates the map by mapping <a>dart-collection.HashMap.putIfAbsent.key</a> to the value returned by\n<a>dart-collection.HashMap.putIfAbsent.ifAbsent</a>. Returns the value in the map.</p>\n<pre><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      // 36\nscores['Rohan'];    //  5\nscores['Sophena'];  //  7\n</code></pre>\n<p>The code that <a>dart-collection.HashMap.putIfAbsent.ifAbsent</a> executes must not add or remove keys.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.putIfAbsent","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"ifAbsent":{"name":"ifAbsent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-collection.HashMap.remove","comment":"<p>Removes the association for the given <a>dart-collection.HashMap.remove.key</a>. Returns the value for\n<a>dart-collection.HashMap.remove.key</a> in the map or null if <a>dart-collection.HashMap.remove.key</a> is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-collection.HashMap.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"K":{"name":"K","type":"dart.core.Object"},"V":{"name":"V","type":"dart.core.Object"}}}