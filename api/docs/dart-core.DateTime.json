{"name":"DateTime","qualifiedName":"dart-core.DateTime","comment":"<p>An instant in time, such as July 20, 1969, 8:18pm GMT.</p>\n<p>Create a DateTime object by using one of the constructors\nor by parsing a correctly formatted string,\nwhich complies with a subset of ISO 8601.\nNote that hours are specified between 0 and 23,\nas in a 24-hour clock.\nFor example:</p>\n<pre><code>DateTime now = new DateTime.now();\nDateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");  // 8:18pm\n</code></pre>\n<p>A DateTime object is anchored either in the UTC time zone\nor in the local time zone of the current computer\nwhen the object is created.</p>\n<p>Once created, neither the value nor the time zone\nof a DateTime object may be changed.</p>\n<p>You can use properties to get\nthe individual units of a DateTime object.</p>\n<pre><code>assert(berlinWallFell.month == 11);\nassert(moonLanding.hour == 20);\n</code></pre>\n<p>For convenience and readability,\nthe DateTime class provides a constant for each day and month\nname&mdash;for example, <a>dart-core.DateTime.AUGUST</a> and <a>dart-core.DateTime.FRIDAY</a>.\nYou can use these constants to improve code readibility:</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\nassert(berlinWallFell.weekday == DateTime.THURSDAY);\n</code></pre>\n<p>Day and month values begin at 1, and the week starts on Monday.\nThat is, the constants <a>dart-core.DateTime.JANUARY</a> and <a>dart-core.DateTime.MONDAY</a> are both 1.</p>\n<h2>Working with UTC and local time</h2>\n<p>A DateTime object is in the local time zone\nunless explicitly created in the UTC time zone.</p>\n<pre><code>DateTime dDay = new DateTime.utc(1944, 6, 6);\n</code></pre>\n<p>Use <a>dart-core.DateTime.isUtc</a> to determine whether a DateTime object is based in UTC.\nUse the methods <a>dart-core.DateTime.toLocal</a> and <a>dart-core.DateTime.toUtc</a>\nto get the equivalent date/time value specified in the other time zone.\nUse <a>dart-core.DateTime.timeZoneName</a> to get an abbreviated name of the time zone\nfor the DateTime object.\nTo find the difference\nbetween UTC and the time zone of a DateTime object\ncall <a>dart-core.DateTime.timeZoneOffset</a>.</p>\n<h2>Comparing DateTime objects</h2>\n<p>The DateTime class contains several handy methods,\nsuch as <a>dart-core.DateTime.isAfter</a>, <a>dart-core.DateTime.isBefore</a>, and <a>dart-core.DateTime.isAtSameMomentAs</a>,\nfor comparing DateTime objects.</p>\n<pre><code>assert(berlinWallFell.isAfter(moonLanding) == true);\nassert(berlinWallFell.isBefore(moonLanding) == false);\n</code></pre>\n<h2>Using DateTime with Duration</h2>\n<p>Use the <a>dart-core.DateTime.add</a> and <a>dart-core.DateTime.subtract</a> methods with a <a>dart-core.Duration</a> object\nto create a new DateTime object based on another.\nFor example, to find the date that is sixty days after today, write:</p>\n<pre><code>DateTime today = new DateTime.now();\nDateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n</code></pre>\n<p>To find out how much time is between two DateTime objects use\n<a>dart-core.DateTime.difference</a>, which returns a <a>dart-core.Duration</a> object:</p>\n<pre><code>Duration difference = berlinWallFell.difference(moonLanding)\nassert(difference.inDays == 7416);\n</code></pre>\n<p>The difference between two dates in different time zones\nis just the number of nanoseconds between the two points in time.\nIt doesn't take calendar days into account.\nThat means that the difference between two midnights in local time may be\nless than 24 hours times the number of days between them,\nif there is a daylight saving change in between.\nIf the difference above is calculated using Australian local time, the\ndifference is 7415 days and 23 hours, which is only 7415 whole days as\nreported by <code>inDays</code>.</p>\n<h2>Other resources</h2>\n<p>See <a>dart-core.Duration</a> to represent a span of time.\nSee <a>dart-core.Stopwatch</a> to measure timespans.</p>\n<p>The DateTime class does not provide internationalization.\nTo internationalize your code, use\nthe <a href=\"http://pub.dartlang.org/packages/intl\">intl</a> package.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Comparable"],"subclass":[],"variables":{"APRIL":{"name":"APRIL","qualifiedName":"dart-core.DateTime.APRIL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"AUGUST":{"name":"AUGUST","qualifiedName":"dart-core.DateTime.AUGUST","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"DAYS_PER_WEEK":{"name":"DAYS_PER_WEEK","qualifiedName":"dart-core.DateTime.DAYS_PER_WEEK","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"DECEMBER":{"name":"DECEMBER","qualifiedName":"dart-core.DateTime.DECEMBER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"FEBRUARY":{"name":"FEBRUARY","qualifiedName":"dart-core.DateTime.FEBRUARY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"FRIDAY":{"name":"FRIDAY","qualifiedName":"dart-core.DateTime.FRIDAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"JANUARY":{"name":"JANUARY","qualifiedName":"dart-core.DateTime.JANUARY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"JULY":{"name":"JULY","qualifiedName":"dart-core.DateTime.JULY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"JUNE":{"name":"JUNE","qualifiedName":"dart-core.DateTime.JUNE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MARCH":{"name":"MARCH","qualifiedName":"dart-core.DateTime.MARCH","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MAY":{"name":"MAY","qualifiedName":"dart-core.DateTime.MAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MONDAY":{"name":"MONDAY","qualifiedName":"dart-core.DateTime.MONDAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MONTHS_PER_YEAR":{"name":"MONTHS_PER_YEAR","qualifiedName":"dart-core.DateTime.MONTHS_PER_YEAR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NOVEMBER":{"name":"NOVEMBER","qualifiedName":"dart-core.DateTime.NOVEMBER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"OCTOBER":{"name":"OCTOBER","qualifiedName":"dart-core.DateTime.OCTOBER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SATURDAY":{"name":"SATURDAY","qualifiedName":"dart-core.DateTime.SATURDAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SEPTEMBER":{"name":"SEPTEMBER","qualifiedName":"dart-core.DateTime.SEPTEMBER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SUNDAY":{"name":"SUNDAY","qualifiedName":"dart-core.DateTime.SUNDAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"THURSDAY":{"name":"THURSDAY","qualifiedName":"dart-core.DateTime.THURSDAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TUESDAY":{"name":"TUESDAY","qualifiedName":"dart-core.DateTime.TUESDAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"WEDNESDAY":{"name":"WEDNESDAY","qualifiedName":"dart-core.DateTime.WEDNESDAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"isUtc":{"name":"isUtc","qualifiedName":"dart-core.DateTime.isUtc","comment":"<p>True if this <a>dart-core.DateTime</a> is set to UTC time.</p>\n<pre><code>DateTime dDay = new DateTime.utc(1944, 6, 6);\nassert(dDay.isUtc);\n</code></pre>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"millisecondsSinceEpoch":{"name":"millisecondsSinceEpoch","qualifiedName":"dart-core.DateTime.millisecondsSinceEpoch","comment":"<p>The number of milliseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).</p>\n<p>This value is independent of the time zone.</p>\n<p>This value is at most\n8,640,000,000,000,000ms (100,000,000 days) from the Unix epoch.\nIn other words: <code>millisecondsSinceEpoch.abs() &lt;= 8640000000000000</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"day":{"name":"day","qualifiedName":"dart-core.DateTime.day","comment":"<p>The day of the month 1..31.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.day == 20);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-core.DateTime.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.DateTime.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hour":{"name":"hour","qualifiedName":"dart-core.DateTime.hour","comment":"<p>The hour of the day, expressed as in a 24-hour clock 0..23.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.hour == 20);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"millisecond":{"name":"millisecond","qualifiedName":"dart-core.DateTime.millisecond","comment":"<p>The millisecond 0...999.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.millisecond == 0);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"minute":{"name":"minute","qualifiedName":"dart-core.DateTime.minute","comment":"<p>The minute 0...59.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.minute == 18);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"month":{"name":"month","qualifiedName":"dart-core.DateTime.month","comment":"<p>The month 1..12.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.month == 7);\nassert(moonLanding.month == DateTime.JULY);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"second":{"name":"second","qualifiedName":"dart-core.DateTime.second","comment":"<p>The second 0...59.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.second == 0);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"timeZoneName":{"name":"timeZoneName","qualifiedName":"dart-core.DateTime.timeZoneName","comment":"<p>The abbreviated time zone name&mdash;for example,\n<code>\"CET\"</code> or <code>\"CEST\"</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"timeZoneOffset":{"name":"timeZoneOffset","qualifiedName":"dart-core.DateTime.timeZoneOffset","comment":"<p>The time zone offset, which\nis the difference between local time and UTC.</p>\n<p>The offset is positive for time zones east of UTC.</p>\n<p>Note, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[]},"weekday":{"name":"weekday","qualifiedName":"dart-core.DateTime.weekday","comment":"<p>The day of the week <a>dart-core.DateTime.MONDAY</a>..<a>dart-core.DateTime.SUNDAY</a>.</p>\n<p>In accordance with ISO 8601\na week starts with Monday, which has the value 1.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.weekday == 7);\nassert(moonLanding.weekday == DateTime.SUNDAY);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"year":{"name":"year","qualifiedName":"dart-core.DateTime.year","comment":"<p>The year.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.year == 1969);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.DateTime.DateTime-","comment":"<p>Constructs a <a>dart-core.DateTime</a> instance specified in the local time zone.</p>\n<p>For example,\nto create a new DateTime object representing April 29, 2014, 6:04am:</p>\n<pre><code>DateTime annularEclipse = new DateTime(2014, DateTime.APRIL, 29, 6, 4);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"year":{"name":"year","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"month":{"name":"month","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]},"day":{"name":"day","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]},"hour":{"name":"hour","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"minute":{"name":"minute","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"second":{"name":"second","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"millisecond":{"name":"millisecond","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"fromMillisecondsSinceEpoch":{"name":"fromMillisecondsSinceEpoch","qualifiedName":"dart-core.DateTime.DateTime-fromMillisecondsSinceEpoch","comment":"<p>Constructs a new <a>dart-core.DateTime</a> instance\nwith the given <a>dart-core.DateTime.DateTime-fromMillisecondsSinceEpoch.millisecondsSinceEpoch</a>.</p>\n<p>If <a>dart-core.DateTime.DateTime-fromMillisecondsSinceEpoch.isUtc</a> is false then the date is in the local time zone.</p>\n<p>The constructed <a>dart-core.DateTime</a> represents\n1970-01-01T00:00:00Z + <a>dart-core.DateTime.DateTime-fromMillisecondsSinceEpoch.millisecondsSinceEpoch</a> ms in the given\ntime zone (local or UTC).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"millisecondsSinceEpoch":{"name":"millisecondsSinceEpoch","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"isUtc":{"name":"isUtc","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"now":{"name":"now","qualifiedName":"dart-core.DateTime.DateTime-now","comment":"<p>Constructs a <a>dart-core.DateTime</a> instance with current date and time in the\nlocal time zone.</p>\n<pre><code>DateTime thisInstant = new DateTime.now();\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"utc":{"name":"utc","qualifiedName":"dart-core.DateTime.DateTime-utc","comment":"<p>Constructs a <a>dart-core.DateTime</a> instance specified in the UTC time zone.</p>\n<pre><code>DateTime dDay = new DateTime.utc(1944, DateTime.JUNE, 6);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"year":{"name":"year","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"month":{"name":"month","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]},"day":{"name":"day","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]},"hour":{"name":"hour","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"minute":{"name":"minute","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"second":{"name":"second","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"millisecond":{"name":"millisecond","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"dart-core.DateTime.==","comment":"<p>Returns true if <a>dart-core.DateTime.==.other</a> is a <a>dart-core.DateTime</a> at the same moment and in the\nsame time zone (UTC or local).</p>\n<pre><code>DateTime dDayUtc   = new DateTime.utc(1944, DateTime.JUNE, 6);\nDateTime dDayLocal = new DateTime(1944, DateTime.JUNE, 6);\n\nassert(dDayUtc.isAtSameMomentAs(dDayLocal) == false);\n</code></pre>\n<p>See <a>dart-core.DateTime.isAtSameMomentAs</a> for a comparison that adjusts for time zone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"dart-core.DateTime.add","comment":"<p>Returns a new <a>dart-core.DateTime</a> instance with <a>dart-core.DateTime.add.duration</a> added to this.</p>\n<pre><code>DateTime today = new DateTime.now();\nDateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"dart-core.DateTime.compareTo","comment":"<p>Compares this DateTime object to <a>dart-core.DateTime.compareTo.other</a>,\nreturning zero if the values are equal.</p>\n<p>This function returns a negative integer\nif this DateTime is smaller (earlier) than <a>dart-core.DateTime.compareTo.other</a>,\nor a positive integer if it is greater (later).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"difference":{"name":"difference","qualifiedName":"dart-core.DateTime.difference","comment":"<p>Returns a <a>dart-core.Duration</a> with the difference between this and <a>dart-core.DateTime.difference.other</a>.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\nDateTime dDay = new DateTime(1944, DateTime.JUNE, 6);\n\nDuration difference = berlinWallFell.difference(dDay);\nassert(difference.inDays == 16592);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isAfter":{"name":"isAfter","qualifiedName":"dart-core.DateTime.isAfter","comment":"<p>Returns true if this occurs after <a>dart-core.DateTime.isAfter.other</a>.</p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isAfter(moonLanding) == true);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isAtSameMomentAs":{"name":"isAtSameMomentAs","qualifiedName":"dart-core.DateTime.isAtSameMomentAs","comment":"<p>Returns true if this occurs at the same moment as <a>dart-core.DateTime.isAtSameMomentAs.other</a>.</p>\n<p>The comparison is independent of whether the time is in UTC or in the local\ntime zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isAtSameMomentAs(moonLanding) == false);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isBefore":{"name":"isBefore","qualifiedName":"dart-core.DateTime.isBefore","comment":"<p>Returns true if this occurs before <a>dart-core.DateTime.isBefore.other</a>.</p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isBefore(moonLanding) == false);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"dart-core.DateTime.parse","comment":"<p>Constructs a new <a>dart-core.DateTime</a> instance based on <a>dart-core.DateTime.parse.formattedString</a>.</p>\n<p>Throws a <a>dart-core.FormatException</a> if the input cannot be parsed.</p>\n<p>The function parses a subset of ISO 8601\nwhich includes the subset accepted by RFC 3339.</p>\n<p>The result is always in either local time or UTC.\nIf a time zone offset other than UTC is specified,\nthe time is converted to the equivalent UTC time.</p>\n<p>Examples of accepted strings:</p><ul><li><code>\"2012-02-27 13:27:00\"</code></li><li><code>\"2012-02-27 13:27:00.123456z\"</code></li><li><code>\"20120227 13:27:00\"</code></li><li><code>\"20120227T132700\"</code></li><li><code>\"20120227\"</code></li><li><code>\"+20120227\"</code></li><li><code>\"2012-02-27T14Z\"</code></li><li><code>\"2012-02-27T14+00:00\"</code></li><li><code>\"-123450101 00:00:00 Z\"</code>: in the year -12345.</li><li><code>\"2002-02-27T14:00:00-0500\"</code>: Same as <code>\"2002-02-27T19:00:00Z\"</code></li></ul>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{"formattedString":{"name":"formattedString","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"subtract":{"name":"subtract","qualifiedName":"dart-core.DateTime.subtract","comment":"<p>Returns a new <a>dart-core.DateTime</a> instance with <a>dart-core.DateTime.subtract.duration</a> subtracted from this.</p>\n<pre><code>DateTime today = new DateTime.now();\nDateTime sixtyDaysAgo = today.subtract(new Duration(days: 60));\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toIso8601String":{"name":"toIso8601String","qualifiedName":"dart-core.DateTime.toIso8601String","comment":"<p>Returns an ISO-8601 full-precision extended format representation.</p>\n<p>The format is \"YYYY-MM-DDTHH:mm:ss.sssZ\" for UTC time, and\n\"YYYY-MM-DDTHH:mm:ss.sss\" (no trailing \"Z\") for local/non-UTC time.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toLocal":{"name":"toLocal","qualifiedName":"dart-core.DateTime.toLocal","comment":"<p>Returns this DateTime value in the local time zone.</p>\n<p>Returns this if it is already in the local time zone.\nOtherwise this method is equivalent to:</p>\n<pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                        isUtc: false)\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.DateTime.toString","comment":"<p>Returns a human-readable string for this instance.</p>\n<p>The returned string is constructed for the time zone of this instance.\nThe <code>toString()</code> method provides a simply formatted string.\nIt does not support internationalized strings.\nUse the <a href=\"http://pub.dartlang.org/packages/intl\">intl</a> package\nat the pub shared packages repo.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toUtc":{"name":"toUtc","qualifiedName":"dart-core.DateTime.toUtc","comment":"<p>Returns this DateTime value in the UTC time zone.</p>\n<p>Returns this if it is already in UTC.\nOtherwise this method is equivalent to:</p>\n<pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                        isUtc: true)\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.DateTime.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.DateTime.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.DateTime.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.DateTime.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.DateTime.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.DateTime.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"dart-core.DateTime.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>dart-core.DateTime.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>dart-core.DateTime.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>dart-core.DateTime.compareTo.other</a>,\nand zero if <code>this</code> and <a>dart-core.DateTime.compareTo.other</a> are ordered together.</p>\n<p>The <a>dart-core.DateTime.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Comparable.compareTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.DateTime.noSuchMethod","comment":"<p><a>dart-core.DateTime.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.DateTime.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.DateTime.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.DateTime.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.DateTime.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}