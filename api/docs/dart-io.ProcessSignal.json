{"name":"ProcessSignal","qualifiedName":"dart-io.ProcessSignal","comment":"<p>On Posix systems, <a>dart-io.ProcessSignal</a> is used to send a specific signal\nto a child process, see <code>Process.kill</code>.</p>\n<p>Some <a>dart-io.ProcessSignal</a>s can also be watched, as a way to intercept the default\nsignal handler and implement another. See <a>dart-io.ProcessSignal.watch</a> for more\ninformation.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"SIGABRT":{"name":"SIGABRT","qualifiedName":"dart-io.ProcessSignal.SIGABRT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGALRM":{"name":"SIGALRM","qualifiedName":"dart-io.ProcessSignal.SIGALRM","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGBUS":{"name":"SIGBUS","qualifiedName":"dart-io.ProcessSignal.SIGBUS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGCHLD":{"name":"SIGCHLD","qualifiedName":"dart-io.ProcessSignal.SIGCHLD","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGCONT":{"name":"SIGCONT","qualifiedName":"dart-io.ProcessSignal.SIGCONT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGFPE":{"name":"SIGFPE","qualifiedName":"dart-io.ProcessSignal.SIGFPE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGHUP":{"name":"SIGHUP","qualifiedName":"dart-io.ProcessSignal.SIGHUP","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGILL":{"name":"SIGILL","qualifiedName":"dart-io.ProcessSignal.SIGILL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGINT":{"name":"SIGINT","qualifiedName":"dart-io.ProcessSignal.SIGINT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGKILL":{"name":"SIGKILL","qualifiedName":"dart-io.ProcessSignal.SIGKILL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGPIPE":{"name":"SIGPIPE","qualifiedName":"dart-io.ProcessSignal.SIGPIPE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGPOLL":{"name":"SIGPOLL","qualifiedName":"dart-io.ProcessSignal.SIGPOLL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGPROF":{"name":"SIGPROF","qualifiedName":"dart-io.ProcessSignal.SIGPROF","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGQUIT":{"name":"SIGQUIT","qualifiedName":"dart-io.ProcessSignal.SIGQUIT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGSEGV":{"name":"SIGSEGV","qualifiedName":"dart-io.ProcessSignal.SIGSEGV","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGSTOP":{"name":"SIGSTOP","qualifiedName":"dart-io.ProcessSignal.SIGSTOP","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGSYS":{"name":"SIGSYS","qualifiedName":"dart-io.ProcessSignal.SIGSYS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGTERM":{"name":"SIGTERM","qualifiedName":"dart-io.ProcessSignal.SIGTERM","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGTRAP":{"name":"SIGTRAP","qualifiedName":"dart-io.ProcessSignal.SIGTRAP","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGTSTP":{"name":"SIGTSTP","qualifiedName":"dart-io.ProcessSignal.SIGTSTP","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGTTIN":{"name":"SIGTTIN","qualifiedName":"dart-io.ProcessSignal.SIGTTIN","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGTTOU":{"name":"SIGTTOU","qualifiedName":"dart-io.ProcessSignal.SIGTTOU","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGURG":{"name":"SIGURG","qualifiedName":"dart-io.ProcessSignal.SIGURG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGUSR1":{"name":"SIGUSR1","qualifiedName":"dart-io.ProcessSignal.SIGUSR1","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGUSR2":{"name":"SIGUSR2","qualifiedName":"dart-io.ProcessSignal.SIGUSR2","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGVTALRM":{"name":"SIGVTALRM","qualifiedName":"dart-io.ProcessSignal.SIGVTALRM","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGWINCH":{"name":"SIGWINCH","qualifiedName":"dart-io.ProcessSignal.SIGWINCH","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGXCPU":{"name":"SIGXCPU","qualifiedName":"dart-io.ProcessSignal.SIGXCPU","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]},"SIGXFSZ":{"name":"SIGXFSZ","qualifiedName":"dart-io.ProcessSignal.SIGXFSZ","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-io.ProcessSignal","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"dart-io.ProcessSignal.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"watch":{"name":"watch","qualifiedName":"dart-io.ProcessSignal.watch","comment":"<p>Watch for process signals.</p>\n<p>The following <a>dart-io.ProcessSignal</a>s can be listened to:</p><ul><li><a>dart-io.ProcessSignal.SIGHUP</a>.</li><li><a>dart-io.ProcessSignal.SIGINT</a>. Signal sent by e.g. CTRL-C.</li><li><a>dart-io.ProcessSignal.SIGTERM</a>. Not available on Windows.</li><li><a>dart-io.ProcessSignal.SIGUSR1</a>. Not available on Windows.</li><li><a>dart-io.ProcessSignal.SIGUSR2</a>. Not available on Windows.</li><li><a>dart-io.ProcessSignal.SIGWINCH</a>. Not available on Windows.</li></ul>\n<p>Other signals are disallowed, as they may be used by the VM.</p>\n<p>A signal can be watched multiple times, from multiple isolates, where all\ncallbacks are invoked when signaled, in no specific order.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-io.ProcessSignal","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.ProcessSignal.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.ProcessSignal.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.ProcessSignal.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.ProcessSignal.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.ProcessSignal.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.ProcessSignal.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.ProcessSignal.noSuchMethod","comment":"<p><a>dart-io.ProcessSignal.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.ProcessSignal.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.ProcessSignal.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.ProcessSignal.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.ProcessSignal.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}