{"name":"http_server","qualifiedName":"http_server/http_server","comment":"<p>A library for serving HTTP requests and resources.</p>\n<h2>Installing</h2>\n<p>Use <a href=\"http://pub.dartlang.org/packages/http_server\">pub</a> to install this package. Add the following to your\n<code>pubspec.yaml</code> file.</p>\n<pre><code>dependencies:\n  http_server: any\n</code></pre>\n<p>Then run <code>pub install</code>.</p>\n<p>For more information, see the\n<a href=\"http://pub.dartlang.org/packages/http_server\">http_server package on pub.dartlang.org</a>.</p>\n<h2>Basic usage</h2>\n<p>Here is a short example of how to serve all files from the current\ndirectory.</p>\n<pre><code>import 'dart:io';\nimport 'dart:async';\nimport 'package:http_server/http_server.dart';\n\nvoid main() {\n  var staticFiles = new VirtualDirectory('.')\n    ..allowDirectoryListing = true;\n\n  runZoned(() {\n    HttpServer.bind('0.0.0.0', 7777).then((server) {\n      print('Server running');\n      server.listen(staticFiles.serveRequest);\n    });\n  },\n  onError: (e, stackTrace) =&gt; print('Oh noes! $e $stackTrace'));\n}\n</code></pre>\n<h2>Virtual directory</h2>\n<p>The <a>http_server/http_server.VirtualDirectory</a> class makes it easy to serve static content\nfrom the file system. It supports:</p><ul><li>Range-based requests.</li><li>If-Modified-Since based caching.</li><li>Automatic GZip-compression of content.</li><li>\n<p>Following symlinks, either throughout the system or inside\na jailed root.</p></li><li>Directory listing.</li></ul>\n<p>See <a>http_server/http_server.VirtualDirectory</a> for more information.</p>\n<h2>Virtual host</h2>\n<p>The <a>http_server/http_server.VirtualHost</a> class helps to serve multiple hosts on the same\naddress, by using the <code>Host</code> field of the incoming requests. It also\nworks with wildcards for sub-domains.</p>\n<pre><code>var virtualHost = new VirtualHost(server);\n// Filter out on a specific host\nvar stream1 = virtualServer.addHost('static.myserver.com');\n// Wildcard for any other sub-domains.\nvar stream2 = virtualServer.addHost('*.myserver.com');\n// Requets not matching any hosts.\nvar stream3 = virtualServer.unhandled;\n</code></pre>\n<p>See <a>http_server/http_server.VirtualHost</a> for more information.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"HttpBody","qualifiedName":"http_server/http_server.HttpBody","preview":"<p>A HTTP content body produced by <a>http_server/http_server.HttpBodyHandler</a> for either <a>http_server/dart-io.HttpRequest</a>\nor <a>http_server/dart-io.HttpClientResponse</a>.</p>"},{"name":"HttpBodyFileUpload","qualifiedName":"http_server/http_server.HttpBodyFileUpload","preview":"<p>A <a>http_server/http_server.HttpBodyFileUpload</a> object wraps a file upload, presenting a way for\nextracting filename, contentType and the data of the uploaded file.</p>"},{"name":"HttpBodyHandler","qualifiedName":"http_server/http_server.HttpBodyHandler","preview":"<p><a>http_server/http_server.HttpBodyHandler</a> is a helper class for processing and collecting\nHTTP message data in an easy-to-use <a>http_server/http_server.HttpBody</a> object. The content\nbody is parsed, depending on the <code>Content-Type</code> header field. When\nthe full body is read and parsed the body content is made\navailable. The class can be used to process both server requests\nand client responses.</p>"},{"name":"HttpClientResponseBody","qualifiedName":"http_server/http_server.HttpClientResponseBody","preview":"<p>The <a>http_server/http_server.HttpBody</a> of a <a>http_server/dart-io.HttpClientResponse</a> will be of type\n<a>http_server/http_server.HttpClientResponseBody</a>. It contains the <a>http_server/dart-io.HttpClientResponse</a> object\nfor access to the headers.</p>"},{"name":"HttpMultipartFormData","qualifiedName":"http_server/http_server.HttpMultipartFormData","preview":"<p><code>HttpMultipartFormData</code> class used for 'upgrading' a <a>http_server/mime-shared.MimeMultipart</a> by\nparsing it as a 'multipart/form-data' part. The following code shows how\nit can be used.</p>"},{"name":"HttpRequestBody","qualifiedName":"http_server/http_server.HttpRequestBody","preview":"<p>The <a>http_server/http_server.HttpBody</a> of a <a>http_server/dart-io.HttpRequest</a> will be of type <a>http_server/http_server.HttpRequestBody</a>. It\nprovides access to the request, for reading all request header information\nand responding to the client.</p>"},{"name":"VirtualDirectory","qualifiedName":"http_server/http_server.VirtualDirectory","preview":"<p>A <a>http_server/http_server.VirtualDirectory</a> can serve files and directory-listing from a root path,\nto <a>http_server/dart-io.HttpRequest</a>s.</p>"},{"name":"VirtualHost","qualifiedName":"http_server/http_server.VirtualHost","preview":"<p>The <a>http_server/http_server.VirtualHost</a> class is a utility class for handling multiple hosts on\nmultiple sources, by using a named-based approach.</p>"}],"typedef":{},"error":[]},"packageName":"http_server","packageIntro":"<h1>http_server</h1>\n<p>This package contains a set of high-level classes that, together with\nHttpServer, makes is easy to provide content through HTTP servers.</p>\n<p><strong>NOTE:</strong> This package currently only works for\nserver-side or command-line Dart applications. In other words, if the app\nimports <code>dart:io</code>, it can use this package.</p>\n<h2>Using</h2>\n<p>Please see the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/http_server.html\">API docs</a> for explanations and examples.</p>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"}