{"name":"VirtualDirectory","qualifiedName":"http_server/http_server.VirtualDirectory","comment":"<p>A <a>http_server/http_server.VirtualDirectory</a> can serve files and directory-listing from a root path,\nto <a>http_server/dart-io.HttpRequest</a>s.</p>\n<p>The <a>http_server/http_server.VirtualDirectory</a> providing secure handling of request uris and\nfile-system links, correct mime-types and custom error pages.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"allowDirectoryListing":{"name":"allowDirectoryListing","qualifiedName":"http_server/http_server.VirtualDirectory.allowDirectoryListing","comment":"<p>Set or get if the <a>http_server/http_server.VirtualDirectory</a> should list the content of\ndirectories.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"followLinks":{"name":"followLinks","qualifiedName":"http_server/http_server.VirtualDirectory.followLinks","comment":"<p>Set or get if the <a>http_server/http_server.VirtualDirectory</a> should follow links, that point\nto other resources within the <a>http_server/http_server.VirtualDirectory.root</a> directory.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"jailRoot":{"name":"jailRoot","qualifiedName":"http_server/http_server.VirtualDirectory.jailRoot","comment":"<p>Set or get if the <a>http_server/http_server.VirtualDirectory</a> should jail the root. When the root is\nnot jailed, links can be followed to outside the <a>http_server/http_server.VirtualDirectory.root</a> directory.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"root":{"name":"root","qualifiedName":"http_server/http_server.VirtualDirectory.root","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"directoryHandler=":{"name":"directoryHandler=","qualifiedName":"http_server/http_server.VirtualDirectory.directoryHandler=","comment":"<p>Set the <a>http_server/http_server.VirtualDirectory.directoryHandler=.callback</a> to override the default directory listing. The\n<a>http_server/http_server.VirtualDirectory.directoryHandler=.callback</a> will be called with the <a>http_server/dart-io.Directory</a> to be listed and the\n<a>http_server/dart-io.HttpRequest</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"dir":{"name":"dir","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.Directory","inner":[]}],"value":null,"annotations":[]},"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"errorPageHandler=":{"name":"errorPageHandler=","qualifiedName":"http_server/http_server.VirtualDirectory.errorPageHandler=","comment":"<p>Set the <a>http_server/http_server.VirtualDirectory.errorPageHandler=.callback</a> to override the error page handler. When <a>http_server/http_server.VirtualDirectory.errorPageHandler=.callback</a> is\ninvoked, the <code>statusCode</code> property of the response is set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"getters":{},"constructors":{"":{"name":"","qualifiedName":"http_server/http_server.VirtualDirectory.VirtualDirectory-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"root":{"name":"root","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"serve":{"name":"serve","qualifiedName":"http_server/http_server.VirtualDirectory.serve","comment":"<p>Serve a <a>http_server/http_server.Stream</a> of <a>http_server/dart-io.HttpRequest</a>s, in this <a>http_server/http_server.VirtualDirectory</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"parameters":{"requests":{"name":"requests","optional":false,"named":false,"default":false,"type":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"serveFile":{"name":"serveFile","qualifiedName":"http_server/http_server.VirtualDirectory.serveFile","comment":"<p>Serve the content of <a>http_server/http_server.VirtualDirectory.serveFile.file</a> to <a>http_server/http_server.VirtualDirectory.serveFile.request</a>.</p>\n<p>This is usefull when e.g. overriding <a>http_server/http_server.VirtualDirectory.directoryHandler=</a> to redirect to\nsome index file.</p>\n<p>In the request contains the [HttpStatus.IF_MODIFIED_SINCE] header,\n<a>http_server/http_server.VirtualDirectory.serveFile</a> will send a <a>http_server/dart-io.HttpStatus.NOT_MODIFIED</a> response if the file\nwas not changed.</p>\n<p>Note that if it was unabled to read from <a>http_server/http_server.VirtualDirectory.serveFile.file</a>, the <a>http_server/http_server.VirtualDirectory.serveFile.request</a>s response\nis closed with error-code <a>http_server/dart-io.HttpStatus.NOT_FOUND</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"file":{"name":"file","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.File","inner":[]}],"value":null,"annotations":[]},"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"serveRequest":{"name":"serveRequest","qualifiedName":"http_server/http_server.VirtualDirectory.serveRequest","comment":"<p>Serve a single <a>http_server/dart-io.HttpRequest</a>, in this <a>http_server/http_server.VirtualDirectory</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"http_server/http_server.VirtualDirectory.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>http_server/http_server.VirtualDirectory.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"http_server/http_server.VirtualDirectory.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"http_server/http_server.VirtualDirectory.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>http_server/http_server.VirtualDirectory.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>http_server/http_server.VirtualDirectory.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"http_server/http_server.VirtualDirectory.noSuchMethod","comment":"<p><a>http_server/http_server.VirtualDirectory.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>http_server/http_server.VirtualDirectory.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>http_server/http_server.VirtualDirectory.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>http_server/http_server.VirtualDirectory.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http_server/http_server.VirtualDirectory.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}