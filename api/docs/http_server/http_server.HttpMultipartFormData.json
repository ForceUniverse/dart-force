{"name":"HttpMultipartFormData","qualifiedName":"http_server/http_server.HttpMultipartFormData","comment":"<p><code>HttpMultipartFormData</code> class used for 'upgrading' a <a>http_server/mime-shared.MimeMultipart</a> by\nparsing it as a 'multipart/form-data' part. The following code shows how\nit can be used.</p>\n<p>  HttpServer server = ...;\n  server.listen((request) {</p>\n<pre><code>String boundary = request.headers.contentType.parameters['boundary'];\nrequest\n    .transform(new MimeMultipartTransformer(boundary))\n    .map(HttpMultipartFormData.parse)\n    .map((HttpMultipartFormData formData) {\n      // form data object available here.\n    });\n</code></pre>\n<p><code>HttpMultipartFormData</code> is a Stream, serving either bytes or decoded\nStrings. Use <a>http_server/http_server.HttpMultipartFormData.isText</a> or <a>http_server/http_server.HttpMultipartFormData.isBinary</a> to see what type of data is provided.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["http_server/http_server.Stream"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"contentDisposition":{"name":"contentDisposition","qualifiedName":"http_server/http_server.HttpMultipartFormData.contentDisposition","comment":"<p>The parsed <code>Content-Disposition</code> header of the <code>HttpMultipartFormData</code>.\nThis field is always present. Use this to extract e.g. name(form field\nname)and filename (client provided name of uploaded file) parameters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HeaderValue","inner":[]}],"parameters":{},"annotations":[]},"contentTransferEncoding":{"name":"contentTransferEncoding","qualifiedName":"http_server/http_server.HttpMultipartFormData.contentTransferEncoding","comment":"<p>The parsed <code>Content-Transfer-Encoding</code> header of the\n<code>HttpMultipartFormData</code>. This field is used to determine how to decode\nthe data. Returns <code>null</code> if not present.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HeaderValue","inner":[]}],"parameters":{},"annotations":[]},"contentType":{"name":"contentType","qualifiedName":"http_server/http_server.HttpMultipartFormData.contentType","comment":"<p>The parsed <code>Content-Type</code> header of the <code>HttpMultipartFormData</code>.\nReturns <code>null</code> if not present.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.ContentType","inner":[]}],"parameters":{},"annotations":[]},"isBinary":{"name":"isBinary","qualifiedName":"http_server/http_server.HttpMultipartFormData.isBinary","comment":"<p>Returns <code>true</code> if the data is raw bytes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isText":{"name":"isText","qualifiedName":"http_server/http_server.HttpMultipartFormData.isText","comment":"<p>Returns <code>true</code> if the data is decoded as <a>dart-core.String</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"parse":{"name":"parse","qualifiedName":"http_server/http_server.HttpMultipartFormData.parse","comment":"<p>Parse a <a>http_server/mime-shared.MimeMultipart</a> and return a <a>http_server/http_server.HttpMultipartFormData</a>. If the\n<code>Content-Disposition</code> header is missing or invalid, a <a>http_server/dart-io.HttpException</a> is\nthrown.</p>\n<p>If the <a>http_server/mime-shared.MimeMultipart</a> is identified as text, and the <code>Content-Type</code>\nheader is missing, the data is decoded using <a>http_server/http_server.HttpMultipartFormData.parse.defaultEncoding</a>. See more\ninformation in the\n<a href=\"http://dev.w3.org/html5/spec-preview/\nconstraints.html#multipart-form-data\">HTML5 spec</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.HttpMultipartFormData","inner":[]}],"parameters":{"multipart":{"name":"multipart","optional":false,"named":false,"default":false,"type":[{"outer":"mime-shared.MimeMultipart","inner":[]}],"value":null,"annotations":[]},"defaultEncoding":{"name":"defaultEncoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"value":{"name":"value","qualifiedName":"http_server/http_server.HttpMultipartFormData.value","comment":"<p>Returns the value for the header named <a>http_server/http_server.HttpMultipartFormData.value.name</a>. If there\nis no header with the provided name, <code>null</code> will be returned.</p>\n<p>Use this method to index other headers available in the original\n<a>http_server/mime-shared.MimeMultipart</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"http_server/http_server.HttpMultipartFormData.first","comment":"<p>Returns the first element of the stream.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed\nand cannot be reused after a call to this getter.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>\n<p>Except for the type of the error, this method is equivalent to\n<code>this.elementAt(0)</code>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"http_server/http_server.HttpMultipartFormData.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>http_server/http_server.HttpMultipartFormData.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isBroadcast":{"name":"isBroadcast","qualifiedName":"http_server/http_server.HttpMultipartFormData.isBroadcast","comment":"<p>Reports whether this stream is a broadcast stream.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.isBroadcast","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"http_server/http_server.HttpMultipartFormData.isEmpty","comment":"<p>Reports whether this stream contains any elements.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this getter.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"http_server/http_server.HttpMultipartFormData.last","comment":"<p>Returns the last element of the stream.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"http_server/http_server.HttpMultipartFormData.length","comment":"<p>Counts the elements in the stream.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"http_server/http_server.HttpMultipartFormData.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"http_server/http_server.HttpMultipartFormData.single","comment":"<p>Returns the single element.</p>\n<p>If an error event occurs before or after the first data event, the\nresulting future is completed with that error.</p>\n<p>If this is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"http_server/http_server.HttpMultipartFormData.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>http_server/http_server.HttpMultipartFormData.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>http_server/http_server.HttpMultipartFormData.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"any":{"name":"any","qualifiedName":"http_server/http_server.HttpMultipartFormData.any","comment":"<p>Checks whether <a>http_server/http_server.HttpMultipartFormData.any.test</a> accepts any element provided by this stream.</p>\n<p>Completes the <a>http_server/dart-async.Future</a> when the answer is known.</p>\n<p>If this stream reports an error, the <a>http_server/dart-async.Future</a> reports that error.</p>\n<p>Stops listening to the stream after the first matching element has been\nfound.</p>\n<p>Internally the method cancels its subscription after this element. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asBroadcastStream":{"name":"asBroadcastStream","qualifiedName":"http_server/http_server.HttpMultipartFormData.asBroadcastStream","comment":"<p>Returns a multi-subscription stream that produces the same events as this.</p>\n<p>If this stream is already a broadcast stream, it is returned unmodified.</p>\n<p>If this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.</p>\n<p>If <a>http_server/http_server.HttpMultipartFormData.asBroadcastStream.onListen</a> is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto <a>http_server/http_server.HttpMultipartFormData.asBroadcastStream.onListen</a>. It is not possible to change the event handlers, including\nusing <a>http_server/dart-async.StreamSubscription.asFuture</a>.</p>\n<p>If <a>http_server/http_server.HttpMultipartFormData.asBroadcastStream.onCancel</a> is provided, it is called in a similar way to <a>http_server/http_server.HttpMultipartFormData.asBroadcastStream.onListen</a>\nwhen the returned stream stops having listener. If it later gets\na new listener, the <a>http_server/http_server.HttpMultipartFormData.asBroadcastStream.onListen</a> function is called again.</p>\n<p>Use the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.asBroadcastStream","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"onListen":{"name":"onListen","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"http_server.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}},"onCancel":{"name":"onCancel","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"http_server.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncExpand":{"name":"asyncExpand","qualifiedName":"http_server/http_server.HttpMultipartFormData.asyncExpand","comment":"<p>Creates a new stream with the events of a stream per original event.</p>\n<p>This acts like <a>http_server/http_server.HttpMultipartFormData.expand</a>, except that <a>http_server/http_server.HttpMultipartFormData.asyncExpand.convert</a> returns a <a>http_server/http_server.Stream</a>\ninstead of an <a>dart-core.Iterable</a>.\nThe events of the returned stream becomes the events of the returned\nstream, in the order they are produced.</p>\n<p>If <a>http_server/http_server.HttpMultipartFormData.asyncExpand.convert</a> returns <code>null</code>, no value is put on the output stream,\njust as if it returned an empty stream.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.asyncExpand","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"http_server/http_server.Stream","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncMap":{"name":"asyncMap","qualifiedName":"http_server/http_server.HttpMultipartFormData.asyncMap","comment":"<p>Creates a new stream with each data event of this stream asynchronously\nmapped to a new event.</p>\n<p>This acts like <a>http_server/http_server.HttpMultipartFormData.map</a>, except that <a>http_server/http_server.HttpMultipartFormData.asyncMap.convert</a> may return a <a>http_server/dart-async.Future</a>,\nand in that case, the stream waits for that future to complete before\ncontinuing with its result.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.asyncMap","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"http_server/http_server.HttpMultipartFormData.contains","comment":"<p>Checks whether <a>http_server/http_server.HttpMultipartFormData.contains.needle</a> occurs in the elements provided by this stream.</p>\n<p>Completes the <a>http_server/dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>http_server/dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"needle":{"name":"needle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"distinct":{"name":"distinct","qualifiedName":"http_server/http_server.HttpMultipartFormData.distinct","comment":"<p>Skips data events if they are equal to the previous data event.</p>\n<p>The returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.</p>\n<p>Equality is determined by the provided <a>http_server/http_server.HttpMultipartFormData.distinct.equals</a> method. If that is\nomitted, the '==' operator on the last provided data element is used.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.distinct","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"equals":{"name":"equals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]},"next":{"name":"next","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"drain":{"name":"drain","qualifiedName":"http_server/http_server.HttpMultipartFormData.drain","comment":"<p>Discards all data on the stream, but signals when it's done or an error\noccured.</p>\n<p>When subscribing using <a>http_server/http_server.HttpMultipartFormData.drain</a>, cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>http_server/http_server.HttpMultipartFormData.drain.futureValue</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.drain","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"http_server/http_server.HttpMultipartFormData.elementAt","comment":"<p>Returns the value of the <a>http_server/http_server.HttpMultipartFormData.elementAt.index</a>th data event of this stream.</p>\n<p>Stops listening to the stream after the <a>http_server/http_server.HttpMultipartFormData.elementAt.index</a>th data event has been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>If an error event occurs before the value is found, the future completes\nwith this error.</p>\n<p>If a done event occurs before the value is found, the future completes\nwith a <a>dart-core.RangeError</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"http_server/http_server.HttpMultipartFormData.every","comment":"<p>Checks whether <a>http_server/http_server.HttpMultipartFormData.every.test</a> accepts all elements provided by this stream.</p>\n<p>Completes the <a>http_server/dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>http_server/dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"http_server/http_server.HttpMultipartFormData.expand","comment":"<p>Creates a new stream from this stream that converts each element\ninto zero or more events.</p>\n<p>Each incoming event is converted to an <a>dart-core.Iterable</a> of new events,\nand each of these new events are then sent by the returned stream\nin order.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"http_server/http_server.HttpMultipartFormData.firstWhere","comment":"<p>Finds the first element of this stream matching <a>http_server/http_server.HttpMultipartFormData.firstWhere.test</a>.</p>\n<p>Returns a future that is filled with the first element of this stream\nthat <a>http_server/http_server.HttpMultipartFormData.firstWhere.test</a> returns true for.</p>\n<p>If no such element is found before this stream is done, and a\n<a>http_server/http_server.HttpMultipartFormData.firstWhere.defaultValue</a> function is provided, the result of calling <a>http_server/http_server.HttpMultipartFormData.firstWhere.defaultValue</a>\nbecomes the value of the future.</p>\n<p>Stops listening to the stream after the first matching element has been\nreceived.</p>\n<p>Internally the method cancels its subscription after the first element that\nmatches the predicate. This means that single-subscription (non-broadcast)\nstreams are closed and cannot be reused after a call to this method.</p>\n<p>If an error occurs, or if this stream ends without finding a match and\nwith no <a>http_server/http_server.HttpMultipartFormData.firstWhere.defaultValue</a> function provided, the future will receive an\nerror.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"http_server/http_server.HttpMultipartFormData.fold","comment":"<p>Reduces a sequence of values by repeatedly applying <a>http_server/http_server.HttpMultipartFormData.fold.combine</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"http_server/http_server.HttpMultipartFormData.forEach","comment":"<p>Executes <a>http_server/http_server.HttpMultipartFormData.forEach.action</a> on each data event of the stream.</p>\n<p>Completes the returned <a>http_server/dart-async.Future</a> when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if <a>http_server/http_server.HttpMultipartFormData.forEach.action</a> throws.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"handleError":{"name":"handleError","qualifiedName":"http_server/http_server.HttpMultipartFormData.handleError","comment":"<p>Creates a wrapper Stream that intercepts some errors from this stream.</p>\n<p>If this stream sends an error that matches <a>http_server/http_server.HttpMultipartFormData.handleError.test</a>, then it is intercepted\nby the handle function.</p>\n<p>The <a>http_server/http_server.HttpMultipartFormData.handleError.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. Depending on the function\ntype the the stream either invokes <a>http_server/http_server.HttpMultipartFormData.handleError.onError</a> with or without a stack\ntrace. The stack trace argument might be <code>null</code> if the stream itself\nreceived an error without stack trace.</p>\n<p>An asynchronous error <code>e</code> is matched by a test function if <code>test(e)</code>\nreturns true. If <a>http_server/http_server.HttpMultipartFormData.handleError.test</a> is omitted, every error is considered matching.</p>\n<p>If the error is intercepted, the handle function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.</p>\n<p>If you need to transform an error into a data event, use the more generic\n<a>http_server/http_server.HttpMultipartFormData.transform</a> to handle the event by writing a data event to\nthe output sink</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.handleError","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"onError":{"name":"onError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"test":{"name":"test","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"join":{"name":"join","qualifiedName":"http_server/http_server.HttpMultipartFormData.join","comment":"<p>Collects string of data events' string representations.</p>\n<p>If <a>http_server/http_server.HttpMultipartFormData.join.separator</a> is provided, it is inserted between any two\nelements.</p>\n<p>Any error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"http_server/http_server.HttpMultipartFormData.lastWhere","comment":"<p>Finds the last element in this stream matching <a>http_server/http_server.HttpMultipartFormData.lastWhere.test</a>.</p>\n<p>As <a>http_server/http_server.HttpMultipartFormData.firstWhere</a>, except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"listen":{"name":"listen","qualifiedName":"http_server/http_server.HttpMultipartFormData.listen","comment":"<p>Adds a subscription to this stream.</p>\n<p>On each data event from this stream, the subscriber's <a>http_server/http_server.HttpMultipartFormData.listen.onData</a> handler\nis called. If <a>http_server/http_server.HttpMultipartFormData.listen.onData</a> is null, nothing happens.</p>\n<p>On errors from this stream, the <a>http_server/http_server.HttpMultipartFormData.listen.onError</a> handler is given a\nobject describing the error.</p>\n<p>The <a>http_server/http_server.HttpMultipartFormData.listen.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. If <a>http_server/http_server.HttpMultipartFormData.listen.onError</a> accepts\ntwo arguments it is called with the stack trace (which could be <code>null</code> if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.</p>\n<p>If this stream closes, the <a>http_server/http_server.HttpMultipartFormData.listen.onDone</a> handler is called.</p>\n<p>If <a>http_server/http_server.HttpMultipartFormData.listen.cancelOnError</a> is true, the subscription is ended when\nthe first error is reported. The default is false.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.listen","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"onData":{"name":"onData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"onDone":{"name":"onDone","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"cancelOnError":{"name":"cancelOnError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"http_server/http_server.HttpMultipartFormData.map","comment":"<p>Creates a new stream that converts each element of this stream\nto a new value using the <a>http_server/http_server.HttpMultipartFormData.map.convert</a> function.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"http_server/http_server.HttpMultipartFormData.noSuchMethod","comment":"<p><a>http_server/http_server.HttpMultipartFormData.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>http_server/http_server.HttpMultipartFormData.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>http_server/http_server.HttpMultipartFormData.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>http_server/http_server.HttpMultipartFormData.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pipe":{"name":"pipe","qualifiedName":"http_server/http_server.HttpMultipartFormData.pipe","comment":"<p>Binds this stream as the input of the provided <a>http_server/http_server.StreamConsumer</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.pipe","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"streamConsumer":{"name":"streamConsumer","optional":false,"named":false,"default":false,"type":[{"outer":"http_server/http_server.StreamConsumer","inner":[{"outer":"http_server.Stream.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"http_server/http_server.HttpMultipartFormData.reduce","comment":"<p>Reduces a sequence of values by repeatedly applying <a>http_server/http_server.HttpMultipartFormData.reduce.combine</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"http_server.Stream.T","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"http_server/http_server.HttpMultipartFormData.singleWhere","comment":"<p>Finds the single element in this stream matching <a>http_server/http_server.HttpMultipartFormData.singleWhere.test</a>.</p>\n<p>Like lastMatch, except that it is an error if more than one\nmatching element occurs in the stream.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"http_server/http_server.HttpMultipartFormData.skip","comment":"<p>Skips the first <a>http_server/http_server.HttpMultipartFormData.skip.count</a> data events from this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"http_server/http_server.HttpMultipartFormData.skipWhile","comment":"<p>Skip data events from this stream while they are matched by <a>http_server/http_server.HttpMultipartFormData.skipWhile.test</a>.</p>\n<p>Error and done events are provided by the returned stream unmodified.</p>\n<p>Starting with the first data event where <a>http_server/http_server.HttpMultipartFormData.skipWhile.test</a> returns false for the\nevent data, the returned stream will have the same events as this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"http_server/http_server.HttpMultipartFormData.take","comment":"<p>Provides at most the first n values of this stream.</p>\n<p>Forwards the first n data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.</p>\n<p>If this stream produces fewer than <a>http_server/http_server.HttpMultipartFormData.take.count</a> values before it's done,\nso will the returned stream.</p>\n<p>Stops listening to the stream after the first n elements have been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"http_server/http_server.HttpMultipartFormData.takeWhile","comment":"<p>Forwards data events while <a>http_server/http_server.HttpMultipartFormData.takeWhile.test</a> is successful.</p>\n<p>The returned stream provides the same events as this stream as long\nas <a>http_server/http_server.HttpMultipartFormData.takeWhile.test</a> returns <code>true</code> for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that <a>http_server/http_server.HttpMultipartFormData.takeWhile.test</a> doesn't accept.</p>\n<p>Stops listening to the stream after the accepted elements.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"http_server/http_server.HttpMultipartFormData.timeout","comment":"<p>Creates a new stream with the same events as this stream.</p>\n<p>Whenever more than <a>http_server/http_server.HttpMultipartFormData.timeout.timeLimit</a> passes between two events from this stream,\nthe <a>http_server/http_server.HttpMultipartFormData.timeout.onTimeout</a> function is called.</p>\n<p>The countdown doesn't start until the returned stream is listened to.\nThe countdown is reset every time an event is forwarded from this stream,\nor when the stream is paused and resumed.</p>\n<p>The <a>http_server/http_server.HttpMultipartFormData.timeout.onTimeout</a> function is called with one argument: an\n<a>http_server/http_server.EventSink</a> that allows putting events into the returned stream.\nThis <code>EventSink</code> is only valid during the call to <code>onTimeout</code>.</p>\n<p>If <code>onTimeout</code> is omitted, a timeout will just put a <a>http_server/dart-async.TimeoutException</a>\ninto the error channel of the returned stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.timeout","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[]}],"parameters":{"timeLimit":{"name":"timeLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"onTimeout":{"name":"onTimeout","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"http_server/http_server.EventSink","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"http_server/http_server.HttpMultipartFormData.toList","comment":"<p>Collects the data of this stream in a <a>dart-core.List</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dynamic","inner":[]}]}]}],"parameters":{},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"http_server/http_server.HttpMultipartFormData.toSet","comment":"<p>Collects the data of this stream in a <a>dart-core.Set</a>.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.toSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Set","inner":[{"outer":"dynamic","inner":[]}]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http_server/http_server.HttpMultipartFormData.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"transform":{"name":"transform","qualifiedName":"http_server/http_server.HttpMultipartFormData.transform","comment":"<p>Chains this stream as the input of the provided <a>http_server/http_server.StreamTransformer</a>.</p>\n<p>Returns the result of <code>streamTransformer.bind</code> itself.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.transform","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[]}],"parameters":{"streamTransformer":{"name":"streamTransformer","optional":false,"named":false,"default":false,"type":[{"outer":"http_server/http_server.StreamTransformer","inner":[{"outer":"http_server.Stream.T","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"http_server/http_server.HttpMultipartFormData.where","comment":"<p>Creates a new stream from this stream that discards some data events.</p>\n<p>The new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the <a>http_server/http_server.HttpMultipartFormData.where.test</a>.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"http_server.Stream.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"http_server.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{}}