{"name":"HttpBodyHandler","qualifiedName":"http_server/http_server.HttpBodyHandler","comment":"<p><a>http_server/http_server.HttpBodyHandler</a> is a helper class for processing and collecting\nHTTP message data in an easy-to-use <a>http_server/http_server.HttpBody</a> object. The content\nbody is parsed, depending on the <code>Content-Type</code> header field. When\nthe full body is read and parsed the body content is made\navailable. The class can be used to process both server requests\nand client responses.</p>\n<p>The following content types are recognized:</p>\n<pre><code>text/ *\napplication/json\napplication/x-www-form-urlencoded\nmultipart/form-data\n</code></pre>\n<p> For content type <code>text/\\*</code> the body is decoded into a string. The\n 'charset' parameter of the content type specifies the encoding\n used for decoding. If no 'charset' is present the default encoding\n of ISO-8859-1 is used.</p>\n<p> For content type <code>application/json</code> the body is decoded into a\n string which is then parsed as JSON. The resulting body is a\n <a>http_server/dart-core.Map</a>.  The 'charset' parameter of the content type specifies the\n encoding used for decoding. If no 'charset' is present the default\n encoding of UTF-8 is used.</p>\n<p> For content type <code>application/x-www-form-urlencoded</code> the body is a\n query string which is then split according to the rules for\n splitting a query string. The resulting body is a <code>Map&lt;String,\n String&gt;</code>.  If the same name is present several times in the query\n string, then the last value seen for this name will be in the\n resulting map. The encoding US-ASCII is always used for decoding\n the body.</p>\n<p> For content type <code>multipart/form-data</code> the body is parsed into\n it's different fields. The resulting body is a <code>Map&lt;String,\n dynamic&gt;</code>, where the value is a <a>http_server/dart-core.String</a> for normal fields and a\n <a>http_server/http_server.HttpBodyFileUpload</a> instance for file upload fields. If the same\n name is present several times, then the last value seen for this\n name will be in the resulting map.</p>\n<p> When using content type <code>multipart/form-data</code> the encoding of\n fields with <a>http_server/dart-core.String</a> values is determined by the browser sending\n the HTTP request with the form data. The encoding is specified\n either by the attribute <code>accept-charset</code> on the HTML form, or by\n the content type of the web page containing the form. If the HTML\n form has an <code>accept-charset</code> attribute the browser will use the\n encoding specified there. If the HTML form has no <code>accept-charset</code>\n attribute the browser determines the encoding from the content\n type of the web page containing the form. Using a content type of\n <code>text/html; charset=utf-8</code> for the page and setting\n <code>accept-charset</code> on the HTML form to <code>utf-8</code> is recommended as the\n default for <a>http_server/http_server.HttpBodyHandler</a> is UTF-8. It is important to get\n these encoding values right, as the actual <code>multipart/form-data</code>\n HTTP request sent by the browser does <em>not</em> contain any\n information on the encoding. If something else than UTF-8 is used\n <code>defaultEncoding</code> needs to be set in the <a>http_server/http_server.HttpBodyHandler</a>\n constructor and calls to <a>http_server/http_server.HttpBodyHandler.processRequest</a> and <a>http_server/http_server.HttpBodyHandler.processResponse</a>.</p>\n<p> For all other content types the body will be treated as\n uninterpreted binary data. The resulting body will be of type\n <code>List&lt;int&gt;</code>.</p>\n<p>To use with the <a>http_server/dart-io.HttpServer</a> for request messages, <a>http_server/http_server.HttpBodyHandler</a> can be\nused as either a <a>http_server/http_server.StreamTransformer</a> or as a per-request handler (see\n<a>http_server/http_server.HttpBodyHandler.processRequest</a>).</p>\n<pre><code>HttpServer server = ...\nserver.transform(new HttpBodyHandler())\n    .listen((HttpRequestBody body) {\n      ...\n    });\n</code></pre>\n<p>To use with the <a>http_server/dart-io.HttpClient</a> for response messages, <a>http_server/http_server.HttpBodyHandler</a> can be\nused as a per-request handler (see <a>http_server/http_server.HttpBodyHandler.processResponse</a>).</p>\n<pre><code>HttpClient client = ...\nclient.get(...)\n    .then((HttpClientRequest response) =&gt; response.close())\n    .then(HttpBodyHandler.processResponse)\n    .then((HttpClientResponseBody body) {\n      ...\n    });\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":["http_server/http_server.StreamTransformer"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"http_server/http_server.HttpBodyHandler.HttpBodyHandler-","comment":"<p>Create a new <a>http_server/http_server.HttpBodyHandler</a> to be used with a <a>http_server/http_server.Stream</a>&lt;<a>http_server/dart-io.HttpRequest</a>>,\ne.g. a <a>http_server/dart-io.HttpServer</a>.</p>\n<p>If the page is served using different encoding than UTF-8, set\n<a>http_server/http_server.HttpBodyHandler.HttpBodyHandler-.defaultEncoding</a> accordingly. This is required for parsing\n<code>multipart/form-data</code> content correctly. See the class comment\nfor more information on <code>multipart/form-data</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"defaultEncoding":{"name":"defaultEncoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"bind":{"name":"bind","qualifiedName":"http_server/http_server.HttpBodyHandler.bind","comment":"","commentFrom":"http_server.StreamTransformer.bind","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"http_server/http_server.HttpRequestBody","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"processRequest":{"name":"processRequest","qualifiedName":"http_server/http_server.HttpBodyHandler.processRequest","comment":"<p>Process and parse an incoming <a>http_server/dart-io.HttpRequest</a>. The returned <a>http_server/http_server.HttpRequestBody</a>\ncontains a response field for accessing the <a>http_server/dart-io.HttpResponse</a>.</p>\n<p>See <a>http_server/http_server.HttpBodyHandler</a> constructor for more info on <a>http_server/http_server.HttpBodyHandler.processRequest.defaultEncoding</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http_server/http_server.HttpRequestBody","inner":[]}]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]},"defaultEncoding":{"name":"defaultEncoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"processResponse":{"name":"processResponse","qualifiedName":"http_server/http_server.HttpBodyHandler.processResponse","comment":"<p>Process and parse an incoming <a>http_server/dart-io.HttpClientResponse</a>.</p>\n<p>See <a>http_server/http_server.HttpBodyHandler</a> constructor for more info on <a>http_server/http_server.HttpBodyHandler.processResponse.defaultEncoding</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http_server/http_server.HttpClientResponseBody","inner":[]}]}],"parameters":{"response":{"name":"response","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpClientResponse","inner":[]}],"value":null,"annotations":[]},"defaultEncoding":{"name":"defaultEncoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"http_server/http_server.HttpBodyHandler.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>http_server/http_server.HttpBodyHandler.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"http_server/http_server.HttpBodyHandler.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"http_server/http_server.HttpBodyHandler.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>http_server/http_server.HttpBodyHandler.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>http_server/http_server.HttpBodyHandler.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bind":{"name":"bind","qualifiedName":"http_server/http_server.HttpBodyHandler.bind","comment":"","commentFrom":"","inheritedFrom":"http_server.StreamTransformer.bind","static":false,"abstract":true,"constant":false,"return":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"http_server/http_server.HttpRequestBody","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"http_server/http_server.Stream","inner":[{"outer":"http_server.StreamTransformer.S","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"http_server/http_server.HttpBodyHandler.noSuchMethod","comment":"<p><a>http_server/http_server.HttpBodyHandler.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>http_server/http_server.HttpBodyHandler.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>http_server/http_server.HttpBodyHandler.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>http_server/http_server.HttpBodyHandler.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http_server/http_server.HttpBodyHandler.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}