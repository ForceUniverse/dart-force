{"name":"StreamSubscription","qualifiedName":"dart-async.StreamSubscription","comment":"<p>A control object for the subscription on a <a>dart-async.Stream</a>.</p>\n<p>When you subscribe on a <a>dart-async.Stream</a> using <a>dart-async.Stream.listen</a>,\na <a>dart-async.StreamSubscription</a> object is returned. This object\nis used to later unsubscribe again, or to temporarily pause\nthe stream's events.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isPaused":{"name":"isPaused","qualifiedName":"dart-async.StreamSubscription.isPaused","comment":"<p>Returns true if the <a>dart-async.StreamSubscription</a> is paused.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"asFuture":{"name":"asFuture","qualifiedName":"dart-async.StreamSubscription.asFuture","comment":"<p>Returns a future that handles the <a>dart-async.StreamSubscription.onDone</a> and <a>dart-async.StreamSubscription.onError</a> callbacks.</p>\n<p>This method <em>overwrites</em> the existing <a>dart-async.StreamSubscription.onDone</a> and <a>dart-async.StreamSubscription.onError</a> callbacks\nwith new ones that complete the returned future.</p>\n<p>In case of an error the subscription will automatically cancel (even\nwhen it was listening with <code>cancelOnError</code> set to <code>false</code>).</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>dart-async.StreamSubscription.asFuture.futureValue</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"cancel":{"name":"cancel","qualifiedName":"dart-async.StreamSubscription.cancel","comment":"<p>Cancels this subscription. It will no longer receive events.</p>\n<p>May return a future which completes when the stream is done cleaning up.\nThis can be used if the stream needs to release some resources\nthat are needed for a following operation,\nfor example a file being read, that should be deleted afterwards.\nIn that case, the file may not be able to be deleted successfully\nuntil the returned future has completed.\nReturns <code>null</code> if there is no need to wait.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"onData":{"name":"onData","qualifiedName":"dart-async.StreamSubscription.onData","comment":"<p>Set or override the data event handler of this subscription.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"handleData":{"name":"handleData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"onDone":{"name":"onDone","qualifiedName":"dart-async.StreamSubscription.onDone","comment":"<p>Set or override the done event handler of this subscription.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"handleDone":{"name":"handleDone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}}},"annotations":[]},"onError":{"name":"onError","qualifiedName":"dart-async.StreamSubscription.onError","comment":"<p>Set or override the error event handler of this subscription.</p>\n<p>This method overrides the handler that has been set at the invocation of\n<a>dart-async.Stream.listen</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"handleError":{"name":"handleError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pause":{"name":"pause","qualifiedName":"dart-async.StreamSubscription.pause","comment":"<p>Request that the stream pauses events until further notice.</p>\n<p>If <a>dart-async.StreamSubscription.pause.resumeSignal</a> is provided, the stream will undo the pause\nwhen the future completes. If the future completes with an error,\nit will not be handled!</p>\n<p>A call to <a>dart-async.StreamSubscription.resume</a> will also undo a pause.</p>\n<p>If the subscription is paused more than once, an equal number\nof resumes must be performed to resume the stream.</p>\n<p>Currently DOM streams silently drop events when the stream is paused. This\nis a bug and will be fixed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"resumeSignal":{"name":"resumeSignal","optional":true,"named":false,"default":false,"type":[{"outer":"dart-async.Future","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"resume":{"name":"resume","qualifiedName":"dart-async.StreamSubscription.resume","comment":"<p>Resume after a pause.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-async.StreamSubscription.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-async.StreamSubscription.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-async.StreamSubscription.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-async.StreamSubscription.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-async.StreamSubscription.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-async.StreamSubscription.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-async.StreamSubscription.noSuchMethod","comment":"<p><a>dart-async.StreamSubscription.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-async.StreamSubscription.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-async.StreamSubscription.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-async.StreamSubscription.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-async.StreamSubscription.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}