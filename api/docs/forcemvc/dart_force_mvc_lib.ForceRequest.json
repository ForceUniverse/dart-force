{"name":"ForceRequest","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"path_variables":{"name":"path_variables","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.path_variables","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"request":{"name":"request","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.request","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"asyncFuture":{"name":"asyncFuture","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.asyncFuture","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.asyncFuture","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"cookies":{"name":"cookies","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.cookies","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.cookies","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-io.Cookie","inner":[]}]}],"parameters":{},"annotations":[]},"isForwarded":{"name":"isForwarded","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.isForwarded","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.isForwarded","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.ForceRequest-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accepts":{"name":"accepts","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.accepts","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.accepts","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"async":{"name":"async","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.async","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.async","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getPostData":{"name":"getPostData","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.getPostData","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.getPostData","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"usejson":{"name":"usejson","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"getPostParams":{"name":"getPostParams","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.getPostParams","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.getPostParams","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{"enc":{"name":"enc","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getPostRawData":{"name":"getPostRawData","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.getPostRawData","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.getPostRawData","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{},"annotations":[]},"header":{"name":"header","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.header","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.header","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isMime":{"name":"isMime","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.isMime","comment":"","commentFrom":"dart_force_mvc_lib.ForceRequest.isMime","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>forcemvc/dart_force_mvc_lib.ForceRequest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>forcemvc/dart_force_mvc_lib.ForceRequest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>forcemvc/dart_force_mvc_lib.ForceRequest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.noSuchMethod","comment":"<p><a>forcemvc/dart_force_mvc_lib.ForceRequest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>forcemvc/dart_force_mvc_lib.ForceRequest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>forcemvc/dart_force_mvc_lib.ForceRequest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>forcemvc/dart_force_mvc_lib.ForceRequest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"forcemvc/dart_force_mvc_lib.ForceRequest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}