{"name":"IdbFactory","qualifiedName":"dart-dom-indexed_db.IdbFactory","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"supported":{"name":"supported","qualifiedName":"dart-dom-indexed_db.IdbFactory.supported","comment":"<p>Checks to see if Indexed DB is supported on the current platform.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"supportsDatabaseNames":{"name":"supportsDatabaseNames","qualifiedName":"dart-dom-indexed_db.IdbFactory.supportsDatabaseNames","comment":"<p>Checks to see if getDatabaseNames is supported by the current platform.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"cmp":{"name":"cmp","qualifiedName":"dart-dom-indexed_db.IdbFactory.cmp","comment":"","commentFrom":"dart-dom-indexed_db.IdbFactory.cmp","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"first":{"name":"first","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"second":{"name":"second","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'IDBFactory.cmp'"]}]},"deleteDatabase":{"name":"deleteDatabase","qualifiedName":"dart-dom-indexed_db.IdbFactory.deleteDatabase","comment":"","commentFrom":"dart-dom-indexed_db.IdbFactory.deleteDatabase","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-indexed_db.IdbFactory","inner":[]}]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"onBlocked":{"name":"onBlocked","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"Event":{"name":"Event","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[{"name":"metadata.DomName","parameters":["'IDBFactory.deleteDatabase'"]}]},"getDatabaseNames":{"name":"getDatabaseNames","qualifiedName":"dart-dom-indexed_db.IdbFactory.getDatabaseNames","comment":"","commentFrom":"dart-dom-indexed_db.IdbFactory.getDatabaseNames","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'IDBFactory.getDatabaseNames'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.Experimental","parameters":[]}]},"open":{"name":"open","qualifiedName":"dart-dom-indexed_db.IdbFactory.open","comment":"","commentFrom":"dart-dom-indexed_db.IdbFactory.open","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-indexed_db.Database","inner":[]}]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"version":{"name":"version","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"onUpgradeNeeded":{"name":"onUpgradeNeeded","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"VersionChangeEvent":{"name":"VersionChangeEvent","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"onBlocked":{"name":"onBlocked","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"Event":{"name":"Event","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[{"name":"metadata.DomName","parameters":["'IDBFactory.open'"]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-indexed_db.IdbFactory.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-indexed_db.IdbFactory.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-dom-indexed_db.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-indexed_db.IdbFactory.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"dart-dom-indexed_db.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-indexed_db.IdbFactory.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-indexed_db.IdbFactory.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-indexed_db.IdbFactory.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-dom-indexed_db.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-indexed_db.IdbFactory.noSuchMethod","comment":"<p><a>dart-dom-indexed_db.IdbFactory.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-indexed_db.IdbFactory.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-indexed_db.IdbFactory.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-indexed_db.IdbFactory.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"dart-dom-indexed_db.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-indexed_db.IdbFactory.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-dom-indexed_db.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["'IDBFactory'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX","'15'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.Experimental","parameters":[]},{"name":"metadata.Unstable","parameters":[]}],"generics":{}}