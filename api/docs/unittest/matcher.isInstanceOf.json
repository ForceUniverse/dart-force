{"name":"isInstanceOf","qualifiedName":"unittest/matcher.isInstanceOf","comment":"<p>Returns a matcher that matches if an object is an instance\nof type (or a subtype).</p>\n<p>As types are not first class objects in Dart we can only\napproximate this test by using a generic wrapper class.</p>\n<p>For example, to test whether 'bar' is an instance of type\n'Foo', we would write:</p>\n<pre><code>expect(bar, new isInstanceOf&lt;Foo&gt;());\n</code></pre>\n<p>To get better error message, supply a name when creating the\nType wrapper; e.g.:</p>\n<pre><code>expect(bar, new isInstanceOf&lt;Foo&gt;('Foo'));\n</code></pre>\n<p>Note that this does not currently work in dart2js; it will\nmatch any type, and isNot(new isInstanceof&lt;T>()) will always\nfail. This is because dart2js currently ignores template type\nparameters.</p>","isAbstract":false,"superclass":"unittest/matcher.Matcher","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"unittest/matcher.isInstanceOf.isInstanceOf-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"\"specified type\"","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"describe":{"name":"describe","qualifiedName":"unittest/matcher.isInstanceOf.describe","comment":"<p>This builds a textual description of the matcher.</p>","commentFrom":"matcher.Matcher.describe","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/matcher.Description","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/matcher.Description","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matches":{"name":"matches","qualifiedName":"unittest/matcher.isInstanceOf.matches","comment":"<p>This does the matching of the actual vs expected values.\nitem is the actual value. <a>unittest/matcher.isInstanceOf.matches.matchState</a> can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in <a>unittest/matcher.isInstanceOf.describeMismatch</a>.</p>","commentFrom":"matcher.Matcher.matches","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"matchState":{"name":"matchState","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"unittest/matcher.isInstanceOf.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>unittest/matcher.isInstanceOf.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"unittest/matcher.isInstanceOf.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"unittest/matcher.isInstanceOf.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>unittest/matcher.isInstanceOf.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>unittest/matcher.isInstanceOf.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"describe":{"name":"describe","qualifiedName":"unittest/matcher.isInstanceOf.describe","comment":"<p>This builds a textual description of the matcher.</p>","commentFrom":"","inheritedFrom":"matcher.Matcher.describe","static":false,"abstract":true,"constant":false,"return":[{"outer":"unittest/matcher.Description","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/matcher.Description","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"describeMismatch":{"name":"describeMismatch","qualifiedName":"unittest/matcher.isInstanceOf.describeMismatch","comment":"<p>This builds a textual description of a specific mismatch. <a>unittest/matcher.isInstanceOf.describeMismatch.item</a>\nis the value that was tested by <a>unittest/matcher.isInstanceOf.matches</a>; <a>unittest/matcher.isInstanceOf.describeMismatch.matchState</a> is\nthe <a>dart-core.Map</a> that was passed to and supplemented by <a>unittest/matcher.isInstanceOf.matches</a>\nwith additional information about the mismact, and <a>unittest/matcher.isInstanceOf.describeMismatch.mismatchDescription</a>\nis the <a>unittest/matcher.Description</a> that is being built to decribe the mismatch.\nA few matchers make use of the <a>unittest/matcher.isInstanceOf.describeMismatch.verbose</a> flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.</p>","commentFrom":"","inheritedFrom":"matcher.Matcher.describeMismatch","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/matcher.Description","inner":[]}],"parameters":{"item":{"name":"item","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"mismatchDescription":{"name":"mismatchDescription","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/matcher.Description","inner":[]}],"value":null,"annotations":[]},"matchState":{"name":"matchState","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"verbose":{"name":"verbose","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matches":{"name":"matches","qualifiedName":"unittest/matcher.isInstanceOf.matches","comment":"<p>This does the matching of the actual vs expected values.\n<a>unittest/matcher.isInstanceOf.matches.item</a> is the actual value. <a>unittest/matcher.isInstanceOf.matches.matchState</a> can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in <a>unittest/matcher.isInstanceOf.describeMismatch</a>.</p>","commentFrom":"","inheritedFrom":"matcher.Matcher.matches","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"item":{"name":"item","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"matchState":{"name":"matchState","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"unittest/matcher.isInstanceOf.noSuchMethod","comment":"<p><a>unittest/matcher.isInstanceOf.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>unittest/matcher.isInstanceOf.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>unittest/matcher.isInstanceOf.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>unittest/matcher.isInstanceOf.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/matcher.isInstanceOf.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}