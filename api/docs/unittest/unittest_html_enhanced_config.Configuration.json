{"name":"Configuration","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration","comment":"<p>Describes the interface used by the unit test system for communicating the\nresults of a test run.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":["unittest/unittest_html_enhanced_config.SimpleConfiguration"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"autoStart":{"name":"autoStart","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.autoStart","comment":"<p>If true, tests are started automatically. Otherwise <a>unittest/unittest.runTests</a>\nmust be called explicitly after tests are set up.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.timeout","comment":"<p>How long a <a>unittest/unittest.TestCase</a> can run before it is considered an error.\nA <a>unittest/unittest_html_enhanced_config.Configuration.timeout</a> value of <code>null</code> means that the limit is infinite.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.Configuration-","comment":"<p>Creates an instance of <a>unittest/unittest_html_enhanced_config.SimpleConfiguration</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/unittest_html_enhanced_config.Configuration","inner":[]}],"parameters":{},"annotations":[]},"blank":{"name":"blank","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.Configuration-blank","comment":"<p>Creates an <a>unittest/unittest_html_enhanced_config.Configuration</a> instances that does nothing.</p>\n<p>For use by subclasses which wish to implement only a subset of features.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"onDone":{"name":"onDone","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onDone","comment":"<p>Called when the unittest framework is done running. <a>unittest/unittest_html_enhanced_config.Configuration.onDone.success</a> indicates\nwhether all tests passed successfully.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"success":{"name":"success","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onInit":{"name":"onInit","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onInit","comment":"<p>Called as soon as the unittest framework becomes initialized. This is done\neven before tests are added to the test framework. It might be used to\ndetermine/debug errors that occur before the test harness starts executing.\nIt is also used to tell the vm or browser that tests are going to be run\nasynchronously and that the process should wait until they are done.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"onLogMessage":{"name":"onLogMessage","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onLogMessage","comment":"<p>Handles the logging of messages by a test case.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"testCase":{"name":"testCase","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/unittest.TestCase","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onStart":{"name":"onStart","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onStart","comment":"<p>Called as soon as the unittest framework starts running.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"onSummary":{"name":"onSummary","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onSummary","comment":"<p>Called with the result of all test cases. Browser tests commonly override\nthis to reformat the output.</p>\n<p>When <a>unittest/unittest_html_enhanced_config.Configuration.onSummary.uncaughtError</a> is not null, it contains an error that occured outside\nof tests (e.g. setting up the test).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"passed":{"name":"passed","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"failed":{"name":"failed","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"errors":{"name":"errors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"results":{"name":"results","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"unittest/unittest.TestCase","inner":[]}]}],"value":null,"annotations":[]},"uncaughtError":{"name":"uncaughtError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onTestResult":{"name":"onTestResult","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onTestResult","comment":"<p>Called when each test is first completed. Useful to show intermediate\nprogress on a test suite.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"testCase":{"name":"testCase","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/unittest.TestCase","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onTestResultChanged":{"name":"onTestResultChanged","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onTestResultChanged","comment":"<p>Called when an already completed test changes state. For example: a test\nthat was marked as passing may later be marked as being in error because\nit still had callbacks being invoked.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"testCase":{"name":"testCase","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/unittest.TestCase","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onTestStart":{"name":"onTestStart","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.onTestStart","comment":"<p>Called when each test starts. Useful to show intermediate progress on\na test suite.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"testCase":{"name":"testCase","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/unittest.TestCase","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>unittest/unittest_html_enhanced_config.Configuration.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>unittest/unittest_html_enhanced_config.Configuration.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>unittest/unittest_html_enhanced_config.Configuration.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.noSuchMethod","comment":"<p><a>unittest/unittest_html_enhanced_config.Configuration.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>unittest/unittest_html_enhanced_config.Configuration.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>unittest/unittest_html_enhanced_config.Configuration.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>unittest/unittest_html_enhanced_config.Configuration.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/unittest_html_enhanced_config.Configuration.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}