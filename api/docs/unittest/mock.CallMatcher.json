{"name":"CallMatcher","qualifiedName":"unittest/mock.CallMatcher","comment":"<p>A <a>unittest/mock.CallMatcher</a> is a special matcher used to match method calls (i.e.\na method name and set of arguments). It is not a <a>unittest/matcher.Matcher</a> like the\nunit test <a>unittest/matcher.Matcher</a>, but instead represents a method name and a\ncollection of <a>unittest/matcher.Matcher</a>s, one per argument, that will be applied\nto the parameters to decide if the method call is a match.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"argMatchers":{"name":"argMatchers","qualifiedName":"unittest/mock.CallMatcher.argMatchers","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"unittest/matcher.Matcher","inner":[]}]}],"annotations":[]},"nameFilter":{"name":"nameFilter","qualifiedName":"unittest/mock.CallMatcher.nameFilter","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"unittest/matcher.Matcher","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"unittest/mock.CallMatcher.CallMatcher-","comment":"<p>Constructor for <a>unittest/mock.CallMatcher</a>. <a>unittest/mock.CallMatcher.CallMatcher-.name</a> can be null to\nmatch anything, or a literal <a>dart-core.String</a>, a predicate <a>dart-core.Function</a>,\nor a <a>unittest/matcher.Matcher</a>. The various arguments can be scalar values or\n<a>unittest/matcher.Matcher</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg0":{"name":"arg0","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg1":{"name":"arg1","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg2":{"name":"arg2","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg3":{"name":"arg3","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg4":{"name":"arg4","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg5":{"name":"arg5","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg6":{"name":"arg6","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg7":{"name":"arg7","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg8":{"name":"arg8","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg9":{"name":"arg9","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"matches":{"name":"matches","qualifiedName":"unittest/mock.CallMatcher.matches","comment":"<p>Given a <a>unittest/mock.CallMatcher.matches.method</a> name and list of <a>unittest/mock.CallMatcher.matches.arguments</a>, return true\nif it matches this [CallMatcher.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"arguments":{"name":"arguments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/mock.CallMatcher.toString","comment":"<p>We keep our behavior specifications in a Map, which is keyed\nby the <a>unittest/mock.CallMatcher</a>. To make the keys unique and to get a\ndescriptive value for the <a>unittest/mock.CallMatcher</a> we have this override\nof toString().</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"unittest/mock.CallMatcher.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>unittest/mock.CallMatcher.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"unittest/mock.CallMatcher.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"unittest/mock.CallMatcher.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>unittest/mock.CallMatcher.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>unittest/mock.CallMatcher.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"unittest/mock.CallMatcher.noSuchMethod","comment":"<p><a>unittest/mock.CallMatcher.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>unittest/mock.CallMatcher.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>unittest/mock.CallMatcher.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>unittest/mock.CallMatcher.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/mock.CallMatcher.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}