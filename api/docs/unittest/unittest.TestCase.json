{"name":"TestCase","qualifiedName":"unittest/unittest.TestCase","comment":"<p>Represents the state for an individual unit test.</p>\n<p>Create by calling <a>unittest/unittest.test</a> or <a>unittest/unittest.solo_test</a>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"currentGroup":{"name":"currentGroup","qualifiedName":"unittest/unittest.TestCase.currentGroup","comment":"<p>The group (or groups) under which this test is running.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"description":{"name":"description","qualifiedName":"unittest/unittest.TestCase.description","comment":"<p>A description of what the test is specifying.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"enabled":{"name":"enabled","qualifiedName":"unittest/unittest.TestCase.enabled","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"id":{"name":"id","qualifiedName":"unittest/unittest.TestCase.id","comment":"<p>Identifier for this test.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"setUp":{"name":"setUp","qualifiedName":"unittest/unittest.TestCase.setUp","comment":"<p>The setup function to call before the test, if any.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Function","inner":[]}],"annotations":[]},"tearDown":{"name":"tearDown","qualifiedName":"unittest/unittest.TestCase.tearDown","comment":"<p>The teardown function to call after the test, if any.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Function","inner":[]}],"annotations":[]},"testFunction":{"name":"testFunction","qualifiedName":"unittest/unittest.TestCase.testFunction","comment":"<p>The body of the test case.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"unittest/unittest.TestFunction","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isComplete":{"name":"isComplete","qualifiedName":"unittest/unittest.TestCase.isComplete","comment":"","commentFrom":"unittest.TestCase.isComplete","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"message":{"name":"message","qualifiedName":"unittest/unittest.TestCase.message","comment":"<p>Error or failure message.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"passed":{"name":"passed","qualifiedName":"unittest/unittest.TestCase.passed","comment":"<p>Returns whether this test case passed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"result":{"name":"result","qualifiedName":"unittest/unittest.TestCase.result","comment":"<p>One of <a>unittest/unittest.PASS</a>, <a>unittest/unittest.FAIL</a>, <a>unittest/unittest.ERROR</a>, or null if the test hasn't run yet.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"runningTime":{"name":"runningTime","qualifiedName":"unittest/unittest.TestCase.runningTime","comment":"","commentFrom":"unittest.TestCase.runningTime","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[]},"stackTrace":{"name":"stackTrace","qualifiedName":"unittest/unittest.TestCase.stackTrace","comment":"<p>Stack trace associated with this test, or null if it succeeded.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.StackTrace","inner":[]}],"parameters":{},"annotations":[]},"startTime":{"name":"startTime","qualifiedName":"unittest/unittest.TestCase.startTime","comment":"","commentFrom":"unittest.TestCase.startTime","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"error":{"name":"error","qualifiedName":"unittest/unittest.TestCase.error","comment":"","commentFrom":"unittest.TestCase.error","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"messageText":{"name":"messageText","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"stack":{"name":"stack","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fail":{"name":"fail","qualifiedName":"unittest/unittest.TestCase.fail","comment":"","commentFrom":"unittest.TestCase.fail","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"messageText":{"name":"messageText","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"stack":{"name":"stack","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pass":{"name":"pass","qualifiedName":"unittest/unittest.TestCase.pass","comment":"","commentFrom":"unittest.TestCase.pass","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/unittest.TestCase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"unittest/unittest.TestCase.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>unittest/unittest.TestCase.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"unittest/unittest.TestCase.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"unittest/unittest.TestCase.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>unittest/unittest.TestCase.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>unittest/unittest.TestCase.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"unittest/unittest.TestCase.noSuchMethod","comment":"<p><a>unittest/unittest.TestCase.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>unittest/unittest.TestCase.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>unittest/unittest.TestCase.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>unittest/unittest.TestCase.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/unittest.TestCase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}