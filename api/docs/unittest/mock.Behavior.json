{"name":"Behavior","qualifiedName":"unittest/mock.Behavior","comment":"<p>A <a>unittest/mock.Behavior</a> represents how a <a>unittest/mock.Mock</a> will respond to one particular\ntype of method call.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"actions":{"name":"actions","qualifiedName":"unittest/mock.Behavior.actions","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"unittest/mock.Responder","inner":[]}]}],"annotations":[]},"logging":{"name":"logging","qualifiedName":"unittest/mock.Behavior.logging","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"matcher":{"name":"matcher","qualifiedName":"unittest/mock.Behavior.matcher","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"unittest/mock.CallMatcher","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"unittest/mock.Behavior.Behavior-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"matcher":{"name":"matcher","optional":false,"named":false,"default":false,"type":[{"outer":"unittest/mock.CallMatcher","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"alwaysCall":{"name":"alwaysCall","qualifiedName":"unittest/mock.Behavior.alwaysCall","comment":"<p>Creates a repeating proxy call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/mock.Behavior","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"alwaysReturn":{"name":"alwaysReturn","qualifiedName":"unittest/mock.Behavior.alwaysReturn","comment":"<p>Adds a <a>unittest/mock.Responder</a> that repeatedly returns a <a>unittest/mock.Behavior.alwaysReturn.value</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/mock.Behavior","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"alwaysThrow":{"name":"alwaysThrow","qualifiedName":"unittest/mock.Behavior.alwaysThrow","comment":"<p>Adds a <a>unittest/mock.Responder</a> that throws <a>unittest/mock.Behavior.alwaysThrow.value</a> endlessly.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/mock.Behavior","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matches":{"name":"matches","qualifiedName":"unittest/mock.Behavior.matches","comment":"<p>Returns true if a method call matches the <a>unittest/mock.Behavior</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"thenCall":{"name":"thenCall","qualifiedName":"unittest/mock.Behavior.thenCall","comment":"<p><a>unittest/mock.Behavior.thenCall</a> creates a proxy Responder, that is called <a>unittest/mock.Behavior.thenCall.count</a>\ntimes (1 by default; 0 is used for unlimited calls, and is\nexposed as <a>unittest/mock.Behavior.alwaysCall</a>). <a>unittest/mock.Behavior.thenCall.value</a> is the function that will\nbe called with the same arguments that were passed to the\nmock. Proxies can be used to wrap real objects or to define\nmore complex return/throw behavior. You could even (if you\nwanted) use proxies to emulate the behavior of thenReturn;\ne.g.:</p>\n<pre><code>m.when(callsTo('foo')).thenReturn(0)\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>m.when(callsTo('foo')).thenCall(() =&gt; 0)\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/mock.Behavior","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"count":{"name":"count","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"thenReturn":{"name":"thenReturn","qualifiedName":"unittest/mock.Behavior.thenReturn","comment":"<p>Adds a <a>unittest/mock.Responder</a> that returns a <a>unittest/mock.Behavior.thenReturn.value</a> for <a>unittest/mock.Behavior.thenReturn.count</a> calls\n(1 by default).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/mock.Behavior","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"count":{"name":"count","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"thenThrow":{"name":"thenThrow","qualifiedName":"unittest/mock.Behavior.thenThrow","comment":"<p>Adds a <a>unittest/mock.Responder</a> that throws [value] [count]\ntimes (1 by default).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest/mock.Behavior","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"count":{"name":"count","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/mock.Behavior.toString","comment":"<p>Returns the <a>unittest/mock.Behavior.matcher</a>'s representation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"unittest/mock.Behavior.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>unittest/mock.Behavior.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"unittest/mock.Behavior.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"unittest/mock.Behavior.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>unittest/mock.Behavior.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>unittest/mock.Behavior.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"unittest/mock.Behavior.noSuchMethod","comment":"<p><a>unittest/mock.Behavior.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>unittest/mock.Behavior.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>unittest/mock.Behavior.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>unittest/mock.Behavior.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"unittest/mock.Behavior.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}