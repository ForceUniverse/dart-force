{"name":"ByteData","qualifiedName":"dart-typed_data.ByteData","comment":"<p>A fixed-length, random-access sequence of bytes that also provides random\nand unaligned access to the fixed-width integers and floating point\nnumbers represented by those bytes.\nByteData may be used to pack and unpack data from external sources\n(such as networks or files systems), and to process large quantities\nof numerical data more efficiently than would be possible\nwith ordinary <a>dart-core.List</a> implementations. ByteData can save space, by\neliminating the need for object headers, and time, by eliminating the\nneed for data copies. Finally, ByteData may be used to intentionally\nreinterpret the bytes representing one arithmetic type as another.\nFor example this code fragment determine what 32-bit signed integer\nis represented by the bytes of a 32-bit floating point number:</p>\n<pre><code>var buffer = new Uint8List(8).buffer;\nvar bdata = new ByteData.view(buffer);\nbdata.setFloat32(0, 3.04);\nint huh = bdata.getInt32(0);\n</code></pre>","isAbstract":true,"superclass":"dart-typed_data.TypedData","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"elementSizeInBytes":{"name":"elementSizeInBytes","qualifiedName":"dart-typed_data.ByteData.elementSizeInBytes","comment":"<p>Returns the number of bytes in the representation of each element in this\nlist.</p>","commentFrom":"dart-typed_data.TypedData.elementSizeInBytes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-typed_data.ByteData.ByteData-","comment":"<p>Creates a <a>dart-typed_data.ByteData</a> of the specified length (in elements), all of\nwhose elements are initially zero.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.ByteData","inner":[]}],"parameters":{"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"view":{"name":"view","qualifiedName":"dart-typed_data.ByteData.ByteData-view","comment":"<p>Creates an <a>dart-typed_data.ByteData</a> <em>view</em> of the specified region in the specified\nbyte buffer. Changes in the <a>dart-typed_data.ByteData</a> will be visible in the byte\nbuffer and vice versa. If the <a>dart-typed_data.ByteData.ByteData-view.offsetInBytes</a> index of the region is not\nspecified, it defaults to zero (the first byte in the byte buffer).\nIf the length is not specified, it defaults to null, which indicates\nthat the view extends to the end of the byte buffer.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.ByteData-view.offsetInBytes</a> or <a>dart-typed_data.ByteData.ByteData-view.length</a> are negative, or\nif <a>dart-typed_data.ByteData.ByteData-view.offsetInBytes</a> + (<a>dart-typed_data.ByteData.ByteData-view.length</a> * elementSizeInBytes) is greater than\nthe length of <a>dart-typed_data.ByteData.ByteData-view.buffer</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.ByteData","inner":[]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.ByteBuffer","inner":[]}],"value":null,"annotations":[]},"offsetInBytes":{"name":"offsetInBytes","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"getFloat32":{"name":"getFloat32","qualifiedName":"dart-typed_data.ByteData.getFloat32","comment":"<p>Returns the floating point number represented by the four bytes at\nthe specified <a>dart-typed_data.ByteData.getFloat32.byteOffset</a> in this object, in IEEE 754\nsingle-precision binary floating-point format (binary32).</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getFloat32.byteOffset</a> is negative, or\n<code>byteOffset + 4</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getFloat64":{"name":"getFloat64","qualifiedName":"dart-typed_data.ByteData.getFloat64","comment":"<p>Returns the floating point number represented by the eight bytes at\nthe specified <a>dart-typed_data.ByteData.getFloat64.byteOffset</a> in this object, in IEEE 754\ndouble-precision binary floating-point format (binary64).</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getFloat64.byteOffset</a> is negative, or\n<code>byteOffset + 8</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getInt16":{"name":"getInt16","qualifiedName":"dart-typed_data.ByteData.getInt16","comment":"<p>Returns the (possibly negative) integer represented by the two bytes at\nthe specified <a>dart-typed_data.ByteData.getInt16.byteOffset</a> in this object, in two's complement binary\nform.\nThe return value will be between 2&lt;sup>15&lt;/sup> and 2&lt;sup>15&lt;/sup> - 1,\ninclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getInt16.byteOffset</a> is negative, or\n<code>byteOffset + 2</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getInt32":{"name":"getInt32","qualifiedName":"dart-typed_data.ByteData.getInt32","comment":"<p>Returns the (possibly negative) integer represented by the four bytes at\nthe specified <a>dart-typed_data.ByteData.getInt32.byteOffset</a> in this object, in two's complement binary\nform.\nThe return value will be between 2&lt;sup>31&lt;/sup> and 2&lt;sup>31&lt;/sup> - 1,\ninclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getInt32.byteOffset</a> is negative, or\n<code>byteOffset + 4</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getInt64":{"name":"getInt64","qualifiedName":"dart-typed_data.ByteData.getInt64","comment":"<p>Returns the (possibly negative) integer represented by the eight bytes at\nthe specified <a>dart-typed_data.ByteData.getInt64.byteOffset</a> in this object, in two's complement binary\nform.\nThe return value will be between 2&lt;sup>63&lt;/sup> and 2&lt;sup>63&lt;/sup> - 1,\ninclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getInt64.byteOffset</a> is negative, or\n<code>byteOffset + 8</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getInt8":{"name":"getInt8","qualifiedName":"dart-typed_data.ByteData.getInt8","comment":"<p>Returns the (possibly negative) integer represented by the byte at the\nspecified <a>dart-typed_data.ByteData.getInt8.byteOffset</a> in this object, in two's complement binary\nrepresentation. The return value will be between -128 and 127, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getInt8.byteOffset</a> is negative, or\ngreater than or equal to the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getUint16":{"name":"getUint16","qualifiedName":"dart-typed_data.ByteData.getUint16","comment":"<p>Returns the positive integer represented by the two bytes starting\nat the specified <a>dart-typed_data.ByteData.getUint16.byteOffset</a> in this object, in unsigned binary\nform.\nThe return value will be between 0 and  2&lt;sup>16&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getUint16.byteOffset</a> is negative, or\n<code>byteOffset + 2</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getUint32":{"name":"getUint32","qualifiedName":"dart-typed_data.ByteData.getUint32","comment":"<p>Returns the positive integer represented by the four bytes starting\nat the specified <a>dart-typed_data.ByteData.getUint32.byteOffset</a> in this object, in unsigned binary\nform.\nThe return value will be between 0 and  2&lt;sup>32&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getUint32.byteOffset</a> is negative, or\n<code>byteOffset + 4</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getUint64":{"name":"getUint64","qualifiedName":"dart-typed_data.ByteData.getUint64","comment":"<p>Returns the positive integer represented by the eight bytes starting\nat the specified <a>dart-typed_data.ByteData.getUint64.byteOffset</a> in this object, in unsigned binary\nform.\nThe return value will be between 0 and  2&lt;sup>64&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getUint64.byteOffset</a> is negative, or\n<code>byteOffset + 8</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"getUint8":{"name":"getUint8","qualifiedName":"dart-typed_data.ByteData.getUint8","comment":"<p>Returns the positive integer represented by the byte at the specified\n<a>dart-typed_data.ByteData.getUint8.byteOffset</a> in this object, in unsigned binary form. The\nreturn value will be between 0 and 255, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.getUint8.byteOffset</a> is negative, or\ngreater than or equal to the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setFloat32":{"name":"setFloat32","qualifiedName":"dart-typed_data.ByteData.setFloat32","comment":"<p>Sets the four bytes starting at the specified <a>dart-typed_data.ByteData.setFloat32.byteOffset</a> in this\nobject to the IEEE 754 single-precision binary floating-point\n(binary32) representation of the specified <a>dart-typed_data.ByteData.setFloat32.value</a>.</p>\n<p><strong>Note that this method can lose precision.</strong> The input <a>dart-typed_data.ByteData.setFloat32.value</a> is\na 64-bit floating point value, which will be converted to 32-bit\nfloating point value by IEEE 754 rounding rules before it is stored.\nIf <a>dart-typed_data.ByteData.setFloat32.value</a> cannot be represented exactly as a binary32, it will be\nconverted to the nearest binary32 value.  If two binary32 values are\nequally close, the one whose least significant bit is zero will be used.\nNote that finite (but large) values can be converted to infinity, and\nsmall non-zero values can be converted to zero.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setFloat32.byteOffset</a> is negative, or\n<code>byteOffset + 4</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setFloat64":{"name":"setFloat64","qualifiedName":"dart-typed_data.ByteData.setFloat64","comment":"<p>Sets the eight bytes starting at the specified <a>dart-typed_data.ByteData.setFloat64.byteOffset</a> in this\nobject to the IEEE 754 double-precision binary floating-point\n(binary64) representation of the specified <a>dart-typed_data.ByteData.setFloat64.value</a>.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setFloat64.byteOffset</a> is negative, or\n<code>byteOffset + 8</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setInt16":{"name":"setInt16","qualifiedName":"dart-typed_data.ByteData.setInt16","comment":"<p>Sets the two bytes starting at the specified <a>dart-typed_data.ByteData.setInt16.byteOffset</a> in this\nobject to the two's complement binary representation of the specified\n<a>dart-typed_data.ByteData.setInt16.value</a>, which must fit in two bytes. In other words, <a>dart-typed_data.ByteData.setInt16.value</a> must lie\nbetween 2&lt;sup>15&lt;/sup> and 2&lt;sup>15&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setInt16.byteOffset</a> is negative, or\n<code>byteOffset + 2</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setInt32":{"name":"setInt32","qualifiedName":"dart-typed_data.ByteData.setInt32","comment":"<p>Sets the four bytes starting at the specified <a>dart-typed_data.ByteData.setInt32.byteOffset</a> in this\nobject to the two's complement binary representation of the specified\n<a>dart-typed_data.ByteData.setInt32.value</a>, which must fit in four bytes. In other words, <a>dart-typed_data.ByteData.setInt32.value</a> must lie\nbetween 2&lt;sup>31&lt;/sup> and 2&lt;sup>31&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setInt32.byteOffset</a> is negative, or\n<code>byteOffset + 4</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setInt64":{"name":"setInt64","qualifiedName":"dart-typed_data.ByteData.setInt64","comment":"<p>Sets the eight bytes starting at the specified <a>dart-typed_data.ByteData.setInt64.byteOffset</a> in this\nobject to the two's complement binary representation of the specified\n<a>dart-typed_data.ByteData.setInt64.value</a>, which must fit in eight bytes. In other words, <a>dart-typed_data.ByteData.setInt64.value</a> must lie\nbetween 2&lt;sup>63&lt;/sup> and 2&lt;sup>63&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setInt64.byteOffset</a> is negative, or\n<code>byteOffset + 8</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setInt8":{"name":"setInt8","qualifiedName":"dart-typed_data.ByteData.setInt8","comment":"<p>Sets the byte at the specified <a>dart-typed_data.ByteData.setInt8.byteOffset</a> in this object to the\ntwo's complement binary representation of the specified <a>dart-typed_data.ByteData.setInt8.value</a>, which\nmust fit in a single byte. In other words, <a>dart-typed_data.ByteData.setInt8.value</a> must be between\n-128 and 127, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setInt8.byteOffset</a> is negative, or\ngreater than or equal to the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setUint16":{"name":"setUint16","qualifiedName":"dart-typed_data.ByteData.setUint16","comment":"<p>Sets the two bytes starting at the specified <a>dart-typed_data.ByteData.setUint16.byteOffset</a> in this object\nto the unsigned binary representation of the specified <a>dart-typed_data.ByteData.setUint16.value</a>,\nwhich must fit in two bytes. in other words, <a>dart-typed_data.ByteData.setUint16.value</a> must be between\n0 and 2&lt;sup>16&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setUint16.byteOffset</a> is negative, or\n<code>byteOffset + 2</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setUint32":{"name":"setUint32","qualifiedName":"dart-typed_data.ByteData.setUint32","comment":"<p>Sets the four bytes starting at the specified <a>dart-typed_data.ByteData.setUint32.byteOffset</a> in this object\nto the unsigned binary representation of the specified <a>dart-typed_data.ByteData.setUint32.value</a>,\nwhich must fit in four bytes. in other words, <a>dart-typed_data.ByteData.setUint32.value</a> must be between\n0 and 2&lt;sup>32&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setUint32.byteOffset</a> is negative, or\n<code>byteOffset + 4</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setUint64":{"name":"setUint64","qualifiedName":"dart-typed_data.ByteData.setUint64","comment":"<p>Sets the eight bytes starting at the specified <a>dart-typed_data.ByteData.setUint64.byteOffset</a> in this object\nto the unsigned binary representation of the specified <a>dart-typed_data.ByteData.setUint64.value</a>,\nwhich must fit in eight bytes. in other words, <a>dart-typed_data.ByteData.setUint64.value</a> must be between\n0 and 2&lt;sup>64&lt;/sup> - 1, inclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setUint64.byteOffset</a> is negative, or\n<code>byteOffset + 8</code> is greater than the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"endian":{"name":"endian","optional":true,"named":false,"default":true,"type":[{"outer":"dart-typed_data.Endianness","inner":[]}],"value":"ConstructedConstant(Endianness(\"_littleEndian\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"setUint8":{"name":"setUint8","qualifiedName":"dart-typed_data.ByteData.setUint8","comment":"<p>Sets the byte at the specified <a>dart-typed_data.ByteData.setUint8.byteOffset</a> in this object to the\nunsigned binary representation of the specified <a>dart-typed_data.ByteData.setUint8.value</a>, which must fit\nin a single byte. in other words, <a>dart-typed_data.ByteData.setUint8.value</a> must be between 0 and 255,\ninclusive.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.ByteData.setUint8.byteOffset</a> is negative,\nor greater than or equal to the length of this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"byteOffset":{"name":"byteOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"buffer":{"name":"buffer","qualifiedName":"dart-typed_data.ByteData.buffer","comment":"<p>Returns the byte buffer associated with this object.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.buffer","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-typed_data.ByteBuffer","inner":[]}],"parameters":{},"annotations":[]},"elementSizeInBytes":{"name":"elementSizeInBytes","qualifiedName":"dart-typed_data.ByteData.elementSizeInBytes","comment":"<p>Returns the number of bytes in the representation of each element in this\nlist.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.elementSizeInBytes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-typed_data.ByteData.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-typed_data.ByteData.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"lengthInBytes":{"name":"lengthInBytes","qualifiedName":"dart-typed_data.ByteData.lengthInBytes","comment":"<p>Returns the length of this view, in bytes.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.lengthInBytes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"offsetInBytes":{"name":"offsetInBytes","qualifiedName":"dart-typed_data.ByteData.offsetInBytes","comment":"<p>Returns the offset in bytes into the underlying byte buffer of this view.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.offsetInBytes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-typed_data.ByteData.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-typed_data.ByteData.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-typed_data.ByteData.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-typed_data.ByteData.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-typed_data.ByteData.noSuchMethod","comment":"<p><a>dart-typed_data.ByteData.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-typed_data.ByteData.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-typed_data.ByteData.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-typed_data.ByteData.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-typed_data.ByteData.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}