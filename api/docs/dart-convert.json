{"name":"dart-convert","qualifiedName":"dart-convert","comment":"<p>Encoders and decoders for converting between different data representations,\nincluding JSON and UTF-8.</p>\n<p>In addition to converters for common data representations, this library\nprovides support for implementing converters in a way which makes them easy to\nchain and to use with streams.</p>\n<p>The <code>dart:convert</code> library works in both web apps and command-line apps.\nTo use it:</p>\n<pre><code>import 'dart:convert';\n</code></pre>\n<p>Two commonly used converters are the top-level instances of\n<a>dart-convert.JsonCodec</a> and <a>dart-convert.Utf8Codec</a>, named JSON and UTF8, respectively.</p>\n<p>JSON is a simple text format for representing\nstructured objects and collections.\nThe JSON encoder/decoder transforms between strings and\nobject structures, such as lists and maps, using the JSON format.</p>\n<p>UTF-8 is a common variable-width encoding that can represent\nevery character in the Unicode character set.\nThe UTF-8 encoder/decoder transforms between Strings and bytes.</p>\n<p>Converters are often used with streams\nto transform the data that comes through the stream\nas it becomes available.\nThe following code uses two converters.\nThe first is a UTF-8 decoder, which converts the data from bytes to UTF-8\nas it's read from a file,\nThe second is an instance of <a>dart-convert.LineSplitter</a>,\nwhich splits the data on newline boundaries.</p>\n<pre><code>int lineNumber = 1;\nStream&lt;List&lt;int&gt;&gt; stream = new File('quotes.txt').openRead();\n\nstream.transform(UTF8.decoder)\n      .transform(const LineSplitter())\n      .listen((line) {\n        if (showLineNumbers) {\n          stdout.write('${lineNumber++} ');\n        }\n        stdout.writeln(line);\n      });\n</code></pre>\n<p>See the documentation for the <a>dart-convert.Codec</a> and <a>dart-convert.Converter</a> classes\nfor information about creating your own converters.</p>","variables":{"ASCII":{"name":"ASCII","qualifiedName":"dart-convert.ASCII","comment":"<p>An instance of the default implementation of the <a>dart-convert.AsciiCodec</a>.</p>\n<p>This instance provides a convenient access to the most common ASCII\nuse cases.</p>\n<p>Examples:</p>\n<pre><code>var encoded = ASCII.encode(\"This is ASCII!\");\nvar decoded = ASCII.decode([0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73,\n                            0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x21]);\n</code></pre>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-convert.AsciiCodec","inner":[]}],"annotations":[]},"HTML_ESCAPE":{"name":"HTML_ESCAPE","qualifiedName":"dart-convert.HTML_ESCAPE","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-convert.HtmlEscape","inner":[]}],"annotations":[]},"JSON":{"name":"JSON","qualifiedName":"dart-convert.JSON","comment":"<p>An instance of the default implementation of the <a>dart-convert.JsonCodec</a>.</p>\n<p>This instance provides a convenient access to the most common JSON\nuse cases.</p>\n<p>Examples:</p>\n<pre><code>var encoded = JSON.encode([1, 2, { \"a\": null }]);\nvar decoded = JSON.decode('[\"foo\", { \"bar\": 499 }]');\n</code></pre>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-convert.JsonCodec","inner":[]}],"annotations":[]},"LATIN1":{"name":"LATIN1","qualifiedName":"dart-convert.LATIN1","comment":"<p>An instance of the default implementation of the <a>dart-convert.Latin1Codec</a>.</p>\n<p>This instance provides a convenient access to the most common ISO Latin 1\nuse cases.</p>\n<p>Examples:</p>\n<pre><code>var encoded = LATIN1.encode(\"blåbærgrød\");\nvar decoded = LATIN1.decode([0x62, 0x6c, 0xe5, 0x62, 0xe6,\n                             0x72, 0x67, 0x72, 0xf8, 0x64]);\n</code></pre>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-convert.Latin1Codec","inner":[]}],"annotations":[]},"UNICODE_BOM_CHARACTER_RUNE":{"name":"UNICODE_BOM_CHARACTER_RUNE","qualifiedName":"dart-convert.UNICODE_BOM_CHARACTER_RUNE","comment":"<p>The Unicode Byte Order Marker (BOM) character <code>U+FEFF</code>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_REPLACEMENT_CHARACTER_RUNE":{"name":"UNICODE_REPLACEMENT_CHARACTER_RUNE","qualifiedName":"dart-convert.UNICODE_REPLACEMENT_CHARACTER_RUNE","comment":"<p>The Unicode Replacement character <code>U+FFFD</code> (�).</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UTF8":{"name":"UTF8","qualifiedName":"dart-convert.UTF8","comment":"<p>An instance of the default implementation of the <a>dart-convert.Utf8Codec</a>.</p>\n<p>This instance provides a convenient access to the most common UTF-8\nuse cases.</p>\n<p>Examples:</p>\n<pre><code>var encoded = UTF8.encode(\"Îñţérñåţîöñåļîžåţîờñ\");\nvar decoded = UTF8.decode([0x62, 0x6c, 0xc3, 0xa5, 0x62, 0xc3, 0xa6,\n                           0x72, 0x67, 0x72, 0xc3, 0xb8, 0x64]);\n</code></pre>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-convert.Utf8Codec","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"AsciiCodec","qualifiedName":"dart-convert.AsciiCodec","preview":"<p>An <a>dart-convert.AsciiCodec</a> allows encoding strings as ASCII bytes\nand decoding ASCII bytes to strings.</p>"},{"name":"AsciiDecoder","qualifiedName":"dart-convert.AsciiDecoder"},{"name":"AsciiEncoder","qualifiedName":"dart-convert.AsciiEncoder","preview":"<p>This class converts strings of only ASCII characters to bytes.</p>"},{"name":"ByteConversionSink","qualifiedName":"dart-convert.ByteConversionSink","preview":"<p>The <a>dart-convert.ByteConversionSink</a> provides an interface for converters to\nefficiently transmit byte data.</p>"},{"name":"ByteConversionSinkBase","qualifiedName":"dart-convert.ByteConversionSinkBase","preview":"<p>This class provides a base-class for converters that need to accept byte\ninputs.</p>"},{"name":"ChunkedConversionSink","qualifiedName":"dart-convert.ChunkedConversionSink","preview":"<p>A <a>dart-convert.ChunkedConversionSink</a> is used to transmit data more efficiently between\ntwo converters during chunked conversions.</p>"},{"name":"ClosableStringSink","qualifiedName":"dart-convert.ClosableStringSink","preview":"<p>A <a>dart-convert.ClosableStringSink</a> extends the <a>dart-core.StringSink</a> interface by adding a\n<code>close</code> method.</p>"},{"name":"Codec","qualifiedName":"dart-convert.Codec","preview":"<p>A <a>dart-convert.Codec</a> encodes and (if supported) decodes data.</p>"},{"name":"Converter","qualifiedName":"dart-convert.Converter","preview":"<p>A <a>dart-convert.Converter</a> converts data from one representation into another.</p>"},{"name":"Encoding","qualifiedName":"dart-convert.Encoding","preview":"<p>Open-ended Encoding enum.</p>"},{"name":"HtmlEscape","qualifiedName":"dart-convert.HtmlEscape"},{"name":"HtmlEscapeMode","qualifiedName":"dart-convert.HtmlEscapeMode"},{"name":"JsonCodec","qualifiedName":"dart-convert.JsonCodec","preview":"<p>A <a>dart-convert.JsonCodec</a> encodes JSON objects to strings and decodes strings to\nJSON objects.</p>"},{"name":"JsonDecoder","qualifiedName":"dart-convert.JsonDecoder","preview":"<p>This class parses JSON strings and builds the corresponding objects.</p>"},{"name":"JsonEncoder","qualifiedName":"dart-convert.JsonEncoder","preview":"<p>This class converts JSON objects to strings.</p>"},{"name":"Latin1Codec","qualifiedName":"dart-convert.Latin1Codec","preview":"<p>A LatinCodec encodes strings to ISO Latin-1 (aka ISO-8859-1) bytes\nand decodes Latin-1 bytes to strings.</p>"},{"name":"Latin1Decoder","qualifiedName":"dart-convert.Latin1Decoder","preview":"<p>This class converts Latin-1 bytes (lists of unsigned 8-bit integers)\nto a string.</p>"},{"name":"Latin1Encoder","qualifiedName":"dart-convert.Latin1Encoder","preview":"<p>This class converts strings of only ISO Latin-1 characters to bytes.</p>"},{"name":"LineSplitter","qualifiedName":"dart-convert.LineSplitter","preview":"<p>This class splits <a>dart-core.String</a> values into individual lines.</p>"},{"name":"StringConversionSink","qualifiedName":"dart-convert.StringConversionSink","preview":"<p>This class provides an interface for converters to\nefficiently transmit String data.</p>"},{"name":"StringConversionSinkBase","qualifiedName":"dart-convert.StringConversionSinkBase","preview":"<p>This class provides a base-class for converters that need to accept String\ninputs.</p>"},{"name":"StringConversionSinkMixin","qualifiedName":"dart-convert.StringConversionSinkMixin","preview":"<p>This class provides a mixin for converters that need to accept String\ninputs.</p>"},{"name":"Utf8Codec","qualifiedName":"dart-convert.Utf8Codec","preview":"<p>A <a>dart-convert.Utf8Codec</a> encodes strings to utf-8 code units (bytes) and decodes\nUTF-8 code units to strings.</p>"},{"name":"Utf8Decoder","qualifiedName":"dart-convert.Utf8Decoder","preview":"<p>This class converts UTF-8 code units (lists of unsigned 8-bit integers)\nto a string.</p>"},{"name":"Utf8Encoder","qualifiedName":"dart-convert.Utf8Encoder","preview":"<p>This class converts strings to their UTF-8 code units (a list of\nunsigned 8-bit integers).</p>"}],"typedef":{},"error":[{"name":"JsonCyclicError","qualifiedName":"dart-convert.JsonCyclicError","preview":"<p>Reports that an object could not be stringified due to cyclic references.</p>"},{"name":"JsonUnsupportedObjectError","qualifiedName":"dart-convert.JsonUnsupportedObjectError","preview":"<p>Error thrown by JSON serialization if an object cannot be serialized.</p>"}]},"packageName":"","packageIntro":null}