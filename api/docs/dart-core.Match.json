{"name":"Match","qualifiedName":"dart-core.Match","comment":"<p>A result from searching within a string.</p>\n<p>A Match or an <a>dart-core.Iterable</a> of Match objects is returned from <a>dart-core.Pattern</a>\nmatching methods.</p>\n<p>The following example finds all matches of a <a>dart-core.RegExp</a> in a <a>dart-core.String</a>\nand iterates through the returned iterable of Match objects.</p>\n<pre><code>RegExp exp = new RegExp(r\"(\\w+)\");\nString str = \"Parse my string\";\nIterable&lt;Match&gt; matches = exp.allMatches(str);\nfor (Match m in matches) {\n  String match = m.group(0);\n  print(match);\n}\n</code></pre>\n<p>The output of the example is:</p>\n<pre><code>Parse\nmy\nstring\n</code></pre>\n<p>Some patterns, regular expressions in particular, may record subtrings\nthat were part of the matching. These are called <em>groups</em> in the Match\nobject. Some patterns may never have any groups, and their matches always\nhave zero <a>dart-core.Match.groupCount</a>.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"end":{"name":"end","qualifiedName":"dart-core.Match.end","comment":"<p>Returns the index in the string after the last character of the\nmatch.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"groupCount":{"name":"groupCount","qualifiedName":"dart-core.Match.groupCount","comment":"<p>Returns the number of captured groups in the match.</p>\n<p>Some patterns may capture parts of the input that was used to\ncompute the full match. This is the number of captured groups,\nwhich is also the maximal allowed argument to the <a>dart-core.Match.group</a> method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"input":{"name":"input","qualifiedName":"dart-core.Match.input","comment":"<p>The string on which this match was computed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"pattern":{"name":"pattern","qualifiedName":"dart-core.Match.pattern","comment":"<p>The pattern used to search in <a>dart-core.Match.input</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Pattern","inner":[]}],"parameters":{},"annotations":[]},"start":{"name":"start","qualifiedName":"dart-core.Match.start","comment":"<p>Returns the index in the string where the match starts.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"[]":{"name":"[]","qualifiedName":"dart-core.Match.[]","comment":"<p>Returns the string matched by the given <a>dart-core.Match.[].group</a>.</p>\n<p>If <a>dart-core.Match.[].group</a> is 0, returns the match of the pattern.</p>\n<p>Short alias for <a>dart-core.Match.group</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"group":{"name":"group","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"group":{"name":"group","qualifiedName":"dart-core.Match.group","comment":"<p>Returns the string matched by the given <a>dart-core.Match.group.group</a>.</p>\n<p>If <a>dart-core.Match.group.group</a> is 0, returns the match of the pattern.</p>\n<p>The result may be <code>null</code> if the pattern didn't assign a value to it\nas part of this match.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"group":{"name":"group","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"groups":{"name":"groups","qualifiedName":"dart-core.Match.groups","comment":"<p>Returns a list of the groups with the given indices.</p>\n<p>The list contains the strings returned by <a>dart-core.Match.group</a> for each index in\n<a>dart-core.Match.groups.groupIndices</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"groupIndices":{"name":"groupIndices","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Match.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Match.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Match.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Match.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Match.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Match.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Match.noSuchMethod","comment":"<p><a>dart-core.Match.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Match.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Match.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Match.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Match.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}