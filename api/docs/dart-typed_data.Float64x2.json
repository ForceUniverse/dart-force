{"name":"Float64x2","qualifiedName":"dart-typed_data.Float64x2","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"signMask":{"name":"signMask","qualifiedName":"dart-typed_data.Float64x2.signMask","comment":"<p>Extract the sign bits from each lane return them in the first 2 bits.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"x":{"name":"x","qualifiedName":"dart-typed_data.Float64x2.x","comment":"<p>Extracted x value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"y":{"name":"y","qualifiedName":"dart-typed_data.Float64x2.y","comment":"<p>Extracted y value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-typed_data.Float64x2.Float64x2-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromFloat32x4":{"name":"fromFloat32x4","qualifiedName":"dart-typed_data.Float64x2.Float64x2-fromFloat32x4","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"splat":{"name":"splat","qualifiedName":"dart-typed_data.Float64x2.Float64x2-splat","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"zero":{"name":"zero","qualifiedName":"dart-typed_data.Float64x2.Float64x2-zero","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{"*":{"name":"*","qualifiedName":"dart-typed_data.Float64x2.*","comment":"<p>Multiplication operator.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"dart-typed_data.Float64x2.+","comment":"<p>Addition operator.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"dart-typed_data.Float64x2.-","comment":"<p>Subtraction operator.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"/":{"name":"/","qualifiedName":"dart-typed_data.Float64x2./","comment":"<p>Division operator.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"dart-typed_data.Float64x2.unary-","comment":"<p>Negate operator.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{},"annotations":[]}},"methods":{"abs":{"name":"abs","qualifiedName":"dart-typed_data.Float64x2.abs","comment":"<p>Returns the absolute value of this <a>dart-typed_data.Float64x2</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{},"annotations":[]},"clamp":{"name":"clamp","qualifiedName":"dart-typed_data.Float64x2.clamp","comment":"<p>Clamps this to be in the range <a>dart-typed_data.Float64x2.clamp.lowerLimit</a>-<a>dart-typed_data.Float64x2.clamp.upperLimit</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"lowerLimit":{"name":"lowerLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]},"upperLimit":{"name":"upperLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"max":{"name":"max","qualifiedName":"dart-typed_data.Float64x2.max","comment":"<p>Returns the lane-wise maximum value in this or <a>dart-typed_data.Float64x2.max.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"min":{"name":"min","qualifiedName":"dart-typed_data.Float64x2.min","comment":"<p>Returns the lane-wise minimum value in this or <a>dart-typed_data.Float64x2.min.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scale":{"name":"scale","qualifiedName":"dart-typed_data.Float64x2.scale","comment":"<p>Returns a copy of this each lane being scaled by <a>dart-typed_data.Float64x2.scale.s</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"s":{"name":"s","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sqrt":{"name":"sqrt","qualifiedName":"dart-typed_data.Float64x2.sqrt","comment":"<p>Returns the lane-wise square root of this.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-typed_data.Float64x2.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"withX":{"name":"withX","qualifiedName":"dart-typed_data.Float64x2.withX","comment":"<p>Returns a new <a>dart-typed_data.Float64x2</a> copied from this with a new x value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"withY":{"name":"withY","qualifiedName":"dart-typed_data.Float64x2.withY","comment":"<p>Returns a new <a>dart-typed_data.Float64x2</a> copied from this with a new y value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Float64x2","inner":[]}],"parameters":{"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-typed_data.Float64x2.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-typed_data.Float64x2.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-typed_data.Float64x2.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-typed_data.Float64x2.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-typed_data.Float64x2.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-typed_data.Float64x2.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-typed_data.Float64x2.noSuchMethod","comment":"<p><a>dart-typed_data.Float64x2.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-typed_data.Float64x2.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-typed_data.Float64x2.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-typed_data.Float64x2.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-typed_data.Float64x2.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}