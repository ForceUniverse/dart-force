{"name":"Map","qualifiedName":"dart-core.Map","comment":"<p>An collection of key-value pairs, from which you retrieve a value\nby using its associated key.</p>\n<p>Each key can occur at most once in a map.</p>\n<p>Maps, and their keys and values, can be iterated.\nThe order of iteration is defined by the individual type of map.\nExamples:</p><ul><li>The plain <a>dart-collection.HashMap</a> is unordered (no order is guaranteed),</li><li>the <a>dart-collection.LinkedHashMap</a> iterates in key insertion order,</li><li>and a sorted map like <a>dart-collection.SplayTreeMap</a> iterates the keys in sorted order.</li></ul>\n<p>It is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a <a>dart-core.Map.forEach</a> or <a>dart-core.Map.putIfAbsent</a> call.\nModifying the map while iterating the keys or values\nmay also break the iteration.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isEmpty":{"name":"isEmpty","qualifiedName":"dart-core.Map.isEmpty","comment":"<p>Returns true if there is no key-value pair in the map.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-core.Map.isNotEmpty","comment":"<p>Returns true if there is at least one key-value pair in the map.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"keys":{"name":"keys","qualifiedName":"dart-core.Map.keys","comment":"<p>The keys of this.</p>\n<p>The returned iterable has efficient <code>length</code> and <code>contains</code> operations,\nbased on <a>dart-core.Map.length</a> and <a>dart-core.Map.containsKey</a> of the map.</p>\n<p>The order of iteration is defined by the individual <code>Map</code> implementation,\nbut must be consistent between changes to the map.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.K","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-core.Map.length","comment":"<p>The number of key-value pairs in the map.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"values":{"name":"values","qualifiedName":"dart-core.Map.values","comment":"<p>The values of this.</p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a>dart-core.Map.keys</a> and <a>dart-core.Map.values</a> in parrallel will\nprovided matching pairs of keys and values.</p>\n<p>The returned iterable has an efficient <code>length</code> method based on the\n<a>dart-core.Map.length</a> of the map.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.Map.Map-","comment":"<p>Creates a Map instance with the default implementation, <a>dart-collection.LinkedHashMap</a>.</p>\n<p>This constructor is equivalent to the non-const map literal <code>&lt;K,V&gt;{}</code>.</p>\n<p>A <code>LinkedHashMap</code> requires the keys to implement compatible\n<code>operator==</code> and <code>hashCode</code>, and it allows null as a key.\nIt iterates in key insertion order.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{},"annotations":[]},"from":{"name":"from","qualifiedName":"dart-core.Map.Map-from","comment":"<p>Creates a <a>dart-collection.LinkedHashMap</a> instance that contains all key-value pairs of\n<a>dart-core.Map.Map-from.other</a>.</p>\n<p>A <code>LinkedHashMap</code> requires the keys to implement compatible\n<code>operator==</code> and <code>hashCode</code>, and it allows null as a key.\nIt iterates in key insertion order.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"fromIterable":{"name":"fromIterable","qualifiedName":"dart-core.Map.Map-fromIterable","comment":"<p>Creates a Map instance in which the keys and values are computed from the\n<a>dart-core.Map.Map-fromIterable.iterable</a>.</p>\n<p>The created map is a <a>dart-collection.LinkedHashMap</a>.\nA <code>LinkedHashMap</code> requires the keys to implement compatible\n<code>operator==</code> and <code>hashCode</code>, and it allows null as a key.\nIt iterates in key insertion order.</p>\n<p>For each element of the <a>dart-core.Map.Map-fromIterable.iterable</a> this constructor computes a key-value\npair, by applying <a>dart-core.Map.Map-fromIterable.key</a> and <a>dart-core.Map.Map-fromIterable.value</a> respectively.</p>\n<p>The example below creates a new Map from a List. The keys of <code>map</code> are\n<code>list</code> values converted to strings, and the values of the <code>map</code> are the\nsquares of the <code>list</code> values:</p>\n<pre><code>List&lt;int&gt; list = [1, 2, 3];\nMap&lt;String, int&gt; map = new Map.fromIterable(list,\n    key: (item) =&gt; item.toString(),\n    value: (item) =&gt; item * item));\n\nmap['1'] + map['2']; // 1 + 4\nmap['3'] - map['2']; // 9 - 4\n</code></pre>\n<p>If no values are specified for <a>dart-core.Map.Map-fromIterable.key</a> and <a>dart-core.Map.Map-fromIterable.value</a> the default is the\nidentity function.</p>\n<p>In the following example, the keys and corresponding values of <code>map</code>\nare <code>list</code> values:</p>\n<pre><code>map = new Map.fromIterable(list);\nmap[1] + map[2]; // 1 + 2\nmap[3] - map[2]; // 3 - 2\n</code></pre>\n<p>The keys computed by the source <a>dart-core.Map.Map-fromIterable.iterable</a> do not need to be unique. The\nlast occurrence of a key will simply overwrite any previous value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"key":{"name":"key","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Map.K","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"value":{"name":"value","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"fromIterables":{"name":"fromIterables","qualifiedName":"dart-core.Map.Map-fromIterables","comment":"<p>Creates a Map instance associating the given <a>dart-core.Map.Map-fromIterables.keys</a> to <a>dart-core.Map.Map-fromIterables.values</a>.</p>\n<p>The created map is a <a>dart-collection.LinkedHashMap</a>.\nA <code>LinkedHashMap</code> requires the keys to implement compatible\n<code>operator==</code> and <code>hashCode</code>, and it allows null as a key.\nIt iterates in key insertion order.</p>\n<p>This constructor iterates over <a>dart-core.Map.Map-fromIterables.keys</a> and <a>dart-core.Map.Map-fromIterables.values</a> and maps each element of\n<a>dart-core.Map.Map-fromIterables.keys</a> to the corresponding element of <a>dart-core.Map.Map-fromIterables.values</a>.</p>\n<pre><code>List&lt;String&gt; letters = ['b', 'c'];\nList&lt;String&gt; words = ['bad', 'cat'];\nMap&lt;String, String&gt; map = new Map.fromIterables(letters, words);\nmap['b'] + map['c'];  // badcat\n</code></pre>\n<p>If <a>dart-core.Map.Map-fromIterables.keys</a> contains the same object multiple times, the last occurrence\noverwrites the previous value.</p>\n<p>The two <a>dart-core.Iterable</a>s must have the same length.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{"keys":{"name":"keys","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.K","inner":[]}]}],"value":null,"annotations":[]},"values":{"name":"values","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"identity":{"name":"identity","qualifiedName":"dart-core.Map.Map-identity","comment":"<p>Creates an identity map with the default implementation, <a>dart-collection.LinkedHashMap</a>.</p>\n<p>The returned map allows <code>null</code> as a key.\nIt iterates in key insertion order.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"dart-core.Map.[]","comment":"<p>Returns the value for the given <a>dart-core.Map.[].key</a> or null if <a>dart-core.Map.[].key</a> is not\nin the map. Because null values are supported, one should either\nuse <a>dart-core.Map.containsKey</a> to distinguish between an absent key and a null\nvalue, or use the <a>dart-core.Map.putIfAbsent</a> method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"dart-core.Map.[]=","comment":"<p>Associates the <a>dart-core.Map.[]=.key</a> with the given <a>dart-core.Map.[]=.value</a>.</p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key-value pair is added to the map.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.V","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addAll":{"name":"addAll","qualifiedName":"dart-core.Map.addAll","comment":"<p>Adds all key-value pairs of <a>dart-core.Map.addAll.other</a> to this map.</p>\n<p>If a key of <a>dart-core.Map.addAll.other</a> is already in this map, its value is overwritten.</p>\n<p>The operation is equivalent to doing <code>this[key] = value</code> for each key\nand associated value in other. It iterates over <a>dart-core.Map.addAll.other</a>, which must\ntherefore not change during the iteration.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-core.Map.clear","comment":"<p>Removes all pairs from the map.</p>\n<p>After this, the map is empty.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"containsKey":{"name":"containsKey","qualifiedName":"dart-core.Map.containsKey","comment":"<p>Returns true if this map contains the given key.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsValue":{"name":"containsValue","qualifiedName":"dart-core.Map.containsValue","comment":"<p>Returns true if this map contains the given value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-core.Map.forEach","comment":"<p>Applies <a>dart-core.Map.forEach.f</a> to each {key, value} pair of the map.</p>\n<p>Adding or removing keys from the map during iteration is not allowed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.V","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"putIfAbsent":{"name":"putIfAbsent","qualifiedName":"dart-core.Map.putIfAbsent","comment":"<p>If <a>dart-core.Map.putIfAbsent.key</a> is not associated to a value, calls <a>dart-core.Map.putIfAbsent.ifAbsent</a> and\nupdates the map by mapping <a>dart-core.Map.putIfAbsent.key</a> to the value returned by\n<a>dart-core.Map.putIfAbsent.ifAbsent</a>. Returns the value in the map.</p>\n<pre><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      // 36\nscores['Rohan'];    //  5\nscores['Sophena'];  //  7\n</code></pre>\n<p>The code that <a>dart-core.Map.putIfAbsent.ifAbsent</a> executes must not add or remove keys.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"ifAbsent":{"name":"ifAbsent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-core.Map.remove","comment":"<p>Removes the association for the given <a>dart-core.Map.remove.key</a>. Returns the value for\n<a>dart-core.Map.remove.key</a> in the map or null if <a>dart-core.Map.remove.key</a> is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Map.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Map.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Map.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Map.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Map.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Map.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Map.noSuchMethod","comment":"<p><a>dart-core.Map.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Map.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Map.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Map.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Map.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"K":{"name":"K","type":"dart.core.Object"},"V":{"name":"V","type":"dart.core.Object"}}}