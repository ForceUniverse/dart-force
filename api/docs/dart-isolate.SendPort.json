{"name":"SendPort","qualifiedName":"dart-isolate.SendPort","comment":"<p>Sends messages to its <a>dart-isolate.ReceivePort</a>s.</p>\n<p><a>dart-isolate.SendPort</a>s are created from <a>dart-isolate.ReceivePort</a>s. Any message sent through\na <a>dart-isolate.SendPort</a> is delivered to its corresponding <a>dart-isolate.ReceivePort</a>. There might be\nmany <a>dart-isolate.SendPort</a>s for the same <a>dart-isolate.ReceivePort</a>.</p>\n<p><a>dart-isolate.SendPort</a>s can be transmitted to other isolates, and they preserve equality\nwhen sent.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-isolate.Capability"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-isolate.SendPort.hashCode","comment":"<p>Returns an immutable hash code for this send port that is\nconsistent with the == operator.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-isolate.SendPort.==","comment":"<p>Tests whether <a>dart-isolate.SendPort.==.other</a> is a <a>dart-isolate.SendPort</a> pointing to the same\n<a>dart-isolate.ReceivePort</a> as this one.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"send":{"name":"send","qualifiedName":"dart-isolate.SendPort.send","comment":"<p>Sends an asynchronous <a>dart-isolate.SendPort.send.message</a> through this send port, to its\ncorresponding <code>ReceivePort</code>.</p>\n<p>The content of <a>dart-isolate.SendPort.send.message</a> can be: primitive values (null, num, bool, double,\nString), instances of <a>dart-isolate.SendPort</a>, and lists and maps whose elements are any\nof these. List and maps are also allowed to be cyclic.</p>\n<p>In the special circumstances when two isolates share the same code and are\nrunning in the same process (e.g. isolates created via <a>dart-isolate.Isolate.spawn</a>), it\nis also possible to send object instances (which would be copied in the\nprocess). This is currently only supported by the dartvm.  For now, the\ndart2js compiler only supports the restricted messages described above.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-isolate.SendPort.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-isolate.SendPort.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-isolate.SendPort.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-isolate.SendPort.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-isolate.SendPort.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-isolate.SendPort.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-isolate.SendPort.noSuchMethod","comment":"<p><a>dart-isolate.SendPort.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-isolate.SendPort.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-isolate.SendPort.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-isolate.SendPort.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-isolate.SendPort.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}