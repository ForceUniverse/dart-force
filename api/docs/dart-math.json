{"name":"dart-math","qualifiedName":"dart-math","comment":"<p>Mathematical constants and functions, plus a random number generator.</p>","variables":{"E":{"name":"E","qualifiedName":"dart-math.E","comment":"<p>Base of the natural logarithms.</p>\n<p>Typically written as \"e\".</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"LN10":{"name":"LN10","qualifiedName":"dart-math.LN10","comment":"<p>Natural logarithm of 10.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"LN2":{"name":"LN2","qualifiedName":"dart-math.LN2","comment":"<p>Natural logarithm of 2.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"LOG10E":{"name":"LOG10E","qualifiedName":"dart-math.LOG10E","comment":"<p>Base-10 logarithm of <a>dart-math.E</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"LOG2E":{"name":"LOG2E","qualifiedName":"dart-math.LOG2E","comment":"<p>Base-2 logarithm of <a>dart-math.E</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"PI":{"name":"PI","qualifiedName":"dart-math.PI","comment":"<p>The PI constant.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"SQRT1_2":{"name":"SQRT1_2","qualifiedName":"dart-math.SQRT1_2","comment":"<p>Square root of 1/2.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"SQRT2":{"name":"SQRT2","qualifiedName":"dart-math.SQRT2","comment":"<p>Square root of 2.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"acos":{"name":"acos","qualifiedName":"dart-math.acos","comment":"<p>Converts <a>dart-math.acos.x</a> to a double and returns the arc cosine of the value.</p>\n<p>Returns a value in the range -PI..PI, or NaN if <a>dart-math.acos.x</a> is outside\nthe range -1..1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"asin":{"name":"asin","qualifiedName":"dart-math.asin","comment":"<p>Converts <a>dart-math.asin.x</a> to a double and returns the arc sine of the value.\nReturns a value in the range -PI..PI, or  NaN if <a>dart-math.asin.x</a> is outside\nthe range -1..1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"atan":{"name":"atan","qualifiedName":"dart-math.atan","comment":"<p>Converts <a>dart-math.atan.x</a> to a dobule and returns the arc tangent of the vlaue.\nReturns a value in the range -PI/2..PI/2, or NaN if <a>dart-math.atan.x</a> is NaN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"atan2":{"name":"atan2","qualifiedName":"dart-math.atan2","comment":"<p>A variant of <a>dart-math.atan</a>.</p>\n<p>Converts both arguments to doubles.</p>\n<p>Returns the angle between the positive x-axis and the vector (<a>dart-math.atan2.b</a>,<a>dart-math.atan2.a</a>).\nThe result, in radians, is in the range -PI..PI.</p>\n<p>If <a>dart-math.atan2.b</a> is positive, this is the same as <code>atan(b/a)</code>.</p>\n<p>The result is negative when <a>dart-math.atan2.a</a> is negative (including when <a>dart-math.atan2.a</a> is the\ndouble -0.0).</p>\n<p>If <a>dart-math.atan2.a</a> is equal to zero, the vector (<a>dart-math.atan2.b</a>,<a>dart-math.atan2.a</a>) is considered parallel to\nthe x-axis, even if <a>dart-math.atan2.b</a> is also equal to zero. The sign of <a>dart-math.atan2.b</a> determines\nthe direction of the vector along the x-axis.</p>\n<p>Returns NaN if either argument is NaN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"cos":{"name":"cos","qualifiedName":"dart-math.cos","comment":"<p>Converts <a>dart-math.cos.x</a> to a double and returns the cosine of the value.</p>\n<p>If <a>dart-math.cos.x</a> is not a finite number, the result is NaN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"exp":{"name":"exp","qualifiedName":"dart-math.exp","comment":"<p>Converts <a>dart-math.exp.x</a> to a double and returns the natural exponent, <a>dart-math.E</a>,\nto the power <a>dart-math.exp.x</a>.\nReturns NaN if <a>dart-math.exp.x</a> is NaN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"log":{"name":"log","qualifiedName":"dart-math.log","comment":"<p>Converts <a>dart-math.log.x</a> to a double and returns the natural logarithm of the value.\nReturns negative infinity if <a>dart-math.log.x</a> is equal to zero.\nReturns NaN if <a>dart-math.log.x</a> is NaN or less than zero.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"max":{"name":"max","qualifiedName":"dart-math.max","comment":"<p>Returns the larger of two numbers.</p>\n<p>Returns NaN if either argument is NaN.\nThe larger of <code>-0.0</code> and <code>0.0</code> is <code>0.0</code>. If the arguments are\notherwise equal (including int and doubles with the same mathematical value)\nthen it is unspecified which of the two arguments is returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"min":{"name":"min","qualifiedName":"dart-math.min","comment":"<p>Returns the lesser of two numbers.</p>\n<p>Returns NaN if either argument is NaN.\nThe lesser of <code>-0.0</code> and <code>0.0</code> is <code>-0.0</code>.\nIf the arguments are otherwise equal (including int and doubles with the\nsame mathematical value) then it is unspecified which of the two arguments\nis returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pow":{"name":"pow","qualifiedName":"dart-math.pow","comment":"<p>Returns <a>dart-math.pow.x</a> to the power of <a>dart-math.pow.exponent</a>.</p>\n<p>If <a>dart-math.pow.x</a> is an <a>dart-core.int</a> and <a>dart-math.pow.exponent</a> is a non-negative <a>dart-core.int</a>, the result is\nan <a>dart-core.int</a>, otherwise both arguments are converted to doubles first, and the\nresult is a <a>dart-core.double</a>.</p>\n<p>For integers, the power is always equal to the mathematical result of <code>x</code> to\nthe power <code>exponent</code>, only limited by the available memory.</p>\n<p>For doubles, <code>pow(x, y)</code> handles edge cases as follows:</p><ul><li>if <code>y</code> is zero (0.0 or -0.0), the result is always 1.0.</li><li>if <code>x</code> is 1.0, the result is always 1.0.</li><li>otherwise, if either <code>x</code> or <code>y</code> is NaN then the result is NaN.</li><li>\n<p>if <code>x</code> is negative (but not -0.0) and <code>y</code> is a finite non-integer, the\n  result is NaN.</p></li><li>if <code>x</code> is Infinity and <code>y</code> is negative, the result is 0.0.</li><li>if <code>x</code> is Infinity and <code>y</code> is positive, the result is Infinity.</li><li>if <code>x</code> is 0.0 and <code>y</code> is negative, the result is Infinity.</li><li>if <code>x</code> is 0.0 and <code>y</code> is positive, the result is 0.0.</li><li>\n<p>if <code>x</code> is -Infinity or -0.0 and <code>y</code> is an odd integer, then the result is\n  <code>-pow(-x ,y)</code>.</p></li><li>\n<p>if <code>x</code> is -Infinity or -0.0 and <code>y</code> is not an odd integer, then the result\n  is the same as <code>pow(-x , y)</code>.</p></li><li>\n<p>if <code>y</code> is Infinity and the absolute value of <code>x</code> is less than 1, the\n  result is 0.0.</p></li><li>if <code>y</code> is Infinity and <code>x</code> is -1, the result is 1.0.</li><li>\n<p>if <code>y</code> is Infinity and the absolute value of <code>x</code> is greater than 1,\n  the result is Infinity.</p></li><li>if <code>y</code> is -Infinity, the result is <code>1/pow(x, Infinity)</code>.</li></ul>\n<p>This corresponds to the <code>pow</code> function defined in the IEEE Standard 754-2008.</p>\n<p>Notice that an <a>dart-core.int</a> result cannot overflow, but a <a>dart-core.double</a> result might\nbe <a>dart-core.double.INFINITY</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"exponent":{"name":"exponent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sin":{"name":"sin","qualifiedName":"dart-math.sin","comment":"<p>Converts <a>dart-math.sin.x</a> to a double and returns the sine of the value.</p>\n<p>If <a>dart-math.sin.x</a> is not a finite number, the result is NaN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sqrt":{"name":"sqrt","qualifiedName":"dart-math.sqrt","comment":"<p>Converts <a>dart-math.sqrt.x</a> to a double and returns the positive square root of the value.</p>\n<p>Returns -0.0 if <a>dart-math.sqrt.x</a> is -0.0, and NaN if <a>dart-math.sqrt.x</a> is otherwise negative or NaN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"tan":{"name":"tan","qualifiedName":"dart-math.tan","comment":"<p>Converts <a>dart-math.tan.x</a> to a double and returns the tangent of the value.</p>\n<p>The tangent function is equivalent to <code>sin(x)/cos(x)</code> and may be\ninfinite (positive or negative) when <code>cos(x)</code> is equal to zero.\nIf <a>dart-math.tan.x</a> is not a finite number, the result is NaN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"MutableRectangle","qualifiedName":"dart-math.MutableRectangle","preview":"<p>A class for representing two-dimensional axis-aligned rectangles with mutable\nproperties.</p>"},{"name":"Point","qualifiedName":"dart-math.Point","preview":"<p>A utility class for representing two-dimensional positions.</p>"},{"name":"Random","qualifiedName":"dart-math.Random","preview":"<p>A generator of random bool, int, or double values.</p>"},{"name":"Rectangle","qualifiedName":"dart-math.Rectangle","preview":"<p>A class for representing two-dimensional rectangles whose properties are\nimmutable.</p>"}],"typedef":{},"error":[]},"packageName":"","packageIntro":null}