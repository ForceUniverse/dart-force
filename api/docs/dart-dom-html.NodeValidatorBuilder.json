{"name":"NodeValidatorBuilder","qualifiedName":"dart-dom-html.NodeValidatorBuilder","comment":"<p>Class which helps construct standard node validation policies.</p>\n<p>By default this will not accept anything, but the 'allow*' functions can be\nused to expand what types of elements or attributes are allowed.</p>\n<p>All allow functions are additive- elements will be accepted if they are\naccepted by any specific rule.</p>\n<p>It is important to remember that sanitization is not just intended to prevent\ncross-site scripting attacks, but also to prevent information from being\ndisplayed in unexpected ways. For example something displaying basic\nformatted text may not expect <code>&lt;video&gt;</code> tags to appear. In this case an\nempty NodeValidatorBuilder with just <a>dart-dom-html.NodeValidatorBuilder.allowTextElements</a> might be\nappropriate.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-dom-html.NodeValidator"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-dom-html.NodeValidatorBuilder.NodeValidatorBuilder-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"common":{"name":"common","qualifiedName":"dart-dom-html.NodeValidatorBuilder.NodeValidatorBuilder-common","comment":"<p>Creates a new NodeValidatorBuilder which accepts common constructs.</p>\n<p>By default this will accept HTML5 elements and attributes with the default\n<a>dart-dom-html.UriPolicy</a> and templating elements.</p>\n<p>Notable syntax which is filtered:</p><ul><li>Only known-good HTML5 elements and attributes are allowed.</li><li>\n<p>All URLs must be same-origin, use <a>dart-dom-html.NodeValidatorBuilder.allowNavigation</a> and <a>dart-dom-html.NodeValidatorBuilder.allowImages</a> to\nspecify additional URI policies.</p></li><li>Inline-styles are not allowed.</li><li>Custom element tags are disallowed, use <a>dart-dom-html.NodeValidatorBuilder.allowCustomElement</a>.</li><li>Custom tags extensions are disallowed, use <a>dart-dom-html.NodeValidatorBuilder.allowTagExtension</a>.</li><li>SVG Elements are not allowed, use <a>dart-dom-html.NodeValidatorBuilder.allowSvg</a>.</li></ul>\n<p>For scenarios where the HTML should only contain formatted text\n<a>dart-dom-html.NodeValidatorBuilder.allowTextElements</a> is more appropriate.</p>\n<p>Use <a>dart-dom-html.NodeValidatorBuilder.allowSvg</a> to allow SVG elements.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"dart-dom-html.NodeValidatorBuilder.add","comment":"<p>Add an additional validator to the current list of validators.</p>\n<p>Elements and attributes will be accepted if they are accepted by any\nvalidators.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"validator":{"name":"validator","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.NodeValidator","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"allowCustomElement":{"name":"allowCustomElement","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowCustomElement","comment":"<p>Allow custom elements with the specified tag name and specified attributes.</p>\n<p>This will allow the elements as custom tags (such as &lt;x-foo>&lt;/x-foo>),\nbut will not allow tag extensions. Use <a>dart-dom-html.NodeValidatorBuilder.allowTagExtension</a> to allow\ntag extensions.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"tagName":{"name":"tagName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"uriPolicy":{"name":"uriPolicy","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.UriPolicy","inner":[]}],"value":null,"annotations":[]},"attributes":{"name":"attributes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"uriAttributes":{"name":"uriAttributes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"allowElement":{"name":"allowElement","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowElement","comment":"","commentFrom":"dart-dom-html.NodeValidatorBuilder.allowElement","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"tagName":{"name":"tagName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"uriPolicy":{"name":"uriPolicy","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.UriPolicy","inner":[]}],"value":null,"annotations":[]},"attributes":{"name":"attributes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"uriAttributes":{"name":"uriAttributes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"allowHtml5":{"name":"allowHtml5","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowHtml5","comment":"<p>Allow common safe HTML5 elements and attributes.</p>\n<p>This list is based off of the Caja whitelists at:\nhttps://code.google.com/p/google-caja/wiki/CajaWhitelists.</p>\n<p>Common things which are not allowed are script elements, style attributes\nand any script handlers.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"uriPolicy":{"name":"uriPolicy","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.UriPolicy","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"allowImages":{"name":"allowImages","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowImages","comment":"<p>Allows image elements.</p>\n<p>The UriPolicy can be used to restrict the locations the images may be\nloaded from. By default this will use the default <a>dart-dom-html.UriPolicy</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"uriPolicy":{"name":"uriPolicy","optional":true,"named":false,"default":false,"type":[{"outer":"dart-dom-html.UriPolicy","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"allowInlineStyles":{"name":"allowInlineStyles","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowInlineStyles","comment":"<p>Allow inline styles on elements.</p>\n<p>If <a>dart-dom-html.NodeValidatorBuilder.allowInlineStyles.tagName</a> is not specified then this allows inline styles on all\nelements. Otherwise tagName limits the styles to the specified elements.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"tagName":{"name":"tagName","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"allowNavigation":{"name":"allowNavigation","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowNavigation","comment":"<p>Allows navigation elements- Form and Anchor tags, along with common\nattributes.</p>\n<p>The UriPolicy can be used to restrict the locations the navigation elements\nare allowed to direct to. By default this will use the default <a>dart-dom-html.UriPolicy</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"uriPolicy":{"name":"uriPolicy","optional":true,"named":false,"default":false,"type":[{"outer":"dart-dom-html.UriPolicy","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"allowSvg":{"name":"allowSvg","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowSvg","comment":"<p>Allow SVG elements and attributes except for known bad ones.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"allowTagExtension":{"name":"allowTagExtension","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowTagExtension","comment":"<p>Allow custom tag extensions with the specified type name and specified\nattributes.</p>\n<p>This will allow tag extensions (such as &lt;div is=\"x-foo\">&lt;/div>),\nbut will not allow custom tags. Use <a>dart-dom-html.NodeValidatorBuilder.allowCustomElement</a> to allow\ncustom tags.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"tagName":{"name":"tagName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"baseName":{"name":"baseName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"uriPolicy":{"name":"uriPolicy","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.UriPolicy","inner":[]}],"value":null,"annotations":[]},"attributes":{"name":"attributes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"uriAttributes":{"name":"uriAttributes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"allowTemplating":{"name":"allowTemplating","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowTemplating","comment":"<p>Allow templating elements (such as &lt;template> and template-related\nattributes.</p>\n<p>This still requires other validators to allow regular attributes to be\nbound (such as <a>dart-dom-html.NodeValidatorBuilder.allowHtml5</a>).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"allowTextElements":{"name":"allowTextElements","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowTextElements","comment":"<p>Allow basic text elements.</p>\n<p>This allows a subset of HTML5 elements, specifically just these tags and\nno attributes.</p><ul><li>B</li><li>BLOCKQUOTE</li><li>BR</li><li>EM</li><li>H1</li><li>H2</li><li>H3</li><li>H4</li><li>H5</li><li>H6</li><li>HR</li><li>I</li><li>LI</li><li>OL</li><li>P</li><li>SPAN</li><li>UL</li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"allowsAttribute":{"name":"allowsAttribute","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowsAttribute","comment":"<p>Returns true if the attribute is allowed.</p>\n<p>The attributeName parameter will always be in lowercase.</p>\n<p>See <a>dart-dom-html.NodeValidatorBuilder.allowsElement</a> for format of tagName.</p>","commentFrom":"dart-dom-html.NodeValidator.allowsAttribute","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]},"attributeName":{"name":"attributeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"allowsElement":{"name":"allowsElement","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowsElement","comment":"<p>Returns true if the tagName is an accepted type.</p>","commentFrom":"dart-dom-html.NodeValidator.allowsElement","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.NodeValidatorBuilder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.NodeValidatorBuilder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.NodeValidatorBuilder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.NodeValidatorBuilder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.NodeValidatorBuilder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.NodeValidatorBuilder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"allowsAttribute":{"name":"allowsAttribute","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowsAttribute","comment":"<p>Returns true if the attribute is allowed.</p>\n<p>The attributeName parameter will always be in lowercase.</p>\n<p>See <a>dart-dom-html.NodeValidatorBuilder.allowsElement</a> for format of tagName.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.NodeValidator.allowsAttribute","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]},"attributeName":{"name":"attributeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"allowsElement":{"name":"allowsElement","qualifiedName":"dart-dom-html.NodeValidatorBuilder.allowsElement","comment":"<p>Returns true if the tagName is an accepted type.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.NodeValidator.allowsElement","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.NodeValidatorBuilder.noSuchMethod","comment":"<p><a>dart-dom-html.NodeValidatorBuilder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.NodeValidatorBuilder.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.NodeValidatorBuilder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.NodeValidatorBuilder.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.NodeValidatorBuilder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}