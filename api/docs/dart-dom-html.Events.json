{"name":"Events","qualifiedName":"dart-dom-html.Events","comment":"<p>Base class that supports listening for and dispatching browser events.</p>\n<p>Normally events are accessed via the Stream getter:</p>\n<pre><code>element.onMouseOver.listen((e) =&gt; print('Mouse over!'));\n</code></pre>\n<p>To access bubbling events which are declared on one element, but may bubble\nup to another element type (common for MediaElement events):</p>\n<pre><code>MediaElement.pauseEvent.forTarget(document.body).listen(...);\n</code></pre>\n<p>To useCapture on events:</p>\n<pre><code>Element.keyDownEvent.forTarget(element, useCapture: true).listen(...);\n</code></pre>\n<p>Custom events can be declared as:</p>\n<p>   class DataGenerator {</p>\n<pre><code> static EventStreamProvider&lt;Event&gt; dataEvent =\n     new EventStreamProvider('data');\n</code></pre>\n<p>   }</p>\n<p>Then listeners should access the event with:</p>\n<pre><code>DataGenerator.dataEvent.forTarget(element).listen(...);\n</code></pre>\n<p>Custom events can also be accessed as:</p>\n<pre><code>element.on['some_event'].listen(...);\n</code></pre>\n<p>This approach is generally discouraged as it loses the event typing and\nsome DOM events may have multiple platform-dependent event names under the\ncovers. By using the standard Stream getters you will get the platform\nspecific event name automatically.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":["dart-dom-html.ElementEvents"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-dom-html.Events.Events-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_ptr":{"name":"_ptr","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventTarget","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"dart-dom-html.Events.[]","comment":"","commentFrom":"dart-dom-html.Events.[]","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.Events.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.Events.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.Events.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.Events.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.Events.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.Events.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.Events.noSuchMethod","comment":"<p><a>dart-dom-html.Events.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.Events.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.Events.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.Events.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.Events.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}