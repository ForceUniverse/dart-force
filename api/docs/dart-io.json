{"name":"dart-io","qualifiedName":"dart-io","comment":"<p>File, socket, HTTP, and other I/O support for server applications.</p>\n<p>The I/O library is used for Dart server applications,\nwhich run on a stand-alone Dart VM from the command line.\n<em>This library does not work in browser-based applications.</em></p>\n<p>This library allows you to work with files, directories,\nsockets, processes, HTTP servers and clients, and more.</p>\n<p>To use this library in your code:</p>\n<pre><code>import 'dart:io';\n</code></pre>\n<p><em>Note:</em> Many operations related to input and output are asynchronous\nand are handled using <a>dart-async.Future</a>s or <a>dart-async.Stream</a>s, both of which\nare defined in the <code>dart:async</code> library.</p>\n<h2>File, Directory, and Link</h2>\n<p>An instance of <a>dart-io.File</a>, <a>dart-io.Directory</a>, or <a>dart-io.Link</a> represents a file,\ndirectory, or link, respectively, in the native file system.</p>\n<p>You can manipulate the file system through objects of these types.\nFor example, you can rename a file or directory:</p>\n<pre><code>File myFile = new File('myFile.txt');\nmyFile.rename('yourFile.txt').then((_) =&gt; print('file renamed'));\n</code></pre>\n<p>Many methods provided by the File, Directory, and Link classes\nrun asynchronously and return a Future.</p>\n<h2>FileSystemEntity</h2>\n<p>File, Directory, and Link all extend <a>dart-io.FileSystemEntity</a>.\nIn addition to being the superclass for these classes,\nFileSystemEntity has a number of static methods for working with paths.</p>\n<p>To get information about a path,\nyou can use the FileSystemEntity static methods\nsuch as 'isDirectory', 'isFile', and 'exists'.\nBecause file system access involves I/O, these methods\nare asynchronous and return a Future.</p>\n<pre><code>FileSystemEntity.isDirectory(myPath).then((isDir) {\n  if (isDir) {\n    print('$myPath is a directory');\n  } else {\n    print('$myPath is not a directory');\n  }\n});\n</code></pre>\n<h2>HttpServer and HttpClient</h2>\n<p>The classes <a>dart-io.HttpServer</a> and <a>dart-io.HttpClient</a>\nprovide HTTP server and HTTP client functionality.</p>\n<p>The <a>dart-io.HttpServer</a> class provides the basic functionality for\nimplementing an HTTP server.\nFor some higher-level building-blocks, we recommend that you try\nthe <a href=\"https://pub.dartlang.org/packages/http_server\">http_server</a>\npub package, which contains\na set of high-level classes that, together with the <a>dart-io.HttpServer</a> class\nin this library, make it easier to implement HTTP servers.</p>\n<h2>Process</h2>\n<p>The <a>dart-io.Process</a> class provides a way to run a process on\nthe native machine.\nFor example, the following code spawns a process that recursively lists\nthe files under <code>web</code>.</p>\n<pre><code>Process.start('ls', ['-R', 'web']).then((process) {\n  stdout.addStream(process.stdout);\n  stderr.addStream(process.stderr);\n  process.exitCode.then(print);\n});\n</code></pre>\n<p>Using <code>start()</code> returns a Future, which completes with a <a>dart-io.Process</a> object\nwhen the process has started. This <a>dart-io.Process</a> object allows you to interact\nwith the process while it is running. Using <code>run()</code> returns a Future, which\ncompletes with a <a>dart-io.ProcessResult</a> object when the spawned process has\nterminated. This <a>dart-io.ProcessResult</a> object collects the output and exit code\nfrom the process.</p>\n<p>When using <code>start()</code>,\nyou need to read all data coming on the stdout and stderr streams otherwise\nthe system resources will not be freed.</p>\n<h2>WebSocket</h2>\n<p>The <a>dart-io.WebSocket</a> class provides support for the web socket protocol. This\nallows full-duplex communications between client and server applications.\nUse the WebSocket class in the <code>dart:html</code> library for web clients.</p>\n<p>A web socket server uses a normal HTTP server for accepting web socket\nconnections. The initial handshake is a HTTP request which is then upgraded to a\nweb socket connection.\nThe server upgrades the request using <a>dart-io.WebSocketTransformer</a>\nand listens for the data on the returned web socket.\nFor example, here's a mini server that listens for 'ws' data\non a WebSocket:</p>\n<pre><code>runZoned(() {\n  HttpServer.bind('127.0.0.1', 4040).then((server) {\n    server.listen((HttpRequest req) {\n      if (req.uri.path == '/ws') {\n        WebSocketTransformer.upgrade(req).then((socket) {\n          socket.listen(handleMsg);\n        });\n      }\n    });\n  });\n},\nonError: (e) =&gt; print(\"An error occurred.\"));\n</code></pre>\n<p>The client connects to the WebSocket using the <code>connect()</code> method\nand a URI that uses the Web Socket protocol.\nThe the client can write to the WebSocket with the <code>add()</code> method.\nFor example,</p>\n<pre><code>WebSocket.connect('ws://127.0.0.1:4040/ws').then((socket) {\n  socket.add('Hello, World!');\n});\n</code></pre>\n<p>Check out the\n<a href=\"https://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/samples/dartiverse_search\">dartiverse_search</a>\nsample for a client/server pair that uses\nWebSockets to communicate.</p>\n<h2>Socket and ServerSocket</h2>\n<p>Clients and servers use <a>dart-io.Socket</a>s to communicate using the TCP protocol.\nUse <a>dart-io.ServerSocket</a> on the server side and <a>dart-io.Socket</a> on the client.\nThe server creates a listening socket using the <code>bind()</code> method and\nthen listens for incoming connections on the socket. For example:</p>\n<pre><code>ServerSocket.bind('127.0.0.1', 4041)\n  .then((serverSocket) {\n    serverSocket.listen((socket) {\n      socket.transform(UTF8.decoder).listen(print);\n    });\n  });\n</code></pre>\n<p>A client connects a Socket using the <code>connect()</code> method,\nwhich returns a Future.\nUsing <code>write()</code>, <code>writeln()</code>, or <code>writeAll()</code> are the easiest ways to\nsend data over the socket.\nFor example:</p>\n<pre><code>Socket.connect('127.0.0.1', 4041).then((socket) {\n  socket.write('Hello, World!');\n});\n</code></pre>\n<p>Besides <a>dart-io.Socket</a> and <a>dart-io.ServerSocket</a>, the <a>dart-io.RawSocket</a> and\n<a>dart-io.RawServerSocket</a> classes are available for lower-level access\nto async socket IO.</p>\n<h2>Standard output, error, and input streams</h2>\n<p>This library provides the standard output, error, and input\nstreams, named 'stdout', 'stderr', and 'stdin', respectively.</p>\n<p>The stdout and stderr streams are both <a>dart-io.IOSink</a>s and have the same set\nof methods and properties.</p>\n<p>To write a string to 'stdout':</p>\n<pre><code>stdout.writeln('Hello, World!');\n</code></pre>\n<p>To write a list of objects to 'stderr':</p>\n<pre><code>stderr.writeAll([ 'That ', 'is ', 'an ', 'error.', '\\n']);\n</code></pre>\n<p>The standard input stream is a true <a>dart-async.Stream</a>, so it inherits\nproperties and methods from the Stream class.</p>\n<p>To read text synchronously from the command line\n(the program blocks waiting for user to type information):</p>\n<pre><code> String inputText = stdin.readLineSync();\n</code></pre>\n<h2>Other resources</h2>\n<p>For an introduction to I/O in Dart, see the\n<a href=\"https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartio---file-and-socket-io-for-command-line-apps\">dart:io section of the library tour</a>.</p>\n<p>To learn more about I/O in Dart, refer to the\n<a href=\"https://www.dartlang.org/docs/tutorials/io/\">tutorial about writing command-line apps</a>.</p>","variables":{"APPEND":{"name":"APPEND","qualifiedName":"dart-io.APPEND","comment":"<p>The mode for opening a file for reading and writing to the\nend of it. The file is created if it does not already exist.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"GZIP":{"name":"GZIP","qualifiedName":"dart-io.GZIP","comment":"<p>An instance of the default implementation of the <a>dart-io.GZipCodec</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-io.GZipCodec","inner":[]}],"annotations":[]},"READ":{"name":"READ","qualifiedName":"dart-io.READ","comment":"<p>The mode for opening a file only for reading.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"SYSTEM_ENCODING":{"name":"SYSTEM_ENCODING","qualifiedName":"dart-io.SYSTEM_ENCODING","comment":"<p>The current system encoding.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-io.SystemEncoding","inner":[]}],"annotations":[]},"WRITE":{"name":"WRITE","qualifiedName":"dart-io.WRITE","comment":"<p>The mode for opening a file for reading and writing. The file is\noverwritten if it already exists. The file is created if it does not\nalready exist.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"ZLIB":{"name":"ZLIB","qualifiedName":"dart-io.ZLIB","comment":"<p>An instance of the default implementation of the <a>dart-io.ZLibCodec</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-io.ZLibCodec","inner":[]}],"annotations":[]}},"functions":{"setters":{"exitCode=":{"name":"exitCode=","qualifiedName":"dart-io.exitCode=","comment":"<p>Set the global exit code for the Dart VM.</p>\n<p>The exit code is global for the Dart VM and the last assignment to\nexitCode from any isolate determines the exit code of the Dart VM\non normal termination.</p>\n<p>Default value is <code>0</code>.</p>\n<p>See <a>dart-io.exit</a> for more information on how to chose a value for the\nexit code.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"code":{"name":"code","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"exitCode":{"name":"exitCode","qualifiedName":"dart-io.exitCode","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"pid":{"name":"pid","qualifiedName":"dart-io.pid","comment":"<p>Returns the PID of the current process.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"stderr":{"name":"stderr","qualifiedName":"dart-io.stderr","comment":"<p>The standard output stream of errors written by this program.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.IOSink","inner":[]}],"parameters":{},"annotations":[]},"stdin":{"name":"stdin","qualifiedName":"dart-io.stdin","comment":"<p>The standard input stream of data read by this program.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.Stdin","inner":[]}],"parameters":{},"annotations":[]},"stdout":{"name":"stdout","qualifiedName":"dart-io.stdout","comment":"<p>The standard output stream of data written by this program.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.Stdout","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"exit":{"name":"exit","qualifiedName":"dart-io.exit","comment":"<p>Exit the Dart VM process immediately with the given exit code.</p>\n<p>This does not wait for any asynchronous operations to terminate. Using\n<a>dart-io.exit</a> is therefore very likely to lose data.</p>\n<p>The handling of exit codes is platform specific.</p>\n<p>On Linux and Mac OS an exit code for normal termination will always\nbe in the range 0..255. If an exit code outside this range is\nset the actual exit code will be the lower 8 bits masked off and\ntreated as an unsigned value. E.g. using an exit code of -1 will\nresult in an actual exit code of 255 being reported.</p>\n<p>On Windows the exit code can be set to any 32-bit value. However\nsome of these values are reserved for reporting system errors like\ncrashes.</p>\n<p>Besides this the Dart executable itself uses an exit code of <code>254</code>\nfor reporting compile time errors and an exit code of <code>255</code> for\nreporting runtime error (unhandled exception).</p>\n<p>Due to these facts it is recommended to only use exit codes in the\nrange 0..127 for communicating the result of running a Dart\nprogram to the surrounding environment. This will avoid any\ncross-platform issues.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"code":{"name":"code","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sleep":{"name":"sleep","qualifiedName":"dart-io.sleep","comment":"<p>Sleep for the duration specified in <a>dart-io.sleep.duration</a>.</p>\n<p>Use this with care, as no asynchronous operations can be processed\nin a isolate while it is blocked in a <a>dart-io.sleep</a> call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"stdioType":{"name":"stdioType","qualifiedName":"dart-io.stdioType","comment":"<p>For a stream, returns whether it is attached to a file, pipe, terminal, or\nsomething else.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.StdioType","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"BytesBuilder","qualifiedName":"dart-io.BytesBuilder","preview":"<p>Builds a list of bytes, allowing bytes and lists of bytes to be added at the\nend.</p>"},{"name":"ContentType","qualifiedName":"dart-io.ContentType","preview":"<p>Representation of a content type. An instance of <a>dart-io.ContentType</a> is\nimmutable.</p>"},{"name":"Cookie","qualifiedName":"dart-io.Cookie","preview":"<p>Representation of a cookie. For cookies received by the server as\nCookie header values only <code>name</code> and <code>value</code> fields will be\nset. When building a cookie for the 'set-cookie' header in the server\nand when receiving cookies in the client as 'set-cookie' headers all\nfields can be used.</p>"},{"name":"Datagram","qualifiedName":"dart-io.Datagram","preview":"<p>Datagram package. Data send to and received from datagram sockets\ncontains the internet address and port of the destination or source\ntogeter with the data.</p>"},{"name":"DetachedSocket","qualifiedName":"dart-io.DetachedSocket","preview":"<p>When detaching a socket from either the <code>HttpServer</code> or the\n<code>HttpClient</code> due to a HTTP connection upgrade there might be\nunparsed data already read from the socket. This unparsed data\ntogether with the detached socket is returned in an instance of\nthis class.</p>"},{"name":"Directory","qualifiedName":"dart-io.Directory","preview":"<p>A reference to a directory (or <em>folder</em>) on the file system.</p>"},{"name":"File","qualifiedName":"dart-io.File","preview":"<p>A reference to a file on the file system.</p>"},{"name":"FileMode","qualifiedName":"dart-io.FileMode","preview":"<p>The modes in which a File can be opened.</p>"},{"name":"FileStat","qualifiedName":"dart-io.FileStat","preview":"<p>A FileStat object represents the result of calling the POSIX stat() function\non a file system object.  It is an immutable object, representing the\nsnapshotted values returned by the stat() call.</p>"},{"name":"FileSystemCreateEvent","qualifiedName":"dart-io.FileSystemCreateEvent","preview":"<p>File system event for newly created file system objects.</p>"},{"name":"FileSystemDeleteEvent","qualifiedName":"dart-io.FileSystemDeleteEvent","preview":"<p>File system event for deletion of file system objects.</p>"},{"name":"FileSystemEntity","qualifiedName":"dart-io.FileSystemEntity","preview":"<p>The common super class for <a>dart-io.File</a>, <a>dart-io.Directory</a>, and <a>dart-io.Link</a> objects.</p>"},{"name":"FileSystemEntityType","qualifiedName":"dart-io.FileSystemEntityType","preview":"<p>The type of an entity on the file system, such as a file, directory, or link.</p>"},{"name":"FileSystemEvent","qualifiedName":"dart-io.FileSystemEvent","preview":"<p>Base event class emitted by <a>dart-io.FileSystemEntity.watch</a>.</p>"},{"name":"FileSystemModifyEvent","qualifiedName":"dart-io.FileSystemModifyEvent","preview":"<p>File system event for modifications of file system objects.</p>"},{"name":"FileSystemMoveEvent","qualifiedName":"dart-io.FileSystemMoveEvent","preview":"<p>File system event for moving of file system objects.</p>"},{"name":"GZipCodec","qualifiedName":"dart-io.GZipCodec","preview":"<p>The <a>dart-io.GZipCodec</a> encodes raw bytes to GZip compressed bytes and decodes GZip\ncompressed bytes to raw bytes.</p>"},{"name":"HeaderValue","qualifiedName":"dart-io.HeaderValue","preview":"<p>Representation of a header value in the form:</p>"},{"name":"HttpClient","qualifiedName":"dart-io.HttpClient","preview":"<p>A client that receives content, such as web pages, from\na server using the HTTP protocol.</p>"},{"name":"HttpClientBasicCredentials","qualifiedName":"dart-io.HttpClientBasicCredentials","preview":"<p>Represents credentials for basic authentication.</p>"},{"name":"HttpClientCredentials","qualifiedName":"dart-io.HttpClientCredentials"},{"name":"HttpClientDigestCredentials","qualifiedName":"dart-io.HttpClientDigestCredentials","preview":"<p>Represents credentials for digest authentication. Digest\nauthentication is only supported for servers using the MD5\nalgorithm and quality of protection (qop) of either \"none\" or\n\"auth\".</p>"},{"name":"HttpClientRequest","qualifiedName":"dart-io.HttpClientRequest","preview":"<p>HTTP request for a client connection.</p>"},{"name":"HttpClientResponse","qualifiedName":"dart-io.HttpClientResponse","preview":"<p>HTTP response for a client connection.</p>"},{"name":"HttpConnectionInfo","qualifiedName":"dart-io.HttpConnectionInfo","preview":"<p>Information about an <a>dart-io.HttpRequest</a>, <a>dart-io.HttpResponse</a>, <a>dart-io.HttpClientRequest</a>, or\n<a>dart-io.HttpClientResponse</a> connection.</p>"},{"name":"HttpConnectionsInfo","qualifiedName":"dart-io.HttpConnectionsInfo","preview":"<p>Summary statistics about an <a>dart-io.HttpServer</a>s current socket connections.</p>"},{"name":"HttpDate","qualifiedName":"dart-io.HttpDate","preview":"<p>Utility functions for working with dates with HTTP specific date\nformats.</p>"},{"name":"HttpHeaders","qualifiedName":"dart-io.HttpHeaders","preview":"<p>Headers for HTTP requests and responses.</p>"},{"name":"HttpRequest","qualifiedName":"dart-io.HttpRequest","preview":"<p>A server-side object\nthat contains the content of and information about an HTTP request.</p>"},{"name":"HttpResponse","qualifiedName":"dart-io.HttpResponse","preview":"<p>An HTTP response, which returns the headers and data\nfrom the server to the client in response to an HTTP request.</p>"},{"name":"HttpServer","qualifiedName":"dart-io.HttpServer","preview":"<p>A server that delivers content, such as web pages, using the HTTP protocol.</p>"},{"name":"HttpSession","qualifiedName":"dart-io.HttpSession"},{"name":"HttpStatus","qualifiedName":"dart-io.HttpStatus","preview":"<p>HTTP status codes.</p>"},{"name":"IOSink","qualifiedName":"dart-io.IOSink","preview":"<p>Helper class to wrap a StreamConsumer&lt;<a>dart-core</a>&lt;<a>dart-core</a>>> and provide\nutility functions for writing to the StreamConsumer directly. The\n<a>dart-io.IOSink</a> buffers the input given by all <a>dart-core.StringSink</a> methods and will delay\nan <a>dart-io.IOSink.addStream</a> until the buffer is flushed.</p>"},{"name":"InternetAddress","qualifiedName":"dart-io.InternetAddress","preview":"<p>An internet address.</p>"},{"name":"InternetAddressType","qualifiedName":"dart-io.InternetAddressType","preview":"<p><a>dart-io.InternetAddressType</a> is the type an <a>dart-io.InternetAddress</a>. Currently,\nIP version 4 (IPv4) and IP version 6 (IPv6) are supported.</p>"},{"name":"Link","qualifiedName":"dart-io.Link","preview":"<p><a>dart-io.Link</a> objects are references to filesystem links.</p>"},{"name":"NetworkInterface","qualifiedName":"dart-io.NetworkInterface","preview":"<p>A <a>dart-io.NetworkInterface</a> represent an active network interface on the current\nsystem. It contains a list of <a>dart-io.InternetAddress</a>s, that's bound to the\ninterface.</p>"},{"name":"OSError","qualifiedName":"dart-io.OSError","preview":"<p>An <a>dart-io.OSError</a> object holds information about an error from the\noperating system.</p>"},{"name":"Platform","qualifiedName":"dart-io.Platform","preview":"<p>Information about the environment in which the current program is running.</p>"},{"name":"Process","qualifiedName":"dart-io.Process","preview":"<p>The means to execute a program.</p>"},{"name":"ProcessResult","qualifiedName":"dart-io.ProcessResult","preview":"<p><a>dart-io.ProcessResult</a> represents the result of running a non-interactive\nprocess started with <code>Process.run</code>.</p>"},{"name":"ProcessSignal","qualifiedName":"dart-io.ProcessSignal","preview":"<p>On Posix systems, <a>dart-io.ProcessSignal</a> is used to send a specific signal\nto a child process, see <code>Process.kill</code>.</p>"},{"name":"RandomAccessFile","qualifiedName":"dart-io.RandomAccessFile","preview":"<p><a>dart-io.RandomAccessFile</a> provides random access to the data in a\nfile. <a>dart-io.RandomAccessFile</a> objects are obtained by calling the\n<code>open</code> method on a <a>dart-io.File</a> object.</p>"},{"name":"RawDatagramSocket","qualifiedName":"dart-io.RawDatagramSocket","preview":"<p>The <a>dart-io.RawDatagramSocket</a> is a low-level interface to an UDP socket,\nexposing the raw events signaled by the system. It's a <a>dart-async.Stream</a> of\n<a>dart-io.RawSocketEvent</a>s.</p>"},{"name":"RawSecureServerSocket","qualifiedName":"dart-io.RawSecureServerSocket","preview":"<p>The RawSecureServerSocket is a server socket, providing a stream of low-level\n<a>dart-io.RawSecureSocket</a>s.</p>"},{"name":"RawSecureSocket","qualifiedName":"dart-io.RawSecureSocket","preview":"<p>RawSecureSocket provides a secure (SSL or TLS) network connection.\nClient connections to a server are provided by calling\nRawSecureSocket.connect.  A secure server, created with\nRawSecureServerSocket, also returns RawSecureSocket objects representing\nthe server end of a secure connection.\nThe certificate provided by the server is checked\nusing the certificate database provided in SecureSocket.initialize, and/or\nthe default built-in root certificates.</p>"},{"name":"RawServerSocket","qualifiedName":"dart-io.RawServerSocket","preview":"<p>A <a>dart-io.RawServerSocket</a> represents a listening socket, and provides a\nstream of low-level <a>dart-io.RawSocket</a> objects, one for each connection\nmade to the listening socket.</p>"},{"name":"RawServerSocketReference","qualifiedName":"dart-io.RawServerSocketReference","preview":"<p>A <a>dart-io.RawServerSocketReference</a>.</p>"},{"name":"RawSocket","qualifiedName":"dart-io.RawSocket","preview":"<p>The <a>dart-io.RawSocket</a> is a low-level interface to a socket, exposing the raw\nevents signaled by the system. It's a <a>dart-async.Stream</a> of <a>dart-io.RawSocketEvent</a>s.</p>"},{"name":"RawSocketEvent","qualifiedName":"dart-io.RawSocketEvent","preview":"<p>Events for the <a>dart-io.RawSocket</a>.</p>"},{"name":"RedirectInfo","qualifiedName":"dart-io.RedirectInfo","preview":"<p>Redirect information.</p>"},{"name":"SecureServerSocket","qualifiedName":"dart-io.SecureServerSocket","preview":"<p>The <a>dart-io.SecureServerSocket</a> is a server socket, providing a stream of high-level\n<a>dart-io.Socket</a>s.</p>"},{"name":"SecureSocket","qualifiedName":"dart-io.SecureSocket","preview":"<p>A high-level class for communicating securely over a TCP socket, using\nTLS and SSL. The <a>dart-io.SecureSocket</a> exposes both a <a>dart-async.Stream</a> and an\n<a>dart-io.IOSink</a> interface, making it ideal for using together with\nother <a>dart-async.Stream</a>s.</p>"},{"name":"ServerSocket","qualifiedName":"dart-io.ServerSocket","preview":"<p>A <a>dart-io.ServerSocket</a> represents a listening socket, and provides a\nstream of <a>dart-io.Socket</a> objects, one for each connection made to the\nlistening socket.</p>"},{"name":"ServerSocketReference","qualifiedName":"dart-io.ServerSocketReference","preview":"<p>A <a>dart-io.ServerSocketReference</a>.</p>"},{"name":"Socket","qualifiedName":"dart-io.Socket","preview":"<p>A high-level class for communicating over a TCP socket.</p>"},{"name":"SocketDirection","qualifiedName":"dart-io.SocketDirection","preview":"<p>The <a>dart-io.SocketDirection</a> is used as a parameter to Socket.close and\n<a>dart-io.RawSocket.close</a> to close a socket in the specified direction(s).</p>"},{"name":"SocketOption","qualifiedName":"dart-io.SocketOption","preview":"<p>The <a>dart-io.SocketOption</a> is used as a parameter to <a>dart-io.Socket.setOption</a> and\n<a>dart-io.RawSocket.setOption</a> to set customize the behaviour of the underlying\nsocket.</p>"},{"name":"Stdin","qualifiedName":"dart-io.Stdin","preview":"<p><a>dart-io.Stdin</a> allows both synchronous and asynchronous reads from the standard\ninput stream.</p>"},{"name":"StdioType","qualifiedName":"dart-io.StdioType","preview":"<p>The type of object a standard IO stream is attached to.</p>"},{"name":"Stdout","qualifiedName":"dart-io.Stdout","preview":"<p><a>dart-io.Stdout</a> exposes methods to query the terminal for properties.</p>"},{"name":"SystemEncoding","qualifiedName":"dart-io.SystemEncoding","preview":"<p>The system encoding is the current code page on Windows and UTF-8 on\nLinux and Mac.</p>"},{"name":"WebSocket","qualifiedName":"dart-io.WebSocket","preview":"<p>A two-way HTTP communication object for client or server applications.</p>"},{"name":"WebSocketStatus","qualifiedName":"dart-io.WebSocketStatus","preview":"<p>Web socket status codes used when closing a web socket connection.</p>"},{"name":"WebSocketTransformer","qualifiedName":"dart-io.WebSocketTransformer","preview":"<p>The <a>dart-io.WebSocketTransformer</a> provides the ability to upgrade a\n<a>dart-io.HttpRequest</a> to a <a>dart-io.WebSocket</a> connection. It supports both\nupgrading a single <a>dart-io.HttpRequest</a> and upgrading a stream of\n<a>dart-io.HttpRequest</a>s.</p>"},{"name":"X509Certificate","qualifiedName":"dart-io.X509Certificate","preview":"<p>X509Certificate represents an SSL certificate, with accessors to\nget the fields of the certificate.</p>"},{"name":"ZLibCodec","qualifiedName":"dart-io.ZLibCodec","preview":"<p>The <a>dart-io.ZLibCodec</a> encodes raw bytes to ZLib compressed bytes and decodes ZLib\ncompressed bytes to raw bytes.</p>"},{"name":"ZLibDecoder","qualifiedName":"dart-io.ZLibDecoder","preview":"<p>The <a>dart-io.ZLibDecoder</a> is used by <a>dart-io.ZLibCodec</a> and <a>dart-io.GZipCodec</a> to decompress data.</p>"},{"name":"ZLibEncoder","qualifiedName":"dart-io.ZLibEncoder","preview":"<p>The <a>dart-io.ZLibEncoder</a> encoder is used by <a>dart-io.ZLibCodec</a> and <a>dart-io.GZipCodec</a> to compress\ndata.</p>"},{"name":"ZLibOption","qualifiedName":"dart-io.ZLibOption","preview":"<p>Exposes ZLib options for input parameters.</p>"}],"typedef":{},"error":[{"name":"CertificateException","qualifiedName":"dart-io.CertificateException","preview":"<p>An exception that happens in the handshake phase of establishing\na secure network connection, when looking up or verifying a\ncertificate.</p>"},{"name":"FileSystemException","qualifiedName":"dart-io.FileSystemException","preview":"<p>Exception thrown when a file operation fails.</p>"},{"name":"HandshakeException","qualifiedName":"dart-io.HandshakeException","preview":"<p>An exception that happens in the handshake phase of establishing\na secure network connection.</p>"},{"name":"HttpException","qualifiedName":"dart-io.HttpException"},{"name":"IOException","qualifiedName":"dart-io.IOException","preview":"<p>Base class for all IO related exceptions.</p>"},{"name":"ProcessException","qualifiedName":"dart-io.ProcessException"},{"name":"RedirectException","qualifiedName":"dart-io.RedirectException"},{"name":"SignalException","qualifiedName":"dart-io.SignalException"},{"name":"SocketException","qualifiedName":"dart-io.SocketException"},{"name":"StdoutException","qualifiedName":"dart-io.StdoutException"},{"name":"TlsException","qualifiedName":"dart-io.TlsException","preview":"<p>A secure networking exception caused by a failure in the\n TLS/SSL protocol.</p>"},{"name":"WebSocketException","qualifiedName":"dart-io.WebSocketException"}]},"packageName":"","packageIntro":null}