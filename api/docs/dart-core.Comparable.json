{"name":"Comparable","qualifiedName":"dart-core.Comparable","comment":"<p>Interface used by types that have an intrinsic ordering.</p>\n<p>The <a>dart-core.Comparable.compareTo</a> operation defines a total ordering of objects,\nwhich can be used for ordering and sorting.</p>\n<p>The <a>dart-core.Comparable</a> interface should be used for the natural ordering of a type.\nIf a type can be ordered in more than one way,\nand none of them is the obvious natural ordering,\nthen it might be better not to use the <a>dart-core.Comparable</a> interface,\nand to provide separate <a>dart-core.Comparator</a>s instead.</p>\n<p>It is recommended that the order of a <a>dart-core.Comparable</a> agrees\nwith its operator <a>dart-core.Object.==</a> equality (<code>a.compareTo(b) == 0</code> iff <code>a == b</code>),\nbut this is not a requirement.\nFor example, <a>dart-core.double</a> and <a>dart-core.DateTime</a> have <code>compareTo</code> methods\nthat do not agree with operator <a>dart-core.Object.==</a>.\nFor doubles the <a>dart-core.Comparable.compareTo</a> method is more precise than the equality,\nand for <a>dart-core.DateTime</a> it is less precise.</p>\n<p>Examples:</p>\n<pre><code> (0.0).compareTo(-0.0);  // =&gt; 1\n 0.0 == -0.0;            // =&gt; true\n var dt = new DateTime.now();\n var dt2 = dt.toUtc();\n dt == dt2;              // =&gt; false\n dt.compareTo(dt2);      // =&gt; 0\n</code></pre>\n<p>The <a>dart-core.Comparable</a> interface does not imply the existence\nof the comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code>.\nThese should only be defined\nif the ordering is a less-than/greater-than ordering,\nthat is, an ordering where you would naturally\nuse the words \"less than\" about the order of two elements.</p>\n<p>If the equality operator and <a>dart-core.Comparable.compareTo</a> disagree,\nthe comparison operators should follow the equality operator,\nand will likely also disagree with <a>dart-core.Comparable.compareTo</a>.\nOtherwise they should match the <a>dart-core.Comparable.compareTo</a> method,\nso that <code>a &lt; b</code> iff <code>a.compareTo(b) &lt; 0</code>.</p>\n<p>The <a>dart-core.double</a> class defines comparison operators\nthat are compatible with equality.\nThe operators differ from <code>double.compareTo</code> on -0.0 and NaN.</p>\n<p>The <a>dart-core.DateTime</a> class has no comparison operators, instead it has the more\nprecisely named <a>dart-core.DateTime.isBefore</a> and <a>dart-core.DateTime.isAfter</a>.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"compare":{"name":"compare","qualifiedName":"dart-core.Comparable.compare","comment":"<p>A <a>dart-core.Comparator</a> that compares one comparable to another.</p>\n<p>It returns the result of <code>a.compareTo(b)</code>.</p>\n<p>This utility function is used as the default comparator\nfor ordering collections, for example in the <a>dart-core.List</a> sort function.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"dart-core.Comparable.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>dart-core.Comparable.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>dart-core.Comparable.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>dart-core.Comparable.compareTo.other</a>,\nand zero if <code>this</code> and <a>dart-core.Comparable.compareTo.other</a> are ordered together.</p>\n<p>The <a>dart-core.Comparable.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Comparable.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Comparable.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Comparable.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Comparable.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Comparable.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Comparable.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Comparable.noSuchMethod","comment":"<p><a>dart-core.Comparable.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Comparable.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Comparable.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Comparable.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Comparable.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}