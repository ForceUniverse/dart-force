{"name":"FontFaceSet","qualifiedName":"dart-dom-html.FontFaceSet","comment":"","isAbstract":false,"superclass":"dart-dom-html.EventTarget","implements":[],"subclass":[],"variables":{"size":{"name":"size","qualifiedName":"dart-dom-html.FontFaceSet.size","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.size'"]},{"name":"metadata.Experimental","parameters":[]}]},"status":{"name":"status","qualifiedName":"dart-dom-html.FontFaceSet.status","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.status'"]},{"name":"metadata.Experimental","parameters":[]}]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"dart-dom-html.FontFaceSet.add","comment":"","commentFrom":"dart-dom-html.FontFaceSet.add","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"fontFace":{"name":"fontFace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.FontFace","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.add'"]},{"name":"metadata.Experimental","parameters":[]}]},"check":{"name":"check","qualifiedName":"dart-dom-html.FontFaceSet.check","comment":"","commentFrom":"dart-dom-html.FontFaceSet.check","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"font":{"name":"font","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.check'"]},{"name":"metadata.Experimental","parameters":[]}]},"clear":{"name":"clear","qualifiedName":"dart-dom-html.FontFaceSet.clear","comment":"","commentFrom":"dart-dom-html.FontFaceSet.clear","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.clear'"]},{"name":"metadata.Experimental","parameters":[]}]},"delete":{"name":"delete","qualifiedName":"dart-dom-html.FontFaceSet.delete","comment":"","commentFrom":"dart-dom-html.FontFaceSet.delete","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"fontFace":{"name":"fontFace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.FontFace","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.delete'"]},{"name":"metadata.Experimental","parameters":[]}]},"forEach":{"name":"forEach","qualifiedName":"dart-dom-html.FontFaceSet.forEach","comment":"","commentFrom":"dart-dom-html.FontFaceSet.forEach","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.FontFaceSetForEachCallback","inner":[]}],"value":null,"annotations":[]},"thisArg":{"name":"thisArg","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.forEach'"]},{"name":"metadata.Experimental","parameters":[]}]},"has":{"name":"has","qualifiedName":"dart-dom-html.FontFaceSet.has","comment":"","commentFrom":"dart-dom-html.FontFaceSet.has","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"fontFace":{"name":"fontFace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.FontFace","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet.has'"]},{"name":"metadata.Experimental","parameters":[]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.FontFaceSet.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.FontFaceSet.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-dom-html.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"dart-dom-html.FontFaceSet.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.FontFaceSet.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"dart-dom-html.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.FontFaceSet.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.FontFaceSet.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.FontFaceSet.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-dom-html.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addEventListener":{"name":"addEventListener","qualifiedName":"dart-dom-html.FontFaceSet.addEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.addEventListener'"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"dart-dom-html.FontFaceSet.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.dispatchEvent'"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.FontFaceSet.noSuchMethod","comment":"<p><a>dart-dom-html.FontFaceSet.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.FontFaceSet.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.FontFaceSet.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.FontFaceSet.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"dart-dom-html.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"dart-dom-html.FontFaceSet.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.removeEventListener'"]}]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.FontFaceSet.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-dom-html.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["'FontFaceSet'"]},{"name":"metadata.Experimental","parameters":[]}],"generics":{}}