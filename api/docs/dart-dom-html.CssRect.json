{"name":"CssRect","qualifiedName":"dart-dom-html.CssRect","comment":"<p>A class for representing CSS dimensions.</p>\n<p>In contrast to the more general purpose <a>dart-dom-html.Rectangle</a> class, this class's\nvalues are mutable, so one can change the height of an element\nprogrammatically.</p>\n<p><em>Important</em> <em>note</em>: use of these methods will perform CSS calculations that\ncan trigger a browser reflow. Therefore, use of these properties <em>during</em> an\nanimation frame is discouraged. See also:\n<a href=\"https://developers.google.com/speed/articles/reflow\">Browser Reflow</a></p>","isAbstract":true,"superclass":"dart-math.MutableRectangle","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"height":{"name":"height","qualifiedName":"dart-math.Rectangle.height","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"left":{"name":"left","qualifiedName":"dart-math.MutableRectangle.left","comment":"<p>The x-coordinate of the left edge.</p>\n<p>Setting the value will move the rectangle without changing its width.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"top":{"name":"top","qualifiedName":"dart-math.MutableRectangle.top","comment":"<p>The y-coordinate of the left edge.</p>\n<p>Setting the value will move the rectangle without changing its height.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"width":{"name":"width","qualifiedName":"dart-math.Rectangle.width","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]}},"methods":{"setters":{"height=":{"name":"height=","qualifiedName":"dart-dom-html.CssRect.height=","comment":"<p>Set the height to <code>newHeight</code>.</p>\n<p>newHeight can be either a <a>dart-core.num</a> representing the height in pixels or a\n<a>dart-dom-html.Dimension</a> object. Values of newHeight that are less than zero are\nconverted to effectively setting the height to 0. This is equivalent to the\n<code>height</code> function in jQuery and the calculated <code>height</code> CSS value,\nconverted to a num in pixels.</p>\n<p>Note that only the content height can actually be set via this method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newHeight":{"name":"newHeight","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"width=":{"name":"width=","qualifiedName":"dart-dom-html.CssRect.width=","comment":"<p>Set the current computed width in pixels of this element.</p>\n<p>newWidth can be either a <a>dart-core.num</a> representing the width in pixels or a\n<a>dart-dom-html.Dimension</a> object. This is equivalent to the <code>width</code> function in jQuery\nand the calculated\n<code>width</code> CSS value, converted to a dimensionless num in pixels.</p>\n<p>Note that only the content width can be set via this method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newWidth":{"name":"newWidth","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"height":{"name":"height","qualifiedName":"dart-dom-html.CssRect.height","comment":"<p>The height of this rectangle.</p>\n<p>This is equivalent to the <code>height</code> function in jQuery and the calculated\n<code>height</code> CSS value, converted to a dimensionless num in pixels. Unlike\ngetBoundingClientRect, <code>height</code> will return the same numerical width if\nthe element is hidden or not.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"left":{"name":"left","qualifiedName":"dart-dom-html.CssRect.left","comment":"<p>The x-coordinate of the left edge.</p>","commentFrom":"dart-math._RectangleBase.left","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"top":{"name":"top","qualifiedName":"dart-dom-html.CssRect.top","comment":"<p>The y-coordinate of the top edge.</p>","commentFrom":"dart-math._RectangleBase.top","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"width":{"name":"width","qualifiedName":"dart-dom-html.CssRect.width","comment":"<p>The width of this rectangle.</p>\n<p>This is equivalent to the <code>width</code> function in jQuery and the calculated\n<code>width</code> CSS value, converted to a dimensionless num in pixels. Unlike\ngetBoundingClientRect, <code>width</code> will return the same numerical width if\nthe element is hidden or not.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-dom-html.CssRect.CssRect-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_element":{"name":"_element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"height=":{"name":"height=","qualifiedName":"dart-dom-html.CssRect.height=","comment":"<p>Sets the height of the rectangle.</p>\n<p>The height must be non-negative.\nIf a negative height is supplied, it is clamped to zero.</p>\n<p>Setting the value will change the bottom edge of the rectangle,\nbut will not change <a>dart-math.MutableRectangle.top</a>.</p>","commentFrom":"","inheritedFrom":"dart-math.MutableRectangle.height=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"height":{"name":"height","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"width=":{"name":"width=","qualifiedName":"dart-dom-html.CssRect.width=","comment":"<p>Sets the width of the rectangle.</p>\n<p>The width must be non-negative.\nIf a negative width is supplied, it is clamped to zero.</p>\n<p>Setting the value will change the right edge of the rectangle,\nbut will not change <a>dart-math.MutableRectangle.left</a>.</p>","commentFrom":"","inheritedFrom":"dart-math.MutableRectangle.width=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"bottom":{"name":"bottom","qualifiedName":"dart-dom-html.CssRect.bottom","comment":"<p>The y-coordinate of the bottom edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottom","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"bottomLeft":{"name":"bottomLeft","qualifiedName":"dart-dom-html.CssRect.bottomLeft","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottomLeft","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"bottomRight":{"name":"bottomRight","qualifiedName":"dart-dom-html.CssRect.bottomRight","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottomRight","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.CssRect.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.CssRect.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-math._RectangleBase.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"height":{"name":"height","qualifiedName":"dart-dom-html.CssRect.height","comment":"<p>The height of the rectangle.</p>","commentFrom":"dart-math._RectangleBase.height","inheritedFrom":"dart-math.MutableRectangle.height","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"left":{"name":"left","qualifiedName":"dart-dom-html.CssRect.left","comment":"<p>The x-coordinate of the left edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.left","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"right":{"name":"right","qualifiedName":"dart-dom-html.CssRect.right","comment":"<p>The x-coordinate of the right edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.right","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.CssRect.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"top":{"name":"top","qualifiedName":"dart-dom-html.CssRect.top","comment":"<p>The y-coordinate of the top edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.top","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"topLeft":{"name":"topLeft","qualifiedName":"dart-dom-html.CssRect.topLeft","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.topLeft","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"topRight":{"name":"topRight","qualifiedName":"dart-dom-html.CssRect.topRight","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.topRight","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"width":{"name":"width","qualifiedName":"dart-dom-html.CssRect.width","comment":"<p>The width of the rectangle.</p>","commentFrom":"dart-math._RectangleBase.width","inheritedFrom":"dart-math.MutableRectangle.width","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.CssRect.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.CssRect.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.CssRect.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-math._RectangleBase.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"boundingBox":{"name":"boundingBox","qualifiedName":"dart-dom-html.CssRect.boundingBox","comment":"<p>Returns a new rectangle which completely contains <code>this</code> and <a>dart-dom-html.CssRect.boundingBox.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.boundingBox","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math._RectangleBase.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"containsPoint":{"name":"containsPoint","qualifiedName":"dart-dom-html.CssRect.containsPoint","comment":"<p>Tests whether <a>dart-dom-html.CssRect.containsPoint.another</a> is inside or along the edges of <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.containsPoint","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"another":{"name":"another","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"containsRectangle":{"name":"containsRectangle","qualifiedName":"dart-dom-html.CssRect.containsRectangle","comment":"<p>Tests whether <code>this</code> entirely contains <a>dart-dom-html.CssRect.containsRectangle.another</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.containsRectangle","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"another":{"name":"another","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"dart-dom-html.CssRect.intersection","comment":"<p>Computes the intersection of <code>this</code> and <a>dart-dom-html.CssRect.intersection.other</a>.</p>\n<p>The intersection of two axis-aligned rectangles, if any, is always another\naxis-aligned rectangle.</p>\n<p>Returns the intersection of this and <code>other</code>, or <code>null</code> if they don't\nintersect.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.intersection","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math._RectangleBase.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"intersects":{"name":"intersects","qualifiedName":"dart-dom-html.CssRect.intersects","comment":"<p>Returns true if <code>this</code> intersects <a>dart-dom-html.CssRect.intersects.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.intersects","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.CssRect.noSuchMethod","comment":"<p><a>dart-dom-html.CssRect.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.CssRect.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.CssRect.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.CssRect.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.CssRect.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-math._RectangleBase.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}