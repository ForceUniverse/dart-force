{"name":"Converter","qualifiedName":"dart-convert.Converter","comment":"<p>A <a>dart-convert.Converter</a> converts data from one representation into another.</p>\n<p>It is recommended that implementations of <code>Converter</code> extend this class,\nto inherit any further methods that may be added to the class.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-convert.StreamTransformer"],"subclass":["dart-convert.AsciiDecoder","dart-convert.AsciiEncoder","dart-convert.HtmlEscape","dart-convert.JsonDecoder","dart-convert.JsonEncoder","dart-convert.Latin1Decoder","dart-convert.Latin1Encoder","dart-convert.LineSplitter","dart-convert.Utf8Decoder","dart-convert.Utf8Encoder","dart-io.ZLibDecoder","dart-io.ZLibEncoder"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-convert.Converter.Converter-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"bind":{"name":"bind","qualifiedName":"dart-convert.Converter.bind","comment":"","commentFrom":"http_server.StreamTransformer.bind","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"convert":{"name":"convert","qualifiedName":"dart-convert.Converter.convert","comment":"<p>Converts <a>dart-convert.Converter.convert.input</a> and returns the result of the conversion.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Converter.S","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"dart-convert.Converter.fuse","comment":"<p>Fuses <code>this</code> with <a>dart-convert.Converter.fuse.other</a>.</p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this</code> before converting with <code>other</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Converter","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"dart-convert.Converter.startChunkedConversion","comment":"<p>Starts a chunked conversion.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ChunkedConversionSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Sink","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-convert.Converter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-convert.Converter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-convert.Converter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-convert.Converter.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-convert.Converter.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-convert.Converter.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bind":{"name":"bind","qualifiedName":"dart-convert.Converter.bind","comment":"","commentFrom":"","inheritedFrom":"dart-convert.StreamTransformer.bind","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-convert.StreamTransformer.S","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-convert.Converter.noSuchMethod","comment":"<p><a>dart-convert.Converter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-convert.Converter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-convert.Converter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-convert.Converter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-convert.Converter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"S":{"name":"S","type":"dart.core.Object"},"T":{"name":"T","type":"dart.core.Object"}}}