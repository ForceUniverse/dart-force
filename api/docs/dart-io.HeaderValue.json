{"name":"HeaderValue","qualifiedName":"dart-io.HeaderValue","comment":"<p>Representation of a header value in the form:</p>\n<p>  <code>value; parameter1=value1; parameter2=value2</code></p>\n<p><a>dart-io.HeaderValue</a> can be used to conveniently build and parse header\nvalues on this form.</p>\n<p>To build an <code>accepts</code> header with the value</p>\n<pre><code>text/plain; q=0.3, text/html\n</code></pre>\n<p>use code like this:</p>\n<pre><code>HttpClientRequest request = ...;\nvar v = new HeaderValue(\"text/plain\", {\"q\": \"0.3\"});\nrequest.headers.add(HttpHeaders.ACCEPT, v);\nrequest.headers.add(HttpHeaders.ACCEPT, \"text/html\");\n</code></pre>\n<p>To parse the header values use the <code>parse</code> static method.</p>\n<pre><code>HttpRequest request = ...;\nList&lt;String&gt; values = request.headers[HttpHeaders.ACCEPT];\nvalues.forEach((value) {\n  HeaderValue v = HeaderValue.parse(value);\n  // Use v.value and v.parameters\n});\n</code></pre>\n<p>An instance of <a>dart-io.HeaderValue</a> is immutable.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"parameters":{"name":"parameters","qualifiedName":"dart-io.HeaderValue.parameters","comment":"<p>Gets the map of parameters.</p>\n<p>This map cannot be modified. invoking any operation which would\nmodify the map will throw <a>dart-core.UnsupportedError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"dart-io.HeaderValue.value","comment":"<p>Gets the header value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-io.HeaderValue.HeaderValue-","comment":"<p>Creates a new header value object setting the value and parameters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.HeaderValue","inner":[]}],"parameters":{"value":{"name":"value","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]},"parameters":{"name":"parameters","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"parse":{"name":"parse","qualifiedName":"dart-io.HeaderValue.parse","comment":"<p>Creates a new header value object from parsing a header value\nstring with both value and optional parameters.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-io.HeaderValue","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"parameterSeparator":{"name":"parameterSeparator","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\";\"","annotations":[]},"preserveBackslash":{"name":"preserveBackslash","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.HeaderValue.toString","comment":"<p>Returns the formatted string representation in the form:</p>\n<pre><code>value; parameter1=value1; parameter2=value2\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.HeaderValue.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.HeaderValue.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.HeaderValue.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.HeaderValue.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.HeaderValue.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.HeaderValue.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.HeaderValue.noSuchMethod","comment":"<p><a>dart-io.HeaderValue.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.HeaderValue.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.HeaderValue.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.HeaderValue.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.HeaderValue.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}