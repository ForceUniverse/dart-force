{"name":"JsObject","qualifiedName":"dart-js.JsObject","comment":"<p>Proxies a JavaScript object to Dart.</p>\n<p>The properties of the JavaScript object are accessible via the <code>[]</code> and\n<code>[]=</code> operators. Methods are callable via <a>dart-js.JsObject.callMethod</a>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":["dart-js.JsArray","dart-js.JsFunction"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-js.JsObject.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-js.JsObject.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-js.JsObject.JsObject-","comment":"<p>Constructs a new JavaScript object from <a>dart-js.JsObject.JsObject-.constructor</a> and returns a proxy\nto it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{"constructor":{"name":"constructor","optional":false,"named":false,"default":false,"type":[{"outer":"dart-js.JsFunction","inner":[]}],"value":null,"annotations":[]},"arguments":{"name":"arguments","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromBrowserObject":{"name":"fromBrowserObject","qualifiedName":"dart-js.JsObject.JsObject-fromBrowserObject","comment":"<p>Constructs a <a>dart-js.JsObject</a> that proxies a native Dart object; <em>for expert use\nonly</em>.</p>\n<p>Use this constructor only if you wish to get access to JavaScript\nproperties attached to a browser host object, such as a Node or Blob, that\nis normally automatically converted into a native Dart object.</p>\n<p>An exception will be thrown if <a>dart-js.JsObject.JsObject-fromBrowserObject.object</a> either is <code>null</code> or has the type\n<code>bool</code>, <code>num</code>, or <code>String</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"jsify":{"name":"jsify","qualifiedName":"dart-js.JsObject.JsObject-jsify","comment":"<p>Recursively converts a JSON-like collection of Dart objects to a\ncollection of JavaScript objects and returns a <a>dart-js.JsObject</a> proxy to it.</p>\n<p><a>dart-js.JsObject.JsObject-jsify.object</a> must be a <a>dart-core.Map</a> or <a>dart-core.Iterable</a>, the contents of which are also\nconverted. Maps and Iterables are copied to a new JavaScript object.\nPrimitives and other transferrable values are directly converted to their\nJavaScript type, and all other objects are proxied.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"dart-js.JsObject.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-js.JsObject.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-js.JsObject.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"dart-js.JsObject.[]","comment":"<p>Returns the value associated with <a>dart-js.JsObject.[].property</a> from the proxied JavaScript\nobject.</p>\n<p>The type of <a>dart-js.JsObject.[].property</a> must be either <a>dart-core.String</a> or <a>dart-core.num</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"property":{"name":"property","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"dart-js.JsObject.[]=","comment":"<p>Sets the value associated with <a>dart-js.JsObject.[]=.property</a> on the proxied JavaScript\nobject.</p>\n<p>The type of <a>dart-js.JsObject.[]=.property</a> must be either <a>dart-core.String</a> or <a>dart-core.num</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"property":{"name":"property","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"callMethod":{"name":"callMethod","qualifiedName":"dart-js.JsObject.callMethod","comment":"<p>Calls <a>dart-js.JsObject.callMethod.method</a> on the JavaScript object with the arguments <a>dart-js.JsObject.callMethod.args</a> and\nreturns the result.</p>\n<p>The type of <a>dart-js.JsObject.callMethod.method</a> must be either <a>dart-core.String</a> or <a>dart-core.num</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"deleteProperty":{"name":"deleteProperty","qualifiedName":"dart-js.JsObject.deleteProperty","comment":"<p>Removes <a>dart-js.JsObject.deleteProperty.property</a> from the JavaScript object.</p>\n<p>This is the equivalent of the <code>delete</code> operator in JavaScript.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"property":{"name":"property","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"hasProperty":{"name":"hasProperty","qualifiedName":"dart-js.JsObject.hasProperty","comment":"<p>Returns <code>true</code> if the JavaScript object contains the specified property\neither directly or though its prototype chain.</p>\n<p>This is the equivalent of the <code>in</code> operator in JavaScript.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"property":{"name":"property","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"instanceof":{"name":"instanceof","qualifiedName":"dart-js.JsObject.instanceof","comment":"<p>Returns <code>true</code> if the JavaScript object has <a>dart-js.JsObject.instanceof.type</a> in its prototype chain.</p>\n<p>This is the equivalent of the <code>instanceof</code> operator in JavaScript.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-js.JsFunction","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-js.JsObject.toString","comment":"<p>Returns the result of the JavaScript objects <code>toString</code> method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-js.JsObject.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-js.JsObject.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-js.JsObject.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-js.JsObject.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-js.JsObject.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-js.JsObject.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-js.JsObject.noSuchMethod","comment":"<p><a>dart-js.JsObject.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-js.JsObject.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-js.JsObject.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-js.JsObject.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-js.JsObject.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}