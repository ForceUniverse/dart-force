{"name":"Uri","qualifiedName":"dart-core.Uri","comment":"<p>A parsed URI, such as a URL.</p>\n<p><strong>See also:</strong></p><ul><li><a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-uri\">URIs</a> in the <a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\">library tour</a></li><li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC-3986</a></li></ul>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"fragment":{"name":"fragment","qualifiedName":"dart-core.Uri.fragment","comment":"<p>Returns the fragment identifier component.</p>\n<p>Returns the empty string if there is no fragment identifier\ncomponent.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"query":{"name":"query","qualifiedName":"dart-core.Uri.query","comment":"<p>Returns the query component. The returned query is encoded. To get\ndirect access to the decoded query use <a>dart-core.Uri.queryParameters</a>.</p>\n<p>Returns the empty string if there is no query component.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"scheme":{"name":"scheme","qualifiedName":"dart-core.Uri.scheme","comment":"<p>Returns the scheme component.</p>\n<p>Returns the empty string if there is no scheme component.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"userInfo":{"name":"userInfo","qualifiedName":"dart-core.Uri.userInfo","comment":"<p>Returns the user info part of the authority component.</p>\n<p>Returns the empty string if there is no user info in the\nauthority component.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"authority":{"name":"authority","qualifiedName":"dart-core.Uri.authority","comment":"<p>Returns the authority component.</p>\n<p>The authority is formatted from the <a>dart-core.Uri.userInfo</a>, <a>dart-core.Uri.host</a> and <a>dart-core.Uri.port</a>\nparts.</p>\n<p>Returns the empty string if there is no authority component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"base":{"name":"base","qualifiedName":"dart-core.Uri.base","comment":"<p>Returns the natural base URI for the current platform.</p>\n<p>When running in a browser this is the current URL (from\n<code>window.location.href</code>).</p>\n<p>When not running in a browser this is the file URI referencing\nthe current working directory.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{},"annotations":[]},"hasAuthority":{"name":"hasAuthority","qualifiedName":"dart-core.Uri.hasAuthority","comment":"<p>Returns whether the URI has an <a>dart-core.Uri.authority</a> component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Uri.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Uri.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"host":{"name":"host","qualifiedName":"dart-core.Uri.host","comment":"<p>Returns the host part of the authority component.</p>\n<p>Returns the empty string if there is no authority component and\nhence no host.</p>\n<p>If the host is an IP version 6 address, the surrounding <code>[</code> and <code>]</code> is\nremoved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"isAbsolute":{"name":"isAbsolute","qualifiedName":"dart-core.Uri.isAbsolute","comment":"<p>Returns whether the URI is absolute.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"origin":{"name":"origin","qualifiedName":"dart-core.Uri.origin","comment":"<p>Returns the origin of the URI in the form scheme://host:port for the\nschemes http and https.</p>\n<p>It is an error if the scheme is not \"http\" or \"https\".</p>\n<p>See: http://www.w3.org/TR/2011/WD-html5-20110405/origin-0.html#origin</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"path":{"name":"path","qualifiedName":"dart-core.Uri.path","comment":"<p>Returns the path component.</p>\n<p>The returned path is encoded. To get direct access to the decoded\npath use <a>dart-core.Uri.pathSegments</a>.</p>\n<p>Returns the empty string if there is no path component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"pathSegments":{"name":"pathSegments","qualifiedName":"dart-core.Uri.pathSegments","comment":"<p>Returns the URI path split into its segments. Each of the\nsegments in the returned list have been decoded. If the path is\nempty the empty list will be returned. A leading slash <code>/</code> does\nnot affect the segments returned.</p>\n<p>The returned list is unmodifiable and will throw <a>dart-core.UnsupportedError</a> on any\ncalls that would mutate it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"port":{"name":"port","qualifiedName":"dart-core.Uri.port","comment":"<p>Returns the port part of the authority component.</p>\n<p>Returns 0 if there is no port in the authority component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"queryParameters":{"name":"queryParameters","qualifiedName":"dart-core.Uri.queryParameters","comment":"<p>Returns the URI query split into a map according to the rules\nspecified for FORM post in the <a href=\"http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section 17.13.4</a>. Each key and value in the returned map\nhas been decoded. If there is no query the empty map is returned.</p>\n<p>Keys in the query string that have no value are mapped to the\nempty string.</p>\n<p>The returned map is unmodifiable and will throw <a>dart-core.UnsupportedError</a> on any\ncalls that would mutate it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.Uri.Uri-","comment":"<p>Creates a new URI from its components.</p>\n<p>Each component is set through a named argument. Any number of\ncomponents can be provided. The default value for the components\nnot provided is the empry string, except for <a>dart-core.Uri.Uri-.port</a> which has a\ndefault value of 0. The <a>dart-core.Uri.Uri-.path</a> and <a>dart-core.Uri.Uri-.query</a> components can be set\nusing two different named arguments.</p>\n<p>The scheme component is set through <a>dart-core.Uri.Uri-.scheme</a>. The scheme is\nnormalized to all lowercase letters.</p>\n<p>The user info part of the authority component is set through\n<a>dart-core.Uri.Uri-.userInfo</a>.</p>\n<p>The host part of the authority component is set through\n<a>dart-core.Uri.Uri-.host</a>. The host can either be a hostname, an IPv4 address or an\nIPv6 address, contained in '' and ''. If the host contains a\n':' character, the '' and '' are added if not already provided.</p>\n<p>The port part of the authority component is set through\n<a>dart-core.Uri.Uri-.port</a>. The port is normalized for scheme http and https where\nport 80 and port 443 respectively is set.</p>\n<p>The path component is set through either <a>dart-core.Uri.Uri-.path</a> or\n<a>dart-core.Uri.Uri-.pathSegments</a>. When <a>dart-core.Uri.Uri-.path</a> is used, the provided string is\nexpected to be fully percent-encoded, and is used in its literal\nform. When <a>dart-core.Uri.Uri-.pathSegments</a> is used, each of the provided segments\nis percent-encoded and joined using the forward slash\nseparator. The percent-encoding of the path segments encodes all\ncharacters except for the unreserved characters and the following\nlist of characters: <code>!$&amp;'()*+,;=:@</code>. If the other components\ncalls for an absolute path a leading slash <code>/</code> is prepended if\nnot already there.</p>\n<p>The query component is set through either <a>dart-core.Uri.Uri-.query</a> or\n<a>dart-core.Uri.Uri-.queryParameters</a>. When <a>dart-core.Uri.Uri-.query</a> is used the provided string is\nexpected to be fully percent-encoded and is used in its literal\nform. When <a>dart-core.Uri.Uri-.queryParameters</a> is used the query is built from the\nprovided map. Each key and value in the map is percent-encoded\nand joined using equal and ampersand characters. The\npercent-encoding of the keys and values encodes all characters\nexcept for the unreserved characters.</p>\n<p>The fragment component is set through <a>dart-core.Uri.Uri-.fragment</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"userInfo":{"name":"userInfo","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]},"host":{"name":"host","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]},"port":{"name":"port","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"0","annotations":[]},"path":{"name":"path","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"pathSegments":{"name":"pathSegments","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"query":{"name":"query","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"fragment":{"name":"fragment","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"file":{"name":"file","qualifiedName":"dart-core.Uri.Uri-file","comment":"<p>Creates a new file URI from an absolute or relative file path.</p>\n<p>The file path is passed in <a>dart-core.Uri.Uri-file.path</a>.</p>\n<p>This path is interpreted using either Windows or non-Windows\nsemantics.</p>\n<p>With non-Windows semantics the slash (\"/\") is used to separate\npath segments.</p>\n<p>With Windows semantics, backslash (\"\\\") and forward-slash (\"/\")\nare used to separate path segments, except if the path starts\nwith \"\\\\?\\\" in which case, only backslash (\"\\\") separates path\nsegments.</p>\n<p>If the path starts with a path separator an absolute URI is\ncreated. Otherwise a relative URI is created. One exception from\nthis rule is that when Windows semantics is used and the path\nstarts with a drive letter followed by a colon (\":\") and a\npath separator then an absolute URI is created.</p>\n<p>The default for whether to use Windows or non-Windows semantics\ndetermined from the platform Dart is running on. When running in\nthe standalone VM this is detected by the VM based on the\noperating system. When running in a browser non-Windows semantics\nis always used.</p>\n<p>To override the automatic detection of which semantics to use pass\na value for <a>dart-core.Uri.Uri-file.windows</a>. Passing <code>true</code> will use Windows\nsemantics and passing <code>false</code> will use non-Windows semantics.</p>\n<p>Examples using non-Windows semantics (resulting URI in comment):</p>\n<pre><code>new Uri.file(\"xxx/yyy\");  // xxx/yyy\nnew Uri.file(\"xxx/yyy/\");  // xxx/yyy/\nnew Uri.file(\"/xxx/yyy\");  // file:///xxx/yyy\nnew Uri.file(\"/xxx/yyy/\");  // file:///xxx/yyy/\nnew Uri.file(\"C:\");  // C:\n</code></pre>\n<p>Examples using Windows semantics (resulting URI in comment):</p>\n<pre><code>new Uri.file(r\"xxx\\yyy\");  // xxx/yyy\nnew Uri.file(r\"xxx\\yyy\\\");  // xxx/yyy/\nnew Uri.file(r\"\\xxx\\yyy\");  // file:///xxx/yyy\nnew Uri.file(r\"\\xxx\\yyy/\");  // file:///xxx/yyy/\nnew Uri.file(r\"C:\\xxx\\yyy\");  // file:///C:/xxx/yyy\nnew Uri.file(r\"C:xxx\\yyy\");  // Throws as path with drive letter\n                             // is not absolute.\nnew Uri.file(r\"\\\\server\\share\\file\");  // file://server/share/file\nnew Uri.file(r\"C:\");  // Throws as path with drive letter\n                      // is not absolute.\n</code></pre>\n<p>If the path passed is not a legal file path <a>dart-core.ArgumentError</a> is thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"windows":{"name":"windows","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"http":{"name":"http","qualifiedName":"dart-core.Uri.Uri-http","comment":"<p>Creates a new <code>http</code> URI from authority, path and query.</p>\n<p>Examples:</p>\n<pre><code>// Create the URI http://example.org/path?q=abc.\nnew Uri.http(\"google.com\", \"/search\", { \"q\" : \"dart\" });http://example.org/path?q=abc.\nnew Uri.http(\"user:pass@localhost:8080, \"\");  // http://user:pass@localhost:8080/\nnew Uri.http(\"example.org, \"a b\");  // http://example.org/a%20b\nnew Uri.http(\"example.org, \"/a%2F\");  // http://example.org/a%25%2F\n</code></pre>\n<p>The <code>scheme</code> is always set to <code>http</code>.</p>\n<p>The <code>userInfo</code>, <code>host</code> and <code>port</code> components are set from the\n<a>dart-core.Uri.Uri-http.authority</a> argument.</p>\n<p>The <code>path</code> component is set from the <a>dart-core.Uri.Uri-http.unencodedPath</a>\nargument. The path passed must not be encoded as this constructor\nencodes the path.</p>\n<p>The <code>query</code> component is set from the optional <a>dart-core.Uri.Uri-http.queryParameters</a>\nargument.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"authority":{"name":"authority","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"unencodedPath":{"name":"unencodedPath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"https":{"name":"https","qualifiedName":"dart-core.Uri.Uri-https","comment":"<p>Creates a new <code>https</code> URI from authority, path and query.</p>\n<p>This constructor is the same as <a>dart-core.Uri.Uri-http</a> except for the scheme\nwhich is set to <code>https</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"authority":{"name":"authority","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"unencodedPath":{"name":"unencodedPath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Uri.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Uri.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Uri.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"decodeComponent":{"name":"decodeComponent","qualifiedName":"dart-core.Uri.decodeComponent","comment":"<p>Decodes the percent-encoding in <a>dart-core.Uri.decodeComponent.encodedComponent</a>.</p>\n<p>Note that decoding a URI component might change its meaning as\nsome of the decoded characters could be characters with are\ndelimiters for a given URI componene type. Always split a URI\ncomponent using the delimiters for the component before decoding\nthe individual parts.</p>\n<p>For handling the <a>dart-core.Uri.path</a> and <a>dart-core.Uri.query</a> components consider using\n<a>dart-core.Uri.pathSegments</a> and <a>dart-core.Uri.queryParameters</a> to get the separated and\ndecoded component.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"encodedComponent":{"name":"encodedComponent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeFull":{"name":"decodeFull","qualifiedName":"dart-core.Uri.decodeFull","comment":"<p>Decodes the percent-encoding in <a>dart-core.Uri.decodeFull.uri</a>.</p>\n<p>Note that decoding a full URI might change its meaning as some of\nthe decoded characters could be reserved characters. In most\ncases an encoded URI should be parsed into components using\n<a>dart-core.Uri.parse</a> before decoding the separate components.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeQueryComponent":{"name":"decodeQueryComponent","qualifiedName":"dart-core.Uri.decodeQueryComponent","comment":"<p>Decodes the percent-encoding in <a>dart-core.Uri.decodeQueryComponent.encodedComponent</a>, converting\npluses to spaces.</p>\n<p>It will create a byte-list of the decoded characters, and then use\n<a>dart-core.Uri.decodeQueryComponent.encoding</a> to decode the byte-list to a String. The default encoding is\nUTF-8.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"encodedComponent":{"name":"encodedComponent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"encodeComponent":{"name":"encodeComponent","qualifiedName":"dart-core.Uri.encodeComponent","comment":"<p>Encode the string <a>dart-core.Uri.encodeComponent.component</a> using percent-encoding to make it\nsafe for literal use as a URI component.</p>\n<p>All characters except uppercase and lowercase letters, digits and\nthe characters <code>-_.!~*'()</code> are percent-encoded. This is the\nset of characters specified in RFC 2396 and the which is\nspecified for the encodeUriComponent in ECMA-262 version 5.1.</p>\n<p>When manually encoding path segments or query components remember\nto encode each part separately before building the path or query\nstring.</p>\n<p>For encoding the query part consider using\n<a>dart-core.Uri.encodeQueryComponent</a>.</p>\n<p>To avoid the need for explicitly encoding use the <a>dart-core.Uri.pathSegments</a>\nand <a>dart-core.Uri.queryParameters</a> optional named arguments when constructing\na <a>dart-core.Uri</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"component":{"name":"component","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodeFull":{"name":"encodeFull","qualifiedName":"dart-core.Uri.encodeFull","comment":"<p>Encode the string <a>dart-core.Uri.encodeFull.uri</a> using percent-encoding to make it\nsafe for literal use as a full URI.</p>\n<p>All characters except uppercase and lowercase letters, digits and\nthe characters <code>!#$&amp;'()*+,-./:;=?@_~</code> are percent-encoded. This\nis the set of characters specified in in ECMA-262 version 5.1 for\nthe encodeURI function .</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodeQueryComponent":{"name":"encodeQueryComponent","qualifiedName":"dart-core.Uri.encodeQueryComponent","comment":"<p>Encode the string <a>dart-core.Uri.encodeQueryComponent.component</a> according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.</p>\n<p>Encode the string <a>dart-core.Uri.encodeQueryComponent.component</a> according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.</p>\n<p>The component is first encoded to bytes using <a>dart-core.Uri.encodeQueryComponent.encoding</a>.\nThe default is to use <a>dart-convert.UTF8</a> encoding, which preserves all\nthe characters that don't need encoding.</p>\n<p>Then the resulting bytes are \"percent-encoded\". This transforms\nspaces (U+0020) to a plus sign ('+') and all bytes that are not\nthe ASCII decimal digits, letters or one of '-._~' are written as\na percent sign '%' followed by the two-digit hexadecimal\nrepresentation of the byte.</p>\n<p>Note that the set of characters which are percent-encoded is a\nsuperset of what HTML 4.01 requires, since it refers to RFC 1738\nfor reserved characters.</p>\n<p>When manually encoding query components remember to encode each\npart separately before building the query string.</p>\n<p>To avoid the need for explicitly encoding the query use the\n<a>dart-core.Uri.queryParameters</a> optional named arguments when constructing a\n<a>dart-core.Uri</a>.</p>\n<p>See http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2 for more\ndetails.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"component":{"name":"component","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"dart-core.Uri.parse","comment":"<p>Creates a new URI object by parsing a URI string.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseIPv4Address":{"name":"parseIPv4Address","qualifiedName":"dart-core.Uri.parseIPv4Address","comment":"<p>Parse the <a>dart-core.Uri.parseIPv4Address.host</a> as an IP version 4 (IPv4) address, returning the address\nas a list of 4 bytes in network byte order (big endian).</p>\n<p>Throws a <a>dart-core.FormatException</a> if <a>dart-core.Uri.parseIPv4Address.host</a> is not a valid IPv4 address\nrepresentation.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseIPv6Address":{"name":"parseIPv6Address","qualifiedName":"dart-core.Uri.parseIPv6Address","comment":"<p>Parse the <a>dart-core.Uri.parseIPv6Address.host</a> as an IP version 6 (IPv6) address, returning the address\nas a list of 16 bytes in network byte order (big endian).</p>\n<p>Throws a <a>dart-core.FormatException</a> if <a>dart-core.Uri.parseIPv6Address.host</a> is not a valid IPv6 address\nrepresentation.</p>\n<p>Some examples of IPv6 addresses:\n * ::1\n * FEDC:BA98:7654:3210:FEDC:BA98:7654:3210\n * 3ffe:2a00:100:7031::1\n * ::FFFF:129.144.52.38\n * 2010:836B:4179::836B:4179</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"resolve":{"name":"resolve","qualifiedName":"dart-core.Uri.resolve","comment":"<p>Resolve <a>dart-core.Uri.resolve.reference</a> as an URI relative to <code>this</code>.</p>\n<p>First turn <a>dart-core.Uri.resolve.reference</a> into a URI using <a>dart-core.Uri.parse</a>. Then resolve the\nresulting URI relative to <code>this</code>.</p>\n<p>Returns the resolved URI.</p>\n<p>See <a>dart-core.Uri.resolveUri</a> for details.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"reference":{"name":"reference","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"resolveUri":{"name":"resolveUri","qualifiedName":"dart-core.Uri.resolveUri","comment":"<p>Resolve <a>dart-core.Uri.resolveUri.reference</a> as an URI relative to <code>this</code>.</p>\n<p>Returns the resolved URI.</p>\n<p>The algorithm for resolving a reference is described in\n<a href=\"http://tools.ietf.org/html/rfc3986#section-5\" title=\"RFC-1123\">RFC-3986 Section 5</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"reference":{"name":"reference","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"splitQueryString":{"name":"splitQueryString","qualifiedName":"dart-core.Uri.splitQueryString","comment":"<p>Returns the <a>dart-core.Uri.splitQueryString.query</a> split into a map according to the rules\nspecified for FORM post in the\n<a href=\"http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section 17.13.4</a>. Each key and value in the returned\nmap has been decoded. If the <a>dart-core.Uri.splitQueryString.query</a>\nis the empty string an empty map is returned.</p>\n<p>Keys in the query string that have no value are mapped to the\nempty string.</p>\n<p>Each query component will be decoded using <a>dart-core.Uri.splitQueryString.encoding</a>. The default encoding\nis UTF-8.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"toFilePath":{"name":"toFilePath","qualifiedName":"dart-core.Uri.toFilePath","comment":"<p>Returns the file path from a file URI.</p>\n<p>The returned path has either Windows or non-Windows\nsemantics.</p>\n<p>For non-Windows semantics the slash (\"/\") is used to separate\npath segments.</p>\n<p>For Windows semantics the backslash (\"\\\") separator is used to\nseparate path segments.</p>\n<p>If the URI is absolute the path starts with a path separator\nunless Windows semantics is used and the first path segment is a\ndrive letter. When Windows semantics is used a host component in\nthe uri in interpreted as a file server and a UNC path is\nreturned.</p>\n<p>The default for whether to use Windows or non-Windows semantics\ndetermined from the platform Dart is running on. When running in\nthe standalone VM this is detected by the VM based on the\noperating system. When running in a browser non-Windows semantics\nis always used.</p>\n<p>To override the automatic detection of which semantics to use pass\na value for <a>dart-core.Uri.toFilePath.windows</a>. Passing <code>true</code> will use Windows\nsemantics and passing <code>false</code> will use non-Windows semantics.</p>\n<p>If the URI ends with a slash (i.e. the last path component is\nempty) the returned file path will also end with a slash.</p>\n<p>With Windows semantics URIs starting with a drive letter cannot\nbe relative to the current drive on the designated drive. That is\nfor the URI <code>file:///c:abc</code> calling <code>toFilePath</code> will throw as a\npath segment cannot contain colon on Windows.</p>\n<p>Examples using non-Windows semantics (resulting of calling\ntoFilePath in comment):</p>\n<pre><code>Uri.parse(\"xxx/yyy\");  // xxx/yyy\nUri.parse(\"xxx/yyy/\");  // xxx/yyy/\nUri.parse(\"file:///xxx/yyy\");  // /xxx/yyy\nUri.parse(\"file:///xxx/yyy/\");  // /xxx/yyy/\nUri.parse(\"file:///C:\");  // /C:\nUri.parse(\"file:///C:a\");  // /C:a\n</code></pre>\n<p>Examples using Windows semantics (resulting URI in comment):</p>\n<pre><code>Uri.parse(\"xxx/yyy\");  // xxx\\yyy\nUri.parse(\"xxx/yyy/\");  // xxx\\yyy\\\nUri.parse(\"file:///xxx/yyy\");  // \\xxx\\yyy\nUri.parse(\"file:///xxx/yyy/\");  // \\xxx\\yyy/\nUri.parse(\"file:///C:/xxx/yyy\");  // C:\\xxx\\yyy\nUri.parse(\"file:C:xxx/yyy\");  // Throws as a path segment\n                              // cannot contain colon on Windows.\nUri.parse(\"file://server/share/file\");  // \\\\server\\share\\file\n</code></pre>\n<p>If the URI is not a file URI calling this throws\n<a>dart-core.UnsupportedError</a>.</p>\n<p>If the URI cannot be converted to a file path calling this throws\n<a>dart-core.UnsupportedError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"windows":{"name":"windows","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Uri.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Uri.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Uri.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Uri.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Uri.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Uri.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Uri.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Uri.noSuchMethod","comment":"<p><a>dart-core.Uri.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Uri.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Uri.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Uri.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Uri.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}