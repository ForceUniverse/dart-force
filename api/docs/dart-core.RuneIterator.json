{"name":"RuneIterator","qualifiedName":"dart-core.RuneIterator","comment":"<p><a>dart-core.Iterator</a> for reading runes (integer Unicode code points) out of a Dart\nstring.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.BidirectionalIterator"],"subclass":[],"variables":{"string":{"name":"string","qualifiedName":"dart-core.RuneIterator.string","comment":"<p>String being iterated.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"rawIndex=":{"name":"rawIndex=","qualifiedName":"dart-core.RuneIterator.rawIndex=","comment":"<p>Resets the iterator to the rune at the specified index of the string.</p>\n<p>Setting a negative <a>dart-core.RuneIterator.rawIndex=.rawIndex</a>, or one greater than or equal to\n<code>string.length</code>,\nis an error. So is setting it in the middle of a surrogate pair.</p>\n<p>Setting the position to the end of then string will set <a>dart-core.RuneIterator.current</a> to null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"rawIndex":{"name":"rawIndex","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"current":{"name":"current","qualifiedName":"dart-core.RuneIterator.current","comment":"<p>The rune (integer Unicode code point) starting at the current position in\n the string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"currentAsString":{"name":"currentAsString","qualifiedName":"dart-core.RuneIterator.currentAsString","comment":"<p>A string containing the current rune.</p>\n<p>For runes outside the basic multilingual plane, this will be\na String of length 2, containing two code units.</p>\n<p>Returns null if <a>dart-core.RuneIterator.current</a> is null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"currentSize":{"name":"currentSize","qualifiedName":"dart-core.RuneIterator.currentSize","comment":"<p>The number of code units comprising the current rune.</p>\n<p>Returns zero if there is no current rune (<a>dart-core.RuneIterator.current</a> is null).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"rawIndex":{"name":"rawIndex","qualifiedName":"dart-core.RuneIterator.rawIndex","comment":"<p>Returns the starting position of the current rune in the string.</p>\n<p>Returns null if the <a>dart-core.RuneIterator.current</a> rune is null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.RuneIterator.RuneIterator-","comment":"<p>Create an iterator positioned at the beginning of the string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"at":{"name":"at","qualifiedName":"dart-core.RuneIterator.RuneIterator-at","comment":"<p>Create an iterator positioned before the <a>dart-core.RuneIterator.RuneIterator-at.index</a>th code unit of the string.</p>\n<p>When created, there is no <a>dart-core.RuneIterator.current</a> value.\nA <a>dart-core.RuneIterator.moveNext</a> will use the rune starting at <a>dart-core.RuneIterator.RuneIterator-at.index</a> the current value,\nand a <a>dart-core.RuneIterator.movePrevious</a> will use the rune ending just before <a>dart-core.RuneIterator.RuneIterator-at.index</a> as the\nthe current value.</p>\n<p>It is an error if the <a>dart-core.RuneIterator.RuneIterator-at.index</a> position is in the middle of a surrogate\npair.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"moveNext":{"name":"moveNext","qualifiedName":"dart-core.RuneIterator.moveNext","comment":"<p>Moves to the next element. Returns true if <a>dart-core.RuneIterator.current</a> contains the next\nelement. Returns false, if no element was left.</p>\n<p>It is safe to invoke <a>dart-core.RuneIterator.moveNext</a> even when the iterator is already\npositioned after the last element. In this case <a>dart-core.RuneIterator.moveNext</a> has no effect.</p>","commentFrom":"dart-core.Iterator.moveNext","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"movePrevious":{"name":"movePrevious","qualifiedName":"dart-core.RuneIterator.movePrevious","comment":"<p>Move back to the previous element.</p>\n<p>Returns true and updates <a>dart-core.RuneIterator.current</a> if successful. Returns false\nand sets <a>dart-core.RuneIterator.current</a> to null if there is no previous element.</p>","commentFrom":"dart-core.BidirectionalIterator.movePrevious","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"dart-core.RuneIterator.reset","comment":"<p>Resets the iterator to the given index into the string.</p>\n<p>After this the <a>dart-core.RuneIterator.current</a> value is unset.\nYou must call <a>dart-core.RuneIterator.moveNext</a> make the rune at the position current,\nor <a>dart-core.RuneIterator.movePrevious</a> for the last rune before the position.</p>\n<p>Setting a negative <a>dart-core.RuneIterator.reset.rawIndex</a>, or one greater than <code>string.length</code>,\nis an error. So is setting it in the middle of a surrogate pair.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"rawIndex":{"name":"rawIndex","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"current":{"name":"current","qualifiedName":"dart-core.RuneIterator.current","comment":"<p>Returns the current element.</p>\n<p>Return <code>null</code> if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n<a>dart-core.Iterable</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterator.current","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.BidirectionalIterator.E","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-core.RuneIterator.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.RuneIterator.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.RuneIterator.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.RuneIterator.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.RuneIterator.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.RuneIterator.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"moveNext":{"name":"moveNext","qualifiedName":"dart-core.RuneIterator.moveNext","comment":"<p>Moves to the next element. Returns true if <a>dart-core.RuneIterator.current</a> contains the next\nelement. Returns false, if no element was left.</p>\n<p>It is safe to invoke <a>dart-core.RuneIterator.moveNext</a> even when the iterator is already\npositioned after the last element. In this case <a>dart-core.RuneIterator.moveNext</a> has no effect.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterator.moveNext","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"movePrevious":{"name":"movePrevious","qualifiedName":"dart-core.RuneIterator.movePrevious","comment":"<p>Move back to the previous element.</p>\n<p>Returns true and updates <a>dart-core.RuneIterator.current</a> if successful. Returns false\nand sets <a>dart-core.RuneIterator.current</a> to null if there is no previous element.</p>","commentFrom":"","inheritedFrom":"dart-core.BidirectionalIterator.movePrevious","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.RuneIterator.noSuchMethod","comment":"<p><a>dart-core.RuneIterator.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.RuneIterator.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.RuneIterator.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.RuneIterator.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.RuneIterator.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}