{"name":"MirrorsUsed","qualifiedName":"dart-mirrors.MirrorsUsed","comment":"<p>Annotation describing how \"dart:mirrors\" is used (EXPERIMENTAL).</p>\n<p>When used as metadata on an import of \"dart:mirrors\" in library <em>L</em>, this\nclass describes how \"dart:mirrors\" is used by library <em>L</em> unless overridden.\nSee <a>dart-mirrors.MirrorsUsed.override</a>.</p>\n<p>The following text is non-normative:</p>\n<p>In some scenarios, for example, when minifying Dart code, or when generating\nJavaScript code from a Dart program, the size and performance of the output\ncan suffer from use of reflection.  In those cases, telling the compiler\nwhat is used, can have a significant impact.</p>\n<p>Example usage:</p>\n<pre><code>@MirrorsUsed(symbols: 'foo', override: '*')\nimport 'dart:mirrors';\n\nclass Foo {\n  noSuchMethod(Invocation invocation) {\n    print(MirrorSystem.getName(invocation.memberName));\n  }\n}\n\nmain() {\n  new Foo().foo(); // Prints \"foo\".\n  new Foo().bar(); // Might print an arbitrary (mangled) name, \"bar\".\n}\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"metaTargets":{"name":"metaTargets","qualifiedName":"dart-mirrors.MirrorsUsed.metaTargets","comment":"<p>A list of classes that when used as metadata indicates a reflective\ntarget.</p>\n<p>See <a>dart-mirrors.MirrorsUsed.targets</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"override":{"name":"override","qualifiedName":"dart-mirrors.MirrorsUsed.override","comment":"<p>A list of library names or \"*\".</p>\n<p>When used as metadata on an import of \"dart:mirrors\", this metadata does\nnot apply to the library in which the annotation is used, but instead\napplies to the other libraries (all libraries if \"*\" is used).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"symbols":{"name":"symbols","qualifiedName":"dart-mirrors.MirrorsUsed.symbols","comment":"<p>The list of strings passed to new <a>dart-core.Symbol</a>, and symbols that might be\npassed to <a>dart-mirrors.MirrorSystem.getName</a>.</p>\n<p>Combined with the names of <a>dart-mirrors.MirrorsUsed.targets</a>, <a>dart-mirrors.MirrorsUsed.metaTargets</a> and their members,\nthis forms the complete list of strings passed to new <a>dart-core.Symbol</a>, and\nsymbols that might be passed to <a>dart-mirrors.MirrorSystem.getName</a> by the library to\nwhich this metadata applies.</p>\n<p>The following text is non-normative:</p>\n<p>Specifying this option turns off the following warnings emitted by\ndart2js:</p><ul><li>Using \"MirrorSystem.getName\" may result in larger output.</li><li>Using \"new #{name}\" may result in larger output.</li></ul>\n<p>Use symbols = \"*\" to turn off the warnings mentioned above.</p>\n<p>For example, if using <a>dart-dom-html._WrappedEvent.noSuchMethod</a> to interact with a database, extract\nall the possible column names and include them in this list.  Similarly,\nif using <a>dart-dom-html._WrappedEvent.noSuchMethod</a> to interact with another language (JavaScript, for\nexample) extract all the identifiers from API used and include them in\nthis list.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"targets":{"name":"targets","qualifiedName":"dart-mirrors.MirrorsUsed.targets","comment":"<p>A list of reflective targets.</p>\n<p>Combined with <a>dart-mirrors.MirrorsUsed.metaTargets</a>, this provides the complete list of reflective\ntargets used by the library to which this metadata applies.</p>\n<p>The following text is non-normative:</p>\n<p>For now, there is no formal description of what a reflective target is.\nInformally, it is a list of things that are expected to have fully\nfunctional mirrors.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-mirrors.MirrorsUsed.MirrorsUsed-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"symbols":{"name":"symbols","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"targets":{"name":"targets","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"metaTargets":{"name":"metaTargets","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"override":{"name":"override","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-mirrors.MirrorsUsed.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-mirrors.MirrorsUsed.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-mirrors.MirrorsUsed.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-mirrors.MirrorsUsed.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-mirrors.MirrorsUsed.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-mirrors.MirrorsUsed.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-mirrors.MirrorsUsed.noSuchMethod","comment":"<p><a>dart-mirrors.MirrorsUsed.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-mirrors.MirrorsUsed.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-mirrors.MirrorsUsed.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-mirrors.MirrorsUsed.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-mirrors.MirrorsUsed.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}