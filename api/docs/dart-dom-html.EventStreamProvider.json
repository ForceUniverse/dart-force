{"name":"EventStreamProvider","qualifiedName":"dart-dom-html.EventStreamProvider","comment":"<p>A factory to expose DOM events as Streams.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-dom-html.EventStreamProvider.EventStreamProvider-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_eventType":{"name":"_eventType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"forElement":{"name":"forElement","qualifiedName":"dart-dom-html.EventStreamProvider.forElement","comment":"<p>Gets an ElementEventStream for this event type, on the specified element.</p>\n<p>This will always return a broadcast stream so multiple listeners can be\nused simultaneously.</p>\n<p>This may be used to capture DOM events:</p>\n<pre><code>Element.keyDownEvent.forElement(element, useCapture: true).listen(...);\n\n// Alternate method:\nElement.keyDownEvent.forElement(element).capture(...);\n</code></pre>\n<p>Or for listening to an event which will bubble through the DOM tree:</p>\n<pre><code>MediaElement.pauseEvent.forElement(document.body).listen(...);\n</code></pre>\n<p>See also:</p>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/addEventListener\">addEventListener</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.EventStreamProvider.T","inner":[]}]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"forTarget":{"name":"forTarget","qualifiedName":"dart-dom-html.EventStreamProvider.forTarget","comment":"<p>Gets a <a>dart-async.Stream</a> for this event type, on the specified target.</p>\n<p>This will always return a broadcast stream so multiple listeners can be\nused simultaneously.</p>\n<p>This may be used to capture DOM events:</p>\n<pre><code>Element.keyDownEvent.forTarget(element, useCapture: true).listen(...);\n\n// Alternate method:\nElement.keyDownEvent.forTarget(element).capture(...);\n</code></pre>\n<p>Or for listening to an event which will bubble through the DOM tree:</p>\n<pre><code>MediaElement.pauseEvent.forTarget(document.body).listen(...);\n</code></pre>\n<p>See also:</p>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/addEventListener\">addEventListener</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.EventStreamProvider.T","inner":[]}]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventTarget","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"getEventType":{"name":"getEventType","qualifiedName":"dart-dom-html.EventStreamProvider.getEventType","comment":"<p>Gets the type of the event which this would listen for on the specified\nevent target.</p>\n<p>The target is necessary because some browsers may use different event names\nfor the same purpose and the target allows differentiating browser support.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"target":{"name":"target","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventTarget","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.EventStreamProvider.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.EventStreamProvider.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.EventStreamProvider.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.EventStreamProvider.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.EventStreamProvider.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.EventStreamProvider.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.EventStreamProvider.noSuchMethod","comment":"<p><a>dart-dom-html.EventStreamProvider.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.EventStreamProvider.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.EventStreamProvider.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.EventStreamProvider.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.EventStreamProvider.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.dom.html.Event"}}}