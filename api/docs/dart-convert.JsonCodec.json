{"name":"JsonCodec","qualifiedName":"dart-convert.JsonCodec","comment":"<p>A <a>dart-convert.JsonCodec</a> encodes JSON objects to strings and decodes strings to\nJSON objects.</p>","isAbstract":false,"superclass":"dart-convert.Codec","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"decoder":{"name":"decoder","qualifiedName":"dart-convert.JsonCodec.decoder","comment":"<p>Returns the decoder of <code>this</code>, converting from <a>dart-convert.Codec.T</a> to <a>dart-convert.Codec.S</a>.</p>\n<p>It may be stateful an should not be reused.</p>","commentFrom":"dart-convert.Codec.decoder","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.JsonDecoder","inner":[]}],"parameters":{},"annotations":[]},"encoder":{"name":"encoder","qualifiedName":"dart-convert.JsonCodec.encoder","comment":"<p>Returns the encoder from <a>dart-convert.Codec.S</a> to <a>dart-convert.Codec.T</a>.</p>\n<p>It may be stateful and should not be reused.</p>","commentFrom":"dart-convert.Codec.encoder","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.JsonEncoder","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-convert.JsonCodec.JsonCodec-","comment":"<p>Creates a <code>JsonCodec</code> with the given reviver and encoding function.</p>\n<p>The <a>dart-convert.JsonCodec.JsonCodec-.reviver</a> function is called during decoding. It is invoked\nonce for each object or list property that has been parsed.\nThe <code>key</code> argument is either the\ninteger list index for a list property, the string map key for object\nproperties, or <code>null</code> for the final result.</p>\n<p>If <a>dart-convert.JsonCodec.JsonCodec-.reviver</a> is omitted, it defaults to returning the value argument.</p>\n<p>The <a>dart-convert.JsonCodec.JsonCodec-.toEncodable</a> function is used during encoding. It is invoked for\nvalues that are not directly encodable to a JSON1toE\nstring (a value that is not a number, boolean, string, null, list or a map\nwith string keys). The function must return an object that is directly\nencodable. The elements of a returned list and values of a returned map\ndo not need be directly encodable, and if they aren't, <code>toEncodable</code> will\nbe used on them as well.\nPlease notice that it is possible to cause an infinite recursive\nregress in this way, by effectively creating an infinite data structure\nthrough repeated call to <code>toEncodable</code>.</p>\n<p>If <a>dart-convert.JsonCodec.JsonCodec-.toEncodable</a> is omitted, it defaults to a function that returns the\nresult of calling <code>.toJson()</code> on the unencodable object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"reviver":{"name":"reviver","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"toEncodable":{"name":"toEncodable","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"withReviver":{"name":"withReviver","qualifiedName":"dart-convert.JsonCodec.JsonCodec-withReviver","comment":"<p>Creates a <code>JsonCodec</code> with the given reviver.</p>\n<p>The <a>dart-convert.JsonCodec.JsonCodec-withReviver.reviver</a> function is called once for each object or list property\nthat has been parsed during decoding. The <code>key</code> argument is either the\ninteger list index for a list property, the string map key for object\nproperties, or <code>null</code> for the final result.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"reviver":{"name":"reviver","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"decode":{"name":"decode","qualifiedName":"dart-convert.JsonCodec.decode","comment":"<p>Parses the string and returns the resulting Json object.</p>\n<p>The optional <a>dart-convert.JsonCodec.decode.reviver</a> function is called once for each object or list\nproperty that has been parsed during decoding. The <code>key</code> argument is either\nthe integer list index for a list property, the string map key for object\nproperties, or <code>null</code> for the final result.</p>\n<p>The default <a>dart-convert.JsonCodec.decode.reviver</a> (when not provided) is the identity function.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"reviver":{"name":"reviver","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"encode":{"name":"encode","qualifiedName":"dart-convert.JsonCodec.encode","comment":"<p>Converts <a>dart-convert.JsonCodec.encode.value</a> to a JSON string.</p>\n<p>If value contains objects that are not directly encodable to a JSON\nstring (a value that is not a number, boolean, string, null, list or a map\nwith string keys), the <a>dart-convert.JsonCodec.encode.toEncodable</a> function is used to convert it to an\nobject that must be directly encodable.</p>\n<p>If <a>dart-convert.JsonCodec.encode.toEncodable</a> is omitted, it defaults to a function that returns the\nresult of calling <code>.toJson()</code> on the unencodable object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"toEncodable":{"name":"toEncodable","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"decoder":{"name":"decoder","qualifiedName":"dart-convert.JsonCodec.decoder","comment":"<p>Returns the decoder of <code>this</code>, converting from <a>dart-convert.Codec.T</a> to <a>dart-convert.Codec.S</a>.</p>\n<p>It may be stateful an should not be reused.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.decoder","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"encoder":{"name":"encoder","qualifiedName":"dart-convert.JsonCodec.encoder","comment":"<p>Returns the encoder from <a>dart-convert.Codec.S</a> to <a>dart-convert.Codec.T</a>.</p>\n<p>It may be stateful and should not be reused.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.encoder","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-convert.JsonCodec.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-convert.JsonCodec.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inverted":{"name":"inverted","qualifiedName":"dart-convert.JsonCodec.inverted","comment":"<p>Inverts <code>this</code>.</p>\n<p>The <a>dart-convert.JsonCodec.encoder</a> and <a>dart-convert.JsonCodec.decoder</a> of the resulting codec are swapped.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.inverted","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Codec","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-convert.JsonCodec.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-convert.JsonCodec.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-convert.JsonCodec.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-convert.JsonCodec.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"decode":{"name":"decode","qualifiedName":"dart-convert.JsonCodec.decode","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Codec.decode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"encoded":{"name":"encoded","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encode":{"name":"encode","qualifiedName":"dart-convert.JsonCodec.encode","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Codec.encode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec.S","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"dart-convert.JsonCodec.fuse","comment":"<p>Fuses <code>this</code> with <code>other</code>.</p>\n<p>When encoding, the resulting codec encodes with <code>this</code> before\nencoding with <a>dart-convert.JsonCodec.fuse.other</a>.</p>\n<p>When decoding, the resulting codec decodes with <a>dart-convert.JsonCodec.fuse.other</a> before decoding\nwith <code>this</code>.</p>\n<p>In some cases one needs to use the <a>dart-convert.JsonCodec.inverted</a> codecs to be able to fuse\nthem correctly. That is, the output type of <code>this</code> (<a>dart-convert.Codec.T</a>) must match the\ninput type of the second codec <a>dart-convert.JsonCodec.fuse.other</a>.</p>\n<p>Examples:</p>\n<pre><code>final JSON_TO_BYTES = JSON.fuse(UTF8);\nList&lt;int&gt; bytes = JSON_TO_BYTES.encode([\"json-object\"]);\nvar decoded = JSON_TO_BYTES.decode(bytes);\nassert(decoded is List &amp;&amp; decoded[0] == \"json-object\");\n\nvar inverted = JSON.inverted;\nvar jsonIdentity = JSON.fuse(inverted);\nvar jsonObject = jsonIdentity.encode([\"1\", 2]);\nassert(jsonObject is List &amp;&amp; jsonObject[0] == \"1\" &amp;&amp; jsonObject[1] == 2);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-convert.Codec.fuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Codec","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-convert.JsonCodec.noSuchMethod","comment":"<p><a>dart-convert.JsonCodec.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-convert.JsonCodec.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-convert.JsonCodec.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-convert.JsonCodec.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-convert.JsonCodec.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}