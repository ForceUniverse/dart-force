{"name":"Storage","qualifiedName":"dart-dom-html.Storage","comment":"<p>The type used by the\n<a>dart-dom-html.Window.localStorage</a> and <a>dart-dom-html.Window.sessionStorage</a> properties.\nStorage is implemented as a Map&lt;String, String>.</p>\n<p>To store and get values, use Dart's built-in map syntax:</p>\n<pre><code>window.localStorage['key1'] = 'val1';\nwindow.localStorage['key2'] = 'val2';\nwindow.localStorage['key3'] = 'val3';\nassert(window.localStorage['key3'] == 'val3');\n</code></pre>\n<p>You can use <a href=\"http://api.dartlang.org/dart_core/Map.html\">Map</a> APIs\nsuch as containsValue(), clear(), and length:</p>\n<pre><code>assert(window.localStorage.containsValue('does not exist') == false);\nwindow.localStorage.clear();\nassert(window.localStorage.length == 0);\n</code></pre>\n<p>For more examples of using this API, see\n<a href=\"http://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/tests/html/localstorage_test.dart\">localstorage_test.dart</a>.\nFor details on using the Map API, see the\n<a href=\"http://www.dartlang.org/docs/library-tour/#maps-aka-dictionaries-or-hashes\">Maps</a>\nsection of the library tour.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Map"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isEmpty":{"name":"isEmpty","qualifiedName":"dart-dom-html.Storage.isEmpty","comment":"<p>Returns true if there is no key-value pair in the map.</p>","commentFrom":"dart-core.Map.isEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-dom-html.Storage.isNotEmpty","comment":"<p>Returns true if there is at least one key-value pair in the map.</p>","commentFrom":"dart-core.Map.isNotEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"keys":{"name":"keys","qualifiedName":"dart-dom-html.Storage.keys","comment":"<p>The keys of this.</p>\n<p>The returned iterable has efficient <code>length</code> and <code>contains</code> operations,\nbased on <a>dart-dom-html.Storage.length</a> and <a>dart-dom-html.Storage.containsKey</a> of the map.</p>\n<p>The order of iteration is defined by the individual <code>Map</code> implementation,\nbut must be consistent between changes to the map.</p>","commentFrom":"dart-core.Map.keys","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-dom-html.Storage.length","comment":"<p>The number of key-value pairs in the map.</p>","commentFrom":"dart-core.Map.length","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"values":{"name":"values","qualifiedName":"dart-dom-html.Storage.values","comment":"<p>The values of this.</p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a>dart-dom-html.Storage.keys</a> and <a>dart-dom-html.Storage.values</a> in parrallel will\nprovided matching pairs of keys and values.</p>\n<p>The returned iterable has an efficient <code>length</code> method based on the\n<a>dart-dom-html.Storage.length</a> of the map.</p>","commentFrom":"dart-core.Map.values","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"[]":{"name":"[]","qualifiedName":"dart-dom-html.Storage.[]","comment":"<p>Returns the value for the given <a>dart-dom-html.Storage.[].key</a> or null if <a>dart-dom-html.Storage.[].key</a> is not\nin the map. Because null values are supported, one should either\nuse <a>dart-dom-html.Storage.containsKey</a> to distinguish between an absent key and a null\nvalue, or use the <a>dart-dom-html.Storage.putIfAbsent</a> method.</p>","commentFrom":"dart-core.Map.[]","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"dart-dom-html.Storage.[]=","comment":"<p>Associates the <a>dart-dom-html.Storage.[]=.key</a> with the given <a>dart-dom-html.Storage.[]=.value</a>.</p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key-value pair is added to the map.</p>","commentFrom":"dart-core.Map.[]=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addAll":{"name":"addAll","qualifiedName":"dart-dom-html.Storage.addAll","comment":"<p>Adds all key-value pairs of <a>dart-dom-html.Storage.addAll.other</a> to this map.</p>\n<p>If a key of <a>dart-dom-html.Storage.addAll.other</a> is already in this map, its value is overwritten.</p>\n<p>The operation is equivalent to doing <code>this[key] = value</code> for each key\nand associated value in other. It iterates over <a>dart-dom-html.Storage.addAll.other</a>, which must\ntherefore not change during the iteration.</p>","commentFrom":"dart-core.Map.addAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-dom-html.Storage.clear","comment":"<p>Removes all pairs from the map.</p>\n<p>After this, the map is empty.</p>","commentFrom":"dart-core.Map.clear","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"containsKey":{"name":"containsKey","qualifiedName":"dart-dom-html.Storage.containsKey","comment":"<p>Returns true if this map contains the given key.</p>","commentFrom":"dart-core.Map.containsKey","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsValue":{"name":"containsValue","qualifiedName":"dart-dom-html.Storage.containsValue","comment":"<p>Returns true if this map contains the given value.</p>","commentFrom":"dart-core.Map.containsValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-dom-html.Storage.forEach","comment":"<p>Applies <a>dart-dom-html.Storage.forEach.f</a> to each {key, value} pair of the map.</p>\n<p>Adding or removing keys from the map during iteration is not allowed.</p>","commentFrom":"dart-core.Map.forEach","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"putIfAbsent":{"name":"putIfAbsent","qualifiedName":"dart-dom-html.Storage.putIfAbsent","comment":"<p>If <a>dart-dom-html.Storage.putIfAbsent.key</a> is not associated to a value, calls <a>dart-dom-html.Storage.putIfAbsent.ifAbsent</a> and\nupdates the map by mapping <a>dart-dom-html.Storage.putIfAbsent.key</a> to the value returned by\n<a>dart-dom-html.Storage.putIfAbsent.ifAbsent</a>. Returns the value in the map.</p>\n<pre><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      // 36\nscores['Rohan'];    //  5\nscores['Sophena'];  //  7\n</code></pre>\n<p>The code that <a>dart-dom-html.Storage.putIfAbsent.ifAbsent</a> executes must not add or remove keys.</p>","commentFrom":"dart-core.Map.putIfAbsent","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"ifAbsent":{"name":"ifAbsent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-dom-html.Storage.remove","comment":"<p>Removes the association for the given <a>dart-dom-html.Storage.remove.key</a>. Returns the value for\n<a>dart-dom-html.Storage.remove.key</a> in the map or null if <a>dart-dom-html.Storage.remove.key</a> is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.</p>","commentFrom":"dart-core.Map.remove","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.Storage.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.Storage.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-dom-html.Storage.isEmpty","comment":"<p>Returns true if there is no key-value pair in the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.isEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-dom-html.Storage.isNotEmpty","comment":"<p>Returns true if there is at least one key-value pair in the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.isNotEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"keys":{"name":"keys","qualifiedName":"dart-dom-html.Storage.keys","comment":"<p>The keys of this.</p>\n<p>The returned iterable has efficient <code>length</code> and <code>contains</code> operations,\nbased on <a>dart-dom-html.Storage.length</a> and <a>dart-dom-html.Storage.containsKey</a> of the map.</p>\n<p>The order of iteration is defined by the individual <code>Map</code> implementation,\nbut must be consistent between changes to the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.keys","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.K","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-dom-html.Storage.length","comment":"<p>The number of key-value pairs in the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.Storage.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"values":{"name":"values","qualifiedName":"dart-dom-html.Storage.values","comment":"<p>The values of this.</p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a>dart-dom-html.Storage.keys</a> and <a>dart-dom-html.Storage.values</a> in parrallel will\nprovided matching pairs of keys and values.</p>\n<p>The returned iterable has an efficient <code>length</code> method based on the\n<a>dart-dom-html.Storage.length</a> of the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.values","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Map.V","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.Storage.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.Storage.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.Storage.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"dart-dom-html.Storage.[]","comment":"<p>Returns the value for the given <a>dart-dom-html.Storage.[].key</a> or null if <a>dart-dom-html.Storage.[].key</a> is not\nin the map. Because null values are supported, one should either\nuse <a>dart-dom-html.Storage.containsKey</a> to distinguish between an absent key and a null\nvalue, or use the <a>dart-dom-html.Storage.putIfAbsent</a> method.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.[]","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"dart-dom-html.Storage.[]=","comment":"<p>Associates the <a>dart-dom-html.Storage.[]=.key</a> with the given <a>dart-dom-html.Storage.[]=.value</a>.</p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key-value pair is added to the map.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.[]=","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.V","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addAll":{"name":"addAll","qualifiedName":"dart-dom-html.Storage.addAll","comment":"<p>Adds all key-value pairs of <a>dart-dom-html.Storage.addAll.other</a> to this map.</p>\n<p>If a key of <a>dart-dom-html.Storage.addAll.other</a> is already in this map, its value is overwritten.</p>\n<p>The operation is equivalent to doing <code>this[key] = value</code> for each key\nand associated value in other. It iterates over <a>dart-dom-html.Storage.addAll.other</a>, which must\ntherefore not change during the iteration.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.addAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Map.K","inner":[]},{"outer":"dart-core.Map.V","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-dom-html.Storage.clear","comment":"<p>Removes all pairs from the map.</p>\n<p>After this, the map is empty.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.clear","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"containsKey":{"name":"containsKey","qualifiedName":"dart-dom-html.Storage.containsKey","comment":"<p>Returns true if this map contains the given key.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.containsKey","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsValue":{"name":"containsValue","qualifiedName":"dart-dom-html.Storage.containsValue","comment":"<p>Returns true if this map contains the given value.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.containsValue","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-dom-html.Storage.forEach","comment":"<p>Applies <a>dart-dom-html.Storage.forEach.f</a> to each {key, value} pair of the map.</p>\n<p>Adding or removing keys from the map during iteration is not allowed.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.forEach","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.V","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.Storage.noSuchMethod","comment":"<p><a>dart-dom-html.Storage.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.Storage.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.Storage.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.Storage.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"putIfAbsent":{"name":"putIfAbsent","qualifiedName":"dart-dom-html.Storage.putIfAbsent","comment":"<p>If <a>dart-dom-html.Storage.putIfAbsent.key</a> is not associated to a value, calls <a>dart-dom-html.Storage.putIfAbsent.ifAbsent</a> and\nupdates the map by mapping <a>dart-dom-html.Storage.putIfAbsent.key</a> to the value returned by\n<a>dart-dom-html.Storage.putIfAbsent.ifAbsent</a>. Returns the value in the map.</p>\n<pre><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      // 36\nscores['Rohan'];    //  5\nscores['Sophena'];  //  7\n</code></pre>\n<p>The code that <a>dart-dom-html.Storage.putIfAbsent.ifAbsent</a> executes must not add or remove keys.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.putIfAbsent","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map.K","inner":[]}],"value":null,"annotations":[]},"ifAbsent":{"name":"ifAbsent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-dom-html.Storage.remove","comment":"<p>Removes the association for the given <a>dart-dom-html.Storage.remove.key</a>. Returns the value for\n<a>dart-dom-html.Storage.remove.key</a> in the map or null if <a>dart-dom-html.Storage.remove.key</a> is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.</p>","commentFrom":"","inheritedFrom":"dart-core.Map.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map.V","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.Storage.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["'Storage'"]},{"name":"metadata.Unstable","parameters":[]}],"generics":{}}