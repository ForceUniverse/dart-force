{"name":"dart-mirrors","qualifiedName":"dart-mirrors","comment":"<p>Basic reflection in Dart,\nwith support for introspection and dynamic evaluation.</p>\n<p><em>Introspection</em> is that subset of reflection by which a running\nprogram can examine its own structure. For example, a function\nthat prints out the names of all the members of an arbitrary object.</p>\n<p><em>Dynamic evaluation</em> refers the ability to evaluate code that\nhas not been literally specified at compile time, such as calling a method\nwhose name is provided as an argument (because it is looked up\nin a database, or provided interactively by the user).</p>\n<h2>How to interpret this library's documentation</h2>\n<p>As a rule, the names of Dart declarations are represented using\ninstances of class <a>dart-core.Symbol</a>. Whenever the doc speaks of an object <em>s</em>\nof class <a>dart-core.Symbol</a> denoting a name, it means the string that\nwas used to construct <em>s</em>.</p>\n<p>The documentation frequently abuses notation with\nDart pseudo-code such as <code>o.x(a)</code>, where\no and a are defined to be objects; what is actually meant in these\ncases is <code>o'.x(a')</code> where <em>o'</em> and <em>a'</em> are Dart variables\nbound to <em>o</em> and <em>a</em> respectively. Furthermore, <em>o'</em> and <em>a'</em>\nare assumed to be fresh variables (meaning that they are\ndistinct from any other variables in the program).</p>\n<p>Sometimes the documentation refers to <em>serializable</em> objects.\nAn object is serializable across isolates if and only if it is an instance of\nnum, bool, String, a list of objects that are serializable\nacross isolates, or a map with keys and values that are all serializable across\nisolates.</p>\n<h2>Status: Unstable</h2>\n<p>The dart:mirrors library is unstable and its API might change slightly as a\nresult of user feedback. This library is platform dependent and therefore it\nhas implementations for both dart2js and the Dart VM. Both are under\ndevelopment and may not support all operations yet.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"currentMirrorSystem":{"name":"currentMirrorSystem","qualifiedName":"dart-mirrors.currentMirrorSystem","comment":"<p>Returns a <a>dart-mirrors.MirrorSystem</a> for the current isolate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-mirrors.MirrorSystem","inner":[]}],"parameters":{},"annotations":[]},"reflect":{"name":"reflect","qualifiedName":"dart-mirrors.reflect","comment":"<p>Reflects an instance.\nReturns an <a>dart-mirrors.InstanceMirror</a> reflecting <a>dart-mirrors.reflect.reflectee</a>.\nIf <a>dart-mirrors.reflect.reflectee</a> is a function or an instance of a class\nthat has a <code>call</code> method, the returned instance mirror\nwill be a <a>dart-mirrors.ClosureMirror</a>.</p>\n<p>Note that since one cannot obtain an object from\nanother isolate, this function can only be used to\nobtain  mirrors on objects of the current isolate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}],"parameters":{"reflectee":{"name":"reflectee","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reflectClass":{"name":"reflectClass","qualifiedName":"dart-mirrors.reflectClass","comment":"<p>Reflects a class declaration.\nLet <em>C</em> be the original class declaration of the class\nrepresented by <a>dart-mirrors.reflectClass.key</a>.\nThis function returns a <a>dart-mirrors.ClassMirror</a> reflecting <em>C</em>.</p>\n<p>If <a>dart-mirrors.reflectClass.key</a> is not an instance of <a>dart-core.Type</a> then this function\nthrows an <a>dart-core.ArgumentError</a>. If <a>dart-mirrors.reflectClass.key</a> is the Type for dynamic\nor a function typedef, throws an <a>dart-core.ArgumentError</a>.</p>\n<p>Note that since one cannot obtain a <a>dart-core.Type</a> object from\nanother isolate, this function can only be used to\nobtain class mirrors on classes of the current isolate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-mirrors.ClassMirror","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reflectType":{"name":"reflectType","qualifiedName":"dart-mirrors.reflectType","comment":"<p>This function returns a <a>dart-mirrors.TypeMirror</a> reflecting the type\nrepresented by <a>dart-mirrors.reflectType.key</a>.</p>\n<p>If <a>dart-mirrors.reflectType.key</a> is not an instance of <a>dart-core.Type</a> then this function\nthrows an <a>dart-core.ArgumentError</a>.</p>\n<p>Note that since one cannot obtain a <a>dart-core.Type</a> object from\nanother isolate, this function can only be used to\nobtain type mirrors on types of the current isolate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-mirrors.TypeMirror","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"ClassMirror","qualifiedName":"dart-mirrors.ClassMirror","preview":"<p>A <a>dart-mirrors.ClassMirror</a> reflects a Dart language class.</p>"},{"name":"ClosureMirror","qualifiedName":"dart-mirrors.ClosureMirror","preview":"<p>A <a>dart-mirrors.ClosureMirror</a> reflects a closure.</p>"},{"name":"CombinatorMirror","qualifiedName":"dart-mirrors.CombinatorMirror","preview":"<p>A mirror on a show/hide combinator declared on a library dependency.</p>"},{"name":"Comment","qualifiedName":"dart-mirrors.Comment","preview":"<p>Class used for encoding comments as metadata annotations.</p>"},{"name":"DeclarationMirror","qualifiedName":"dart-mirrors.DeclarationMirror","preview":"<p>A <a>dart-mirrors.DeclarationMirror</a> reflects some entity declared in a Dart program.</p>"},{"name":"FunctionTypeMirror","qualifiedName":"dart-mirrors.FunctionTypeMirror","preview":"<p>A <a>dart-mirrors.FunctionTypeMirror</a> represents the type of a function in the\nDart language.</p>"},{"name":"InstanceMirror","qualifiedName":"dart-mirrors.InstanceMirror","preview":"<p>An <a>dart-mirrors.InstanceMirror</a> reflects an instance of a Dart language object.</p>"},{"name":"IsolateMirror","qualifiedName":"dart-mirrors.IsolateMirror","preview":"<p>An <a>dart-mirrors.IsolateMirror</a> reflects an isolate.</p>"},{"name":"LibraryDependencyMirror","qualifiedName":"dart-mirrors.LibraryDependencyMirror","preview":"<p>A mirror on an import or export declaration.</p>"},{"name":"LibraryMirror","qualifiedName":"dart-mirrors.LibraryMirror","preview":"<p>A <a>dart-mirrors.LibraryMirror</a> reflects a Dart language library, providing\naccess to the variables, functions, and classes of the\nlibrary.</p>"},{"name":"MethodMirror","qualifiedName":"dart-mirrors.MethodMirror","preview":"<p>A <a>dart-mirrors.MethodMirror</a> reflects a Dart language function, method,\nconstructor, getter, or setter.</p>"},{"name":"Mirror","qualifiedName":"dart-mirrors.Mirror","preview":"<p>A <a>dart-mirrors.Mirror</a> reflects some Dart language entity.</p>"},{"name":"MirrorSystem","qualifiedName":"dart-mirrors.MirrorSystem","preview":"<p>A <a>dart-mirrors.MirrorSystem</a> is the main interface used to reflect on a set of\nassociated libraries.</p>"},{"name":"MirrorsUsed","qualifiedName":"dart-mirrors.MirrorsUsed","preview":"<p>Annotation describing how \"dart:mirrors\" is used (EXPERIMENTAL).</p>"},{"name":"ObjectMirror","qualifiedName":"dart-mirrors.ObjectMirror","preview":"<p>An <a>dart-mirrors.ObjectMirror</a> is a common superinterface of <a>dart-mirrors.InstanceMirror</a>,\n<a>dart-mirrors.ClassMirror</a>, and <a>dart-mirrors.LibraryMirror</a> that represents their shared\nfunctionality.</p>"},{"name":"ParameterMirror","qualifiedName":"dart-mirrors.ParameterMirror","preview":"<p>A <a>dart-mirrors.ParameterMirror</a> reflects a Dart formal parameter declaration.</p>"},{"name":"SourceLocation","qualifiedName":"dart-mirrors.SourceLocation","preview":"<p>A <a>dart-mirrors.SourceLocation</a> describes the span of an entity in Dart source code.</p>"},{"name":"TypeMirror","qualifiedName":"dart-mirrors.TypeMirror","preview":"<p>A <a>dart-mirrors.TypeMirror</a> reflects a Dart language class, typedef,\nfunction type or type variable.</p>"},{"name":"TypeVariableMirror","qualifiedName":"dart-mirrors.TypeVariableMirror","preview":"<p>A <a>dart-mirrors.TypeVariableMirror</a> represents a type parameter of a generic\ntype.</p>"},{"name":"TypedefMirror","qualifiedName":"dart-mirrors.TypedefMirror","preview":"<p>A <a>dart-mirrors.TypedefMirror</a> represents a typedef in a Dart language program.</p>"},{"name":"VariableMirror","qualifiedName":"dart-mirrors.VariableMirror","preview":"<p>A <a>dart-mirrors.VariableMirror</a> reflects a Dart language variable declaration.</p>"}],"typedef":{},"error":[]},"packageName":"","packageIntro":null}