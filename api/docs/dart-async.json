{"name":"dart-async","qualifiedName":"dart-async","comment":"<p>Support for asynchronous programming,\nwith classes such as Future and Stream.</p>\n<p>Understanding <a>dart-async.Future</a>s and <a>dart-async.Stream</a>s is a prerequisite for\nwriting just about any Dart program.</p>\n<p>To use this library in your code:</p>\n<pre><code>import 'dart:async';\n</code></pre>\n<h2>Future</h2>\n<p>A Future object represents a computation whose return value\nmight not yet be available.\nThe Future returns the value of the computation\nwhen it completes at some time in the future.\nFutures are often used for potentially lengthy computations\nsuch as I/O and interaction with users.</p>\n<p>Many methods in the Dart libraries return Futures when\nperforming tasks. For example, when binding an HttpServer\nto a host and port, the <code>bind()</code> method returns a Future.</p>\n<pre><code> HttpServer.bind('127.0.0.1', 4444)\n     .then((server) =&gt; print('${server.isBroadcast}'))\n     .catchError(print);\n</code></pre>\n<p><a>dart-async.Future.then</a> registers a callback function that runs\nwhen the Future's operation, in this case the <code>bind()</code> method,\ncompletes successfully.\nThe value returned by the operation\nis passed into the callback function.\nIn this example, the <code>bind()</code> method returns the HttpServer\nobject. The callback function prints one of its properties.\n<a>dart-async.Future.catchError</a> registers a callback function that\nruns if an error occurs within the Future.</p>\n<h2>Stream</h2>\n<p>A Stream provides an asynchronous sequence of data.\nExamples of data sequences include individual events, like mouse clicks,\nor sequential chunks of larger data, like multiple byte lists with the\ncontents of a file\nsuch as mouse clicks, and a stream of byte lists read from a file.\nThe following example opens a file for reading.\n<a>dart-async.Stream.listen</a> registers a callback function that runs\neach time more data is available.</p>\n<pre><code>Stream&lt;List&lt;int&gt;&gt; stream = new File('quotes.txt').openRead();\nstream.transform(UTF8.decoder).listen(print);\n</code></pre>\n<p>The stream emits a sequence of a list of bytes.\nThe program must interpret the bytes or handle the raw byte data.\nHere, the code uses a UTF8 decoder (provided in the <code>dart:convert</code> library)\nto convert the sequence of bytes into a sequence\nof Dart strings.</p>\n<p>Another common use of streams is for user-generated events\nin a web app: The following code listens for mouse clicks on a button.</p>\n<pre><code>querySelector('#myButton').onClick.listen((_) =&gt; print('Click.'));\n</code></pre>\n<h2>Other resources</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-asynchronous-programming\">dart:async section of the library tour</a>:\nA brief overview of asynchronous programming.</p></li><li>\n<p><a href=\"https://www.dartlang.org/docs/tutorials/futures/\">Use Future-Based APIs</a>: A closer look at\nFutures and how to use them to write asynchronous Dart code.</p></li><li>\n<p><a href=\"https://www.dartlang.org/articles/futures-and-error-handling/\">Futures and Error Handling</a>: Everything\nyou wanted to know about handling errors and exceptions when working with\nFutures (but were afraid to ask).</p></li><li>\n<p><a href=\"https://www.dartlang.org/articles/event-loop/\">The Event Loop and Dart</a>:\nLearn how Dart handles the event queue and microtask queue, so you can write\nbetter asynchronous code with fewer surprises.</p></li><li>\n<p><a href=\"https://www.dartlang.org/articles/dart-unit-tests/#asynchronous-tests\">Asynchronous Unit Testing with Dart</a>: How\nto test asynchronous code.</p></li></ul>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"runZoned":{"name":"runZoned","qualifiedName":"dart-async.runZoned","comment":"<p>Runs <a>dart-async.runZoned.body</a> in its own zone.</p>\n<p>If <a>dart-async.runZoned.onError</a> is non-null the zone is considered an error zone. All uncaught\nerrors, synchronous or asynchronous, in the zone are caught and handled\nby the callback.</p>\n<p>Errors may never cross error-zone boundaries. This is intuitive for leaving\na zone, but it also applies for errors that would enter an error-zone.\nErrors that try to cross error-zone boundaries are considered uncaught.</p>\n<pre><code>var future = new Future.value(499);\nrunZoned(() {\n  future = future.then((_) { throw \"error in first error-zone\"; });\n  runZoned(() {\n    future = future.catchError((e) { print(\"Never reached!\"); });\n  }, onError: (e) { print(\"unused error handler\"); });\n}, onError: (e) { print(\"catches error of first error-zone.\"); });\n</code></pre>\n<p>Example:</p>\n<pre><code>runZoned(() {\n  new Future(() { throw \"asynchronous error\"; });\n}, onError: print);  // Will print \"asynchronous error\".\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}},"zoneValues":{"name":"zoneValues","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"zoneSpecification":{"name":"zoneSpecification","optional":true,"named":true,"default":false,"type":[{"outer":"dart-async.ZoneSpecification","inner":[]}],"value":null,"annotations":[]},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scheduleMicrotask":{"name":"scheduleMicrotask","qualifiedName":"dart-async.scheduleMicrotask","comment":"<p>Runs a function asynchronously.</p>\n<p>Callbacks registered through this function are always executed in order and\nare guaranteed to run before other asynchronous events (like <a>dart-async.Timer</a> events,\nor DOM events).</p>\n<p><strong>Warning:</strong> it is possible to starve the DOM by registering asynchronous\ncallbacks through this method. For example the following program runs\nthe callbacks without ever giving the Timer callback a chance to execute:</p>\n<pre><code>Timer.run(() { print(\"executed\"); });  // Will never be executed.\nfoo() {\n  scheduleMicrotask(foo);  // Schedules [foo] in front of other events.\n}\nmain() {\n  foo();\n}\n</code></pre>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://www.dartlang.org/articles/event-loop/\">The Event Loop and Dart</a>:\nLearn how Dart handles the event queue and microtask queue, so you can write\nbetter asynchronous code with fewer surprises.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}}},"annotations":[]}}},"classes":{"class":[{"name":"Completer","qualifiedName":"dart-async.Completer","preview":"<p>A way to produce Future objects and to complete them later\nwith a value or error.</p>"},{"name":"DeferredLibrary","qualifiedName":"dart-async.DeferredLibrary","preview":"<p>Indicates that loading of <a>dart-async.DeferredLibrary.libraryName</a> is deferred.</p>"},{"name":"EventSink","qualifiedName":"dart-async.EventSink","preview":"<p>An interface that abstracts creation or handling of <a>dart-async.Stream</a> events.</p>"},{"name":"Future","qualifiedName":"dart-async.Future","preview":"<p>An object representing a delayed computation.</p>"},{"name":"Stream","qualifiedName":"dart-async.Stream","preview":"<p>A source of asynchronous data events.</p>"},{"name":"StreamConsumer","qualifiedName":"dart-async.StreamConsumer","preview":"<p>The target of a <a>dart-async.Stream.pipe</a> call.</p>"},{"name":"StreamController","qualifiedName":"dart-async.StreamController","preview":"<p>A controller with the stream it controls.</p>"},{"name":"StreamIterator","qualifiedName":"dart-async.StreamIterator","preview":"<p>An <a>dart-core.Iterable</a> like interface for the values of a <a>dart-async.Stream</a>.</p>"},{"name":"StreamSink","qualifiedName":"dart-async.StreamSink","preview":"<p>A <a>dart-async.StreamSink</a> unifies the asynchronous methods from <a>dart-async.StreamConsumer</a> and\nthe synchronous methods from <a>dart-async.EventSink</a>.</p>"},{"name":"StreamSubscription","qualifiedName":"dart-async.StreamSubscription","preview":"<p>A control object for the subscription on a <a>dart-async.Stream</a>.</p>"},{"name":"StreamTransformer","qualifiedName":"dart-async.StreamTransformer","preview":"<p>The target of a <a>dart-async.Stream.transform</a> call.</p>"},{"name":"StreamView","qualifiedName":"dart-async.StreamView","preview":"<p><a>dart-async.Stream</a> wrapper that only exposes the <a>dart-async.Stream</a> interface.</p>"},{"name":"Timer","qualifiedName":"dart-async.Timer","preview":"<p>A count-down timer that can be configured to fire once or repeatedly.</p>"},{"name":"Zone","qualifiedName":"dart-async.Zone","preview":"<p>A Zone represents the asynchronous version of a dynamic extent. Asynchronous\ncallbacks are executed in the zone they have been queued in. For example,\nthe callback of a <code>future.then</code> is executed in the same zone as the one where\nthe <code>then</code> was invoked.</p>"},{"name":"ZoneDelegate","qualifiedName":"dart-async.ZoneDelegate","preview":"<p>This class wraps zones for delegation.</p>"},{"name":"ZoneSpecification","qualifiedName":"dart-async.ZoneSpecification","preview":"<p>This class provides the specification for a forked zone.</p>"}],"typedef":{"CreatePeriodicTimerHandler":{"name":"CreatePeriodicTimerHandler","qualifiedName":"dart-async.CreatePeriodicTimerHandler","comment":"","return":"dart-async.Timer","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"period":{"name":"period","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"timer":{"name":"timer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Timer","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[],"generics":{}},"CreateTimerHandler":{"name":"CreateTimerHandler","qualifiedName":"dart-async.CreateTimerHandler","comment":"","return":"dart-async.Timer","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}}},"annotations":[],"generics":{}},"ForkHandler":{"name":"ForkHandler","qualifiedName":"dart-async.ForkHandler","comment":"","return":"dart-async.Zone","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"specification":{"name":"specification","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneSpecification","inner":[]}],"value":null,"annotations":[]},"zoneValues":{"name":"zoneValues","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"HandleUncaughtErrorHandler":{"name":"HandleUncaughtErrorHandler","qualifiedName":"dart-async.HandleUncaughtErrorHandler","comment":"","return":"dynamic","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"PrintHandler":{"name":"PrintHandler","qualifiedName":"dart-async.PrintHandler","comment":"","return":"void","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"line":{"name":"line","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"RegisterBinaryCallbackHandler":{"name":"RegisterBinaryCallbackHandler","qualifiedName":"dart-async.RegisterBinaryCallbackHandler","comment":"","return":"dart-async.ZoneBinaryCallback","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[],"generics":{}},"RegisterCallbackHandler":{"name":"RegisterCallbackHandler","qualifiedName":"dart-async.RegisterCallbackHandler","comment":"","return":"dart-async.ZoneCallback","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[],"generics":{}},"RegisterUnaryCallbackHandler":{"name":"RegisterUnaryCallbackHandler","qualifiedName":"dart-async.RegisterUnaryCallbackHandler","comment":"","return":"dart-async.ZoneUnaryCallback","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[],"generics":{}},"RunBinaryHandler":{"name":"RunBinaryHandler","qualifiedName":"dart-async.RunBinaryHandler","comment":"","return":"dynamic","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"RunHandler":{"name":"RunHandler","qualifiedName":"dart-async.RunHandler","comment":"","return":"dynamic","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[],"generics":{}},"RunUnaryHandler":{"name":"RunUnaryHandler","qualifiedName":"dart-async.RunUnaryHandler","comment":"","return":"dynamic","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"ScheduleMicrotaskHandler":{"name":"ScheduleMicrotaskHandler","qualifiedName":"dart-async.ScheduleMicrotaskHandler","comment":"","return":"void","parameters":{"self":{"name":"self","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneDelegate","inner":[]}],"value":null,"annotations":[]},"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[],"generics":{}},"ZoneBinaryCallback":{"name":"ZoneBinaryCallback","qualifiedName":"dart-async.ZoneBinaryCallback","comment":"","return":"dynamic","parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"ZoneCallback":{"name":"ZoneCallback","qualifiedName":"dart-async.ZoneCallback","comment":"","return":"dynamic","parameters":{},"annotations":[],"generics":{}},"ZoneUnaryCallback":{"name":"ZoneUnaryCallback","qualifiedName":"dart-async.ZoneUnaryCallback","comment":"","return":"dynamic","parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}}},"error":[{"name":"DeferredLoadException","qualifiedName":"dart-async.DeferredLoadException","preview":"<p>Thrown when a deferred library fails to load.</p>"},{"name":"TimeoutException","qualifiedName":"dart-async.TimeoutException","preview":"<p>Thrown when a scheduled timeout happens while waiting for an async result.</p>"}]},"packageName":"","packageIntro":null}