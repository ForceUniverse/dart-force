{"name":"HttpServer","qualifiedName":"dart-io.HttpServer","comment":"<p>A server that delivers content, such as web pages, using the HTTP protocol.</p>\n<p>The HttpServer is a <a>dart-async.Stream</a> that provides <a>dart-io.HttpRequest</a> objects. Each\nHttpRequest has an associated <a>dart-io.HttpResponse</a> object.\nThe server responds to a request by writing to that HttpResponse object.\nThe following example shows how to bind an HttpServer to an IPv6\n<a>dart-io.InternetAddress</a> on port 80 (the standard port for HTTP servers)\nand how to listen for requests.\nPort 80 is the default HTTP port. However, on most systems accessing\nthis requires super-user privileges. For local testing consider\nusing a non-reserved port (1024 and above).</p>\n<pre><code>import 'dart:io';\n\nmain() {\n  HttpServer\n      .bind(InternetAddress.ANY_IP_V6, 80)\n      .then((server) {\n        server.listen((HttpRequest request) {\n          request.response.write('Hello, world!');\n          request.response.close();\n        });\n      });\n}\n</code></pre>\n<p>Incomplete requests, in which all or part of the header is missing, are\nignored, and no exceptions or HttpRequest objects are generated for them.\nLikewise, when writing to an HttpResponse, any <a>dart-io.Socket</a> exceptions are\nignored and any future writes are ignored.</p>\n<p>The HttpRequest exposes the request headers and provides the request body,\nif it exists, as a Stream of data. If the body is unread, it is drained\nwhen the server writes to the HttpResponse or closes it.</p>\n<h2>Bind with a secure HTTPS connection</h2>\n<p>Use <a>dart-io.HttpServer.bindSecure</a> to create an HTTPS server.</p>\n<p>The server presents a certificate to the client. In the following\nexample, the certificate is named <code>localhost_cert</code> and comes from \nthe database found in the <code>pkcert</code> directory.</p>\n<pre><code>import 'dart:io';\nimport \"dart:isolate\";\n\nmain() {\n  var testPkcertDatabase = Platform.script.resolve('pkcert')\n                                   .toFilePath();\n  SecureSocket.initialize(database: testPkcertDatabase,\n                          password: 'dartdart');\n\n  HttpServer\n      .bindSecure(InternetAddress.ANY_IP_V6,\n                  443,\n                  certificateName: 'localhost_cert')\n      .then((server) {\n        server.listen((HttpRequest request) {\n          request.response.write('Hello, world!');\n          request.response.close();\n        });\n      });\n}\n</code></pre>\n<p>The certificate database is managed using the Mozilla certutil tool (see\n<a href=\"https://developer.mozilla.org/en-US/docs/NSS/tools/NSS_Tools_certutil\">NSS Tools certutil</a>).\nDart uses the NSS library to handle SSL, and the Mozilla certutil\nmust be used to manipulate the certificate database.</p>\n<h2>Connect to a server socket</h2>\n<p>You can use the listenOn constructor to attach an HTTP server to\na <a>dart-io.ServerSocket</a>.</p>\n<pre><code>import 'dart:io';\n\nmain() {\n  ServerSocket.bind(InternetAddress.ANY_IP_V6, 80)\n    .then((serverSocket) {\n      HttpServer httpserver = new HttpServer.listenOn(serverSocket);\n      serverSocket.listen((Socket socket) {\n        socket.write('Hello, client.');\n      });\n    });\n}\n</code></pre>\n<h2>Other resources</h2><ul><li>\n<p>HttpServer is a Stream. Refer to the <a>dart-async.Stream</a> class for information\nabout the streaming qualities of an HttpServer.\nPausing the subscription of the stream, pauses at the OS level.</p></li><li>\n<p>The <a href=\"https://pub.dartlang.org/packages/http_server\">http_server</a>\npackage on pub.dartlang.org contains a set of high-level classes that,\ntogether with this class, makes it easy to provide content through HTTP\nservers.</p></li></ul>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-async.Stream"],"subclass":[],"variables":{"idleTimeout":{"name":"idleTimeout","qualifiedName":"dart-io.HttpServer.idleTimeout","comment":"<p>Get or set the timeout used for idle keep-alive connections. If no further\nrequest is seen within <a>dart-io.HttpServer.idleTimeout</a> after the previous request was\ncompleted, the connection is dropped.</p>\n<p>Default is 120 seconds.</p>\n<p>Note that it may take up to <code>2 * idleTimeout</code> before a idle connection is\naborted.</p>\n<p>To disable, set <a>dart-io.HttpServer.idleTimeout</a> to <code>null</code>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"annotations":[]},"serverHeader":{"name":"serverHeader","qualifiedName":"dart-io.HttpServer.serverHeader","comment":"<p>Set and get the default value of the <code>Server</code> header for all responses\ngenerated by this <a>dart-io.HttpServer</a>. By default, it's disabled.</p>\n<p>If the serverHeader is set to <code>null</code>, no default <code>Server</code> header will be\nadded to each response.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"sessionTimeout=":{"name":"sessionTimeout=","qualifiedName":"dart-io.HttpServer.sessionTimeout=","comment":"<p>Sets the timeout, in seconds, for sessions of this <a>dart-io.HttpServer</a>.\nThe default timeout is 20 minutes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"timeout":{"name":"timeout","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"address":{"name":"address","qualifiedName":"dart-io.HttpServer.address","comment":"<p>Returns the address that the server is listening on. This can be\nused to get the actual address used, when the address is fetched by\na lookup from a hostname.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"port":{"name":"port","qualifiedName":"dart-io.HttpServer.port","comment":"<p>Returns the port that the server is listening on. This can be\nused to get the actual port used when a value of 0 for <code>port</code> is\nspecified in the <a>dart-io.HttpServer.bind</a> or <a>dart-io.HttpServer.bindSecure</a> call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"listenOn":{"name":"listenOn","qualifiedName":"dart-io.HttpServer.HttpServer-listenOn","comment":"<p>Attaches the HTTP server to an existing <a>dart-io.ServerSocket</a>. When the\n<a>dart-io.HttpServer</a> is closed, the <a>dart-io.HttpServer</a> will just detach itself,\nclosing current connections but not closing <a>dart-io.HttpServer.HttpServer-listenOn.serverSocket</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.HttpServer","inner":[]}],"parameters":{"serverSocket":{"name":"serverSocket","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.ServerSocket","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"bind":{"name":"bind","qualifiedName":"dart-io.HttpServer.bind","comment":"<p>Starts listening for HTTP requests on the specified <a>dart-io.HttpServer.bind.address</a> and\n<a>dart-io.HttpServer.bind.port</a>.</p>\n<p>The <a>dart-io.HttpServer.bind.address</a> can either be a <a>dart-core.String</a> or an\n<a>dart-io.InternetAddress</a>. If <a>dart-io.HttpServer.bind.address</a> is a <a>dart-core.String</a>, <a>dart-io.HttpServer.bind</a> will\nperform a <a>dart-io.InternetAddress.lookup</a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n[InternetAddress.LOOPBACK_IP_V4] or\n[InternetAddress.LOOPBACK_IP_V6]. To allow for incoming\nconnection from the network use either one of the values\n[InternetAddress.ANY_IP_V4] or [InternetAddress.ANY_IP_V6] to\nbind to all interfaces or the IP address of a specific interface.</p>\n<p>If an IP version 6 (IPv6) address is used, both IP version 6\n(IPv6) and version 4 (IPv4) connections will be accepted. To\nrestrict this to version 6 (IPv6) only, use <a>dart-io.HttpServer.HttpServer-listenOn</a>\nwith a <a>dart-io.ServerSocket</a> configured for IP version 6 connections\nonly.</p>\n<p>If <a>dart-io.HttpServer.bind.port</a> has the value <code>0</code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<a>dart-io.HttpServer.bind.port</a> getter.</p>\n<p>The optional argument <a>dart-io.HttpServer.bind.backlog</a> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <a>dart-io.HttpServer.bind.backlog</a> has the\nvalue of <code>0</code> (the default) a reasonable value will be chosen by\nthe system.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.HttpServer","inner":[]}]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"backlog":{"name":"backlog","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"bindSecure":{"name":"bindSecure","qualifiedName":"dart-io.HttpServer.bindSecure","comment":"<p>The <a>dart-io.HttpServer.bindSecure.address</a> can either be a <a>dart-core.String</a> or an\n<a>dart-io.InternetAddress</a>. If <a>dart-io.HttpServer.bindSecure.address</a> is a <a>dart-core.String</a>, <a>dart-io.HttpServer.bind</a> will\nperform a <a>dart-io.InternetAddress.lookup</a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n[InternetAddress.LOOPBACK_IP_V4] or\n[InternetAddress.LOOPBACK_IP_V6]. To allow for incoming\nconnection from the network use either one of the values\n[InternetAddress.ANY_IP_V4] or [InternetAddress.ANY_IP_V6] to\nbind to all interfaces or the IP address of a specific interface.</p>\n<p>If an IP version 6 (IPv6) address is used, both IP version 6\n(IPv6) and version 4 (IPv4) connections will be accepted. To\nrestrict this to version 6 (IPv6) only, use <a>dart-io.HttpServer.HttpServer-listenOn</a>\nwith a <a>dart-io.ServerSocket</a> configured for IP version 6 connections\nonly.</p>\n<p>If <a>dart-io.HttpServer.bindSecure.port</a> has the value <code>0</code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<a>dart-io.HttpServer.bindSecure.port</a> getter.</p>\n<p>The optional argument <a>dart-io.HttpServer.bindSecure.backlog</a> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <a>dart-io.HttpServer.bindSecure.backlog</a> has the\nvalue of <code>0</code> (the default) a reasonable value will be chosen by\nthe system.</p>\n<p>The certificate with nickname or distinguished name (DN) <a>dart-io.HttpServer.bindSecure.certificateName</a>\nis looked up in the certificate database, and is used as the server\ncertificate. If <a>dart-io.HttpServer.bindSecure.requestClientCertificate</a> is true, the server will\nrequest clients to authenticate with a client certificate.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.HttpServer","inner":[]}]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"backlog":{"name":"backlog","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"certificateName":{"name":"certificateName","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"requestClientCertificate":{"name":"requestClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"dart-io.HttpServer.close","comment":"<p>Permanently stops this <a>dart-io.HttpServer</a> from listening for new\nconnections.  This closes the <a>dart-async.Stream</a> of <a>dart-io.HttpRequest</a>s with a\ndone event. The returned future completes when the server is\nstopped. For a server started using <a>dart-io.HttpServer.bind</a> or <a>dart-io.HttpServer.bindSecure</a> this\nmeans that the port listened on no longer in use.</p>\n<p>If <a>dart-io.HttpServer.close.force</a> is <code>true</code>, active connections will be closed immediately.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"force":{"name":"force","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"connectionsInfo":{"name":"connectionsInfo","qualifiedName":"dart-io.HttpServer.connectionsInfo","comment":"<p>Returns an <a>dart-io.HttpConnectionsInfo</a> object summarizing the number of\ncurrent connections handled by the server.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HttpConnectionsInfo","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"dart-io.HttpServer.first","comment":"<p>Returns the first element of the stream.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed\nand cannot be reused after a call to this getter.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>\n<p>Except for the type of the error, this method is equivalent to\n<code>this.elementAt(0)</code>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-io.HttpServer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.HttpServer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isBroadcast":{"name":"isBroadcast","qualifiedName":"dart-io.HttpServer.isBroadcast","comment":"<p>Reports whether this stream is a broadcast stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.isBroadcast","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-io.HttpServer.isEmpty","comment":"<p>Reports whether this stream contains any elements.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this getter.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-io.HttpServer.last","comment":"<p>Returns the last element of the stream.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-io.HttpServer.length","comment":"<p>Counts the elements in the stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.HttpServer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-io.HttpServer.single","comment":"<p>Returns the single element.</p>\n<p>If an error event occurs before or after the first data event, the\nresulting future is completed with that error.</p>\n<p>If this is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.HttpServer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.HttpServer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.HttpServer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"any":{"name":"any","qualifiedName":"dart-io.HttpServer.any","comment":"<p>Checks whether <a>dart-io.HttpServer.any.test</a> accepts any element provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.</p>\n<p>If this stream reports an error, the <a>dart-async.Future</a> reports that error.</p>\n<p>Stops listening to the stream after the first matching element has been\nfound.</p>\n<p>Internally the method cancels its subscription after this element. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asBroadcastStream":{"name":"asBroadcastStream","qualifiedName":"dart-io.HttpServer.asBroadcastStream","comment":"<p>Returns a multi-subscription stream that produces the same events as this.</p>\n<p>If this stream is already a broadcast stream, it is returned unmodified.</p>\n<p>If this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.</p>\n<p>If <a>dart-io.HttpServer.asBroadcastStream.onListen</a> is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto <a>dart-io.HttpServer.asBroadcastStream.onListen</a>. It is not possible to change the event handlers, including\nusing <a>dart-async.StreamSubscription.asFuture</a>.</p>\n<p>If <a>dart-io.HttpServer.asBroadcastStream.onCancel</a> is provided, it is called in a similar way to <a>dart-io.HttpServer.asBroadcastStream.onListen</a>\nwhen the returned stream stops having listener. If it later gets\na new listener, the <a>dart-io.HttpServer.asBroadcastStream.onListen</a> function is called again.</p>\n<p>Use the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asBroadcastStream","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onListen":{"name":"onListen","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}},"onCancel":{"name":"onCancel","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncExpand":{"name":"asyncExpand","qualifiedName":"dart-io.HttpServer.asyncExpand","comment":"<p>Creates a new stream with the events of a stream per original event.</p>\n<p>This acts like <a>dart-io.HttpServer.expand</a>, except that <a>dart-io.HttpServer.asyncExpand.convert</a> returns a <a>dart-async.Stream</a>\ninstead of an <a>dart-core.Iterable</a>.\nThe events of the returned stream becomes the events of the returned\nstream, in the order they are produced.</p>\n<p>If <a>dart-io.HttpServer.asyncExpand.convert</a> returns <code>null</code>, no value is put on the output stream,\njust as if it returned an empty stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asyncExpand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncMap":{"name":"asyncMap","qualifiedName":"dart-io.HttpServer.asyncMap","comment":"<p>Creates a new stream with each data event of this stream asynchronously\nmapped to a new event.</p>\n<p>This acts like <a>dart-io.HttpServer.map</a>, except that <a>dart-io.HttpServer.asyncMap.convert</a> may return a <a>dart-async.Future</a>,\nand in that case, the stream waits for that future to complete before\ncontinuing with its result.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asyncMap","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-io.HttpServer.contains","comment":"<p>Checks whether <a>dart-io.HttpServer.contains.needle</a> occurs in the elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"needle":{"name":"needle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"distinct":{"name":"distinct","qualifiedName":"dart-io.HttpServer.distinct","comment":"<p>Skips data events if they are equal to the previous data event.</p>\n<p>The returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.</p>\n<p>Equality is determined by the provided <a>dart-io.HttpServer.distinct.equals</a> method. If that is\nomitted, the '==' operator on the last provided data element is used.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.distinct","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"equals":{"name":"equals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"next":{"name":"next","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"drain":{"name":"drain","qualifiedName":"dart-io.HttpServer.drain","comment":"<p>Discards all data on the stream, but signals when it's done or an error\noccured.</p>\n<p>When subscribing using <a>dart-io.HttpServer.drain</a>, cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>dart-io.HttpServer.drain.futureValue</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.drain","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"dart-io.HttpServer.elementAt","comment":"<p>Returns the value of the <a>dart-io.HttpServer.elementAt.index</a>th data event of this stream.</p>\n<p>Stops listening to the stream after the <a>dart-io.HttpServer.elementAt.index</a>th data event has been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>If an error event occurs before the value is found, the future completes\nwith this error.</p>\n<p>If a done event occurs before the value is found, the future completes\nwith a <a>dart-core.RangeError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"dart-io.HttpServer.every","comment":"<p>Checks whether <a>dart-io.HttpServer.every.test</a> accepts all elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"dart-io.HttpServer.expand","comment":"<p>Creates a new stream from this stream that converts each element\ninto zero or more events.</p>\n<p>Each incoming event is converted to an <a>dart-core.Iterable</a> of new events,\nand each of these new events are then sent by the returned stream\nin order.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"dart-io.HttpServer.firstWhere","comment":"<p>Finds the first element of this stream matching <a>dart-io.HttpServer.firstWhere.test</a>.</p>\n<p>Returns a future that is filled with the first element of this stream\nthat <a>dart-io.HttpServer.firstWhere.test</a> returns true for.</p>\n<p>If no such element is found before this stream is done, and a\n<a>dart-io.HttpServer.firstWhere.defaultValue</a> function is provided, the result of calling <a>dart-io.HttpServer.firstWhere.defaultValue</a>\nbecomes the value of the future.</p>\n<p>Stops listening to the stream after the first matching element has been\nreceived.</p>\n<p>Internally the method cancels its subscription after the first element that\nmatches the predicate. This means that single-subscription (non-broadcast)\nstreams are closed and cannot be reused after a call to this method.</p>\n<p>If an error occurs, or if this stream ends without finding a match and\nwith no <a>dart-io.HttpServer.firstWhere.defaultValue</a> function provided, the future will receive an\nerror.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"dart-io.HttpServer.fold","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-io.HttpServer.fold.combine</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-io.HttpServer.forEach","comment":"<p>Executes <a>dart-io.HttpServer.forEach.action</a> on each data event of the stream.</p>\n<p>Completes the returned <a>dart-async.Future</a> when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if <a>dart-io.HttpServer.forEach.action</a> throws.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"handleError":{"name":"handleError","qualifiedName":"dart-io.HttpServer.handleError","comment":"<p>Creates a wrapper Stream that intercepts some errors from this stream.</p>\n<p>If this stream sends an error that matches <a>dart-io.HttpServer.handleError.test</a>, then it is intercepted\nby the handle function.</p>\n<p>The <a>dart-io.HttpServer.handleError.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. Depending on the function\ntype the the stream either invokes <a>dart-io.HttpServer.handleError.onError</a> with or without a stack\ntrace. The stack trace argument might be <code>null</code> if the stream itself\nreceived an error without stack trace.</p>\n<p>An asynchronous error <code>e</code> is matched by a test function if <code>test(e)</code>\nreturns true. If <a>dart-io.HttpServer.handleError.test</a> is omitted, every error is considered matching.</p>\n<p>If the error is intercepted, the handle function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.</p>\n<p>If you need to transform an error into a data event, use the more generic\n<a>dart-io.HttpServer.transform</a> to handle the event by writing a data event to\nthe output sink</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.handleError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onError":{"name":"onError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"test":{"name":"test","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"join":{"name":"join","qualifiedName":"dart-io.HttpServer.join","comment":"<p>Collects string of data events' string representations.</p>\n<p>If <a>dart-io.HttpServer.join.separator</a> is provided, it is inserted between any two\nelements.</p>\n<p>Any error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"dart-io.HttpServer.lastWhere","comment":"<p>Finds the last element in this stream matching <a>dart-io.HttpServer.lastWhere.test</a>.</p>\n<p>As <a>dart-io.HttpServer.firstWhere</a>, except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"listen":{"name":"listen","qualifiedName":"dart-io.HttpServer.listen","comment":"<p>Adds a subscription to this stream.</p>\n<p>On each data event from this stream, the subscriber's <a>dart-io.HttpServer.listen.onData</a> handler\nis called. If <a>dart-io.HttpServer.listen.onData</a> is null, nothing happens.</p>\n<p>On errors from this stream, the <a>dart-io.HttpServer.listen.onError</a> handler is given a\nobject describing the error.</p>\n<p>The <a>dart-io.HttpServer.listen.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. If <a>dart-io.HttpServer.listen.onError</a> accepts\ntwo arguments it is called with the stack trace (which could be <code>null</code> if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.</p>\n<p>If this stream closes, the <a>dart-io.HttpServer.listen.onDone</a> handler is called.</p>\n<p>If <a>dart-io.HttpServer.listen.cancelOnError</a> is true, the subscription is ended when\nthe first error is reported. The default is false.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.listen","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onData":{"name":"onData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"onDone":{"name":"onDone","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"cancelOnError":{"name":"cancelOnError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"dart-io.HttpServer.map","comment":"<p>Creates a new stream that converts each element of this stream\nto a new value using the <a>dart-io.HttpServer.map.convert</a> function.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.HttpServer.noSuchMethod","comment":"<p><a>dart-io.HttpServer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.HttpServer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.HttpServer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.HttpServer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pipe":{"name":"pipe","qualifiedName":"dart-io.HttpServer.pipe","comment":"<p>Binds this stream as the input of the provided <a>dart-async.StreamConsumer</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.pipe","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"streamConsumer":{"name":"streamConsumer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamConsumer","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"dart-io.HttpServer.reduce","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-io.HttpServer.reduce.combine</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream.T","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"dart-io.HttpServer.singleWhere","comment":"<p>Finds the single element in this stream matching <a>dart-io.HttpServer.singleWhere.test</a>.</p>\n<p>Like lastMatch, except that it is an error if more than one\nmatching element occurs in the stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"dart-io.HttpServer.skip","comment":"<p>Skips the first <a>dart-io.HttpServer.skip.count</a> data events from this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"dart-io.HttpServer.skipWhile","comment":"<p>Skip data events from this stream while they are matched by <a>dart-io.HttpServer.skipWhile.test</a>.</p>\n<p>Error and done events are provided by the returned stream unmodified.</p>\n<p>Starting with the first data event where <a>dart-io.HttpServer.skipWhile.test</a> returns false for the\nevent data, the returned stream will have the same events as this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"dart-io.HttpServer.take","comment":"<p>Provides at most the first n values of this stream.</p>\n<p>Forwards the first n data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.</p>\n<p>If this stream produces fewer than <a>dart-io.HttpServer.take.count</a> values before it's done,\nso will the returned stream.</p>\n<p>Stops listening to the stream after the first n elements have been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"dart-io.HttpServer.takeWhile","comment":"<p>Forwards data events while <a>dart-io.HttpServer.takeWhile.test</a> is successful.</p>\n<p>The returned stream provides the same events as this stream as long\nas <a>dart-io.HttpServer.takeWhile.test</a> returns <code>true</code> for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that <a>dart-io.HttpServer.takeWhile.test</a> doesn't accept.</p>\n<p>Stops listening to the stream after the accepted elements.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"dart-io.HttpServer.timeout","comment":"<p>Creates a new stream with the same events as this stream.</p>\n<p>Whenever more than <a>dart-io.HttpServer.timeout.timeLimit</a> passes between two events from this stream,\nthe <a>dart-io.HttpServer.timeout.onTimeout</a> function is called.</p>\n<p>The countdown doesn't start until the returned stream is listened to.\nThe countdown is reset every time an event is forwarded from this stream,\nor when the stream is paused and resumed.</p>\n<p>The <a>dart-io.HttpServer.timeout.onTimeout</a> function is called with one argument: an\n<a>dart-async.EventSink</a> that allows putting events into the returned stream.\nThis <code>EventSink</code> is only valid during the call to <code>onTimeout</code>.</p>\n<p>If <code>onTimeout</code> is omitted, a timeout will just put a <a>dart-async.TimeoutException</a>\ninto the error channel of the returned stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.timeout","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"timeLimit":{"name":"timeLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"onTimeout":{"name":"onTimeout","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"dart-io.HttpServer.toList","comment":"<p>Collects the data of this stream in a <a>dart-core.List</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-io.HttpServer.toSet","comment":"<p>Collects the data of this stream in a <a>dart-core.Set</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.toSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Set","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.HttpServer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"transform":{"name":"transform","qualifiedName":"dart-io.HttpServer.transform","comment":"<p>Chains this stream as the input of the provided <a>dart-async.StreamTransformer</a>.</p>\n<p>Returns the result of <code>streamTransformer.bind</code> itself.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.transform","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"streamTransformer":{"name":"streamTransformer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamTransformer","inner":[{"outer":"dart-async.Stream.T","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"dart-io.HttpServer.where","comment":"<p>Creates a new stream from this stream that discards some data events.</p>\n<p>The new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the <a>dart-io.HttpServer.where.test</a>.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{}}