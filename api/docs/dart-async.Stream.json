{"name":"Stream","qualifiedName":"dart-async.Stream","comment":"<p>A source of asynchronous data events.</p>\n<p>A Stream provides a sequence of events. Each event is either a data event or\nan error event, representing the result of a single computation. When the\nStream is exhausted, it may send a single \"done\" event.</p>\n<p>You can <a>dart-async.Stream.listen</a> on a stream to receive the events it sends. When you listen,\nyou receive a <a>dart-async.StreamSubscription</a> object that can be used to stop listening,\nor to temporarily pause events from the stream.</p>\n<p>When an event is fired, the listeners at that time are informed.\nIf a listener is added while an event is being fired, the change\nwill only take effect after the event is completely fired. If a listener\nis canceled, it immediately stops receiving events.</p>\n<p>When the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers after this point is allowed, but\nthey will just receive a new \"done\" event as soon as possible.</p>\n<p>Streams always respect \"pause\" requests. If necessary they need to buffer\ntheir input, but often, and preferably, they can simply request their input\nto pause too.</p>\n<p>There are two kinds of streams: The normal \"single-subscription\" streams and\n\"broadcast\" streams.</p>\n<p>A single-subscription stream allows only a single listener during the whole\nlifetime of the stream.\nIt holds back events until it gets a listener, and it may exhaust\nitself when the listener is unsubscribed, even if the stream wasn't done.</p>\n<p>Single-subscription streams are generally used for streaming parts of\ncontiguous data like file I/O.</p>\n<p>A broadcast stream allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.</p>\n<p>Broadcast streams are used for independent events/observers.</p>\n<p>Stream transformations, such as <a>dart-async.Stream.where</a> and <a>dart-async.Stream.skip</a>, always return\nnon-broadcast streams. If several listeners want to listen to the returned\nstream, use <a>dart-async.Stream.asBroadcastStream</a> to create a broadcast stream on top of the\nnon-broadcast stream.</p>\n<p>The default implementation of <a>dart-async.Stream.isBroadcast</a> returns false.\nA broadcast stream inheriting from <a>dart-async.Stream</a> must override <a>dart-async.Stream.isBroadcast</a>\nto return <code>true</code>.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":["dart-io.RawDatagramSocket","dart-io.RawSecureServerSocket","dart-io.SecureServerSocket","dart-io.Stdin","dart-async.StreamView"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"dart-async.Stream.first","comment":"<p>Returns the first element of the stream.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed\nand cannot be reused after a call to this getter.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>\n<p>Except for the type of the error, this method is equivalent to\n<code>this.elementAt(0)</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"isBroadcast":{"name":"isBroadcast","qualifiedName":"dart-async.Stream.isBroadcast","comment":"<p>Reports whether this stream is a broadcast stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-async.Stream.isEmpty","comment":"<p>Reports whether this stream contains any elements.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this getter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-async.Stream.last","comment":"<p>Returns the last element of the stream.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-async.Stream.length","comment":"<p>Counts the elements in the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-async.Stream.single","comment":"<p>Returns the single element.</p>\n<p>If an error event occurs before or after the first data event, the\nresulting future is completed with that error.</p>\n<p>If this is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-async.Stream.Stream-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"eventTransformed":{"name":"eventTransformed","qualifiedName":"dart-async.Stream.Stream-eventTransformed","comment":"<p>Creates a stream where all events of an existing stream are piped through\na sink-transformation.</p>\n<p>The given <a>dart-async.Stream.Stream-eventTransformed.mapSink</a> closure is invoked when the returned stream is\nlistened to. All events from the <a>dart-async.Stream.Stream-eventTransformed.source</a> are added into the event sink\nthat is returned from the invocation. The transformation puts all\ntransformed events into the sink the <a>dart-async.Stream.Stream-eventTransformed.mapSink</a> closure received during\nits invocation. Conceptually the <a>dart-async.Stream.Stream-eventTransformed.mapSink</a> creates a transformation pipe\nwith the input sink being the returned <a>dart-async.EventSink</a> and the output sink\nbeing the sink it received.</p>\n<p>This constructor is frequently used to build transformers.</p>\n<p>Example use for a duplicating transformer:</p>\n<pre><code>class DuplicationSink implements EventSink&lt;String&gt; {\n  final EventSink&lt;String&gt; _outputSink;\n  DuplicationSink(this._outputSink);\n\n  void add(String data) {\n    _outputSink.add(data);\n    _outputSink.add(data);\n  }\n\n  void addError(e, [st]) =&gt; _outputSink(e, st);\n  void close() =&gt; _outputSink.close();\n}\n\nclass DuplicationTransformer implements StreamTransformer&lt;String, String&gt; {\n  // Some generic types ommitted for brevety.\n  Stream bind(Stream stream) =&gt; new Stream&lt;String&gt;.eventTransform(\n      stream,\n      (EventSink sink) =&gt; new DuplicationSink(sink));\n}\n\nstringStream.transform(new DuplicationTransformer());\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[]}],"value":null,"annotations":[]},"mapSink":{"name":"mapSink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.EventSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"fromFuture":{"name":"fromFuture","qualifiedName":"dart-async.Stream.Stream-fromFuture","comment":"<p>Creates a new single-subscription stream from the future.</p>\n<p>When the future completes, the stream will fire one event, either\ndata or error, and then close with a done-event.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"future":{"name":"future","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"fromIterable":{"name":"fromIterable","qualifiedName":"dart-async.Stream.Stream-fromIterable","comment":"<p>Creates a single-subscription stream that gets its data from <a>dart-async.Stream.Stream-fromIterable.data</a>.</p>\n<p>If iterating <a>dart-async.Stream.Stream-fromIterable.data</a> throws an error, the stream ends immediately with\nthat error. No done event will be sent (iteration is not complete), but no\nfurther data events will be generated either, since iteration cannot\ncontinue.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"periodic":{"name":"periodic","qualifiedName":"dart-async.Stream.Stream-periodic","comment":"<p>Creates a stream that repeatedly emits events at <a>dart-async.Stream.Stream-periodic.period</a> intervals.</p>\n<p>The event values are computed by invoking <a>dart-async.Stream.Stream-periodic.computation</a>. The argument to\nthis callback is an integer that starts with 0 and is incremented for\nevery event.</p>\n<p>If <a>dart-async.Stream.Stream-periodic.computation</a> is omitted the event values will all be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"period":{"name":"period","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"computation":{"name":"computation","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream.T","inner":[]}],"parameters":{"computationCount":{"name":"computationCount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"any":{"name":"any","qualifiedName":"dart-async.Stream.any","comment":"<p>Checks whether <a>dart-async.Stream.any.test</a> accepts any element provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.</p>\n<p>If this stream reports an error, the <a>dart-async.Future</a> reports that error.</p>\n<p>Stops listening to the stream after the first matching element has been\nfound.</p>\n<p>Internally the method cancels its subscription after this element. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asBroadcastStream":{"name":"asBroadcastStream","qualifiedName":"dart-async.Stream.asBroadcastStream","comment":"<p>Returns a multi-subscription stream that produces the same events as this.</p>\n<p>If this stream is already a broadcast stream, it is returned unmodified.</p>\n<p>If this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.</p>\n<p>If <a>dart-async.Stream.asBroadcastStream.onListen</a> is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto <a>dart-async.Stream.asBroadcastStream.onListen</a>. It is not possible to change the event handlers, including\nusing <a>dart-async.StreamSubscription.asFuture</a>.</p>\n<p>If <a>dart-async.Stream.asBroadcastStream.onCancel</a> is provided, it is called in a similar way to <a>dart-async.Stream.asBroadcastStream.onListen</a>\nwhen the returned stream stops having listener. If it later gets\na new listener, the <a>dart-async.Stream.asBroadcastStream.onListen</a> function is called again.</p>\n<p>Use the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onListen":{"name":"onListen","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}},"onCancel":{"name":"onCancel","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncExpand":{"name":"asyncExpand","qualifiedName":"dart-async.Stream.asyncExpand","comment":"<p>Creates a new stream with the events of a stream per original event.</p>\n<p>This acts like <a>dart-async.Stream.expand</a>, except that <a>dart-async.Stream.asyncExpand.convert</a> returns a <a>dart-async.Stream</a>\ninstead of an <a>dart-core.Iterable</a>.\nThe events of the returned stream becomes the events of the returned\nstream, in the order they are produced.</p>\n<p>If <a>dart-async.Stream.asyncExpand.convert</a> returns <code>null</code>, no value is put on the output stream,\njust as if it returned an empty stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncMap":{"name":"asyncMap","qualifiedName":"dart-async.Stream.asyncMap","comment":"<p>Creates a new stream with each data event of this stream asynchronously\nmapped to a new event.</p>\n<p>This acts like <a>dart-async.Stream.map</a>, except that <a>dart-async.Stream.asyncMap.convert</a> may return a <a>dart-async.Future</a>,\nand in that case, the stream waits for that future to complete before\ncontinuing with its result.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-async.Stream.contains","comment":"<p>Checks whether <a>dart-async.Stream.contains.needle</a> occurs in the elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"needle":{"name":"needle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"distinct":{"name":"distinct","qualifiedName":"dart-async.Stream.distinct","comment":"<p>Skips data events if they are equal to the previous data event.</p>\n<p>The returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.</p>\n<p>Equality is determined by the provided <a>dart-async.Stream.distinct.equals</a> method. If that is\nomitted, the '==' operator on the last provided data element is used.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"equals":{"name":"equals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"next":{"name":"next","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"drain":{"name":"drain","qualifiedName":"dart-async.Stream.drain","comment":"<p>Discards all data on the stream, but signals when it's done or an error\noccured.</p>\n<p>When subscribing using <a>dart-async.Stream.drain</a>, cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>dart-async.Stream.drain.futureValue</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"dart-async.Stream.elementAt","comment":"<p>Returns the value of the <a>dart-async.Stream.elementAt.index</a>th data event of this stream.</p>\n<p>Stops listening to the stream after the <a>dart-async.Stream.elementAt.index</a>th data event has been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>If an error event occurs before the value is found, the future completes\nwith this error.</p>\n<p>If a done event occurs before the value is found, the future completes\nwith a <a>dart-core.RangeError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"dart-async.Stream.every","comment":"<p>Checks whether <a>dart-async.Stream.every.test</a> accepts all elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"dart-async.Stream.expand","comment":"<p>Creates a new stream from this stream that converts each element\ninto zero or more events.</p>\n<p>Each incoming event is converted to an <a>dart-core.Iterable</a> of new events,\nand each of these new events are then sent by the returned stream\nin order.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"dart-async.Stream.firstWhere","comment":"<p>Finds the first element of this stream matching <a>dart-async.Stream.firstWhere.test</a>.</p>\n<p>Returns a future that is filled with the first element of this stream\nthat <a>dart-async.Stream.firstWhere.test</a> returns true for.</p>\n<p>If no such element is found before this stream is done, and a\n<a>dart-async.Stream.firstWhere.defaultValue</a> function is provided, the result of calling <a>dart-async.Stream.firstWhere.defaultValue</a>\nbecomes the value of the future.</p>\n<p>Stops listening to the stream after the first matching element has been\nreceived.</p>\n<p>Internally the method cancels its subscription after the first element that\nmatches the predicate. This means that single-subscription (non-broadcast)\nstreams are closed and cannot be reused after a call to this method.</p>\n<p>If an error occurs, or if this stream ends without finding a match and\nwith no <a>dart-async.Stream.firstWhere.defaultValue</a> function provided, the future will receive an\nerror.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"dart-async.Stream.fold","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-async.Stream.fold.combine</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-async.Stream.forEach","comment":"<p>Executes <a>dart-async.Stream.forEach.action</a> on each data event of the stream.</p>\n<p>Completes the returned <a>dart-async.Future</a> when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if <a>dart-async.Stream.forEach.action</a> throws.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"handleError":{"name":"handleError","qualifiedName":"dart-async.Stream.handleError","comment":"<p>Creates a wrapper Stream that intercepts some errors from this stream.</p>\n<p>If this stream sends an error that matches <a>dart-async.Stream.handleError.test</a>, then it is intercepted\nby the handle function.</p>\n<p>The <a>dart-async.Stream.handleError.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. Depending on the function\ntype the the stream either invokes <a>dart-async.Stream.handleError.onError</a> with or without a stack\ntrace. The stack trace argument might be <code>null</code> if the stream itself\nreceived an error without stack trace.</p>\n<p>An asynchronous error <code>e</code> is matched by a test function if <code>test(e)</code>\nreturns true. If <a>dart-async.Stream.handleError.test</a> is omitted, every error is considered matching.</p>\n<p>If the error is intercepted, the handle function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.</p>\n<p>If you need to transform an error into a data event, use the more generic\n<a>dart-async.Stream.transform</a> to handle the event by writing a data event to\nthe output sink</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onError":{"name":"onError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"test":{"name":"test","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"join":{"name":"join","qualifiedName":"dart-async.Stream.join","comment":"<p>Collects string of data events' string representations.</p>\n<p>If <a>dart-async.Stream.join.separator</a> is provided, it is inserted between any two\nelements.</p>\n<p>Any error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"dart-async.Stream.lastWhere","comment":"<p>Finds the last element in this stream matching <a>dart-async.Stream.lastWhere.test</a>.</p>\n<p>As <a>dart-async.Stream.firstWhere</a>, except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"listen":{"name":"listen","qualifiedName":"dart-async.Stream.listen","comment":"<p>Adds a subscription to this stream.</p>\n<p>On each data event from this stream, the subscriber's <a>dart-async.Stream.listen.onData</a> handler\nis called. If <a>dart-async.Stream.listen.onData</a> is null, nothing happens.</p>\n<p>On errors from this stream, the <a>dart-async.Stream.listen.onError</a> handler is given a\nobject describing the error.</p>\n<p>The <a>dart-async.Stream.listen.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. If <a>dart-async.Stream.listen.onError</a> accepts\ntwo arguments it is called with the stack trace (which could be <code>null</code> if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.</p>\n<p>If this stream closes, the <a>dart-async.Stream.listen.onDone</a> handler is called.</p>\n<p>If <a>dart-async.Stream.listen.cancelOnError</a> is true, the subscription is ended when\nthe first error is reported. The default is false.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onData":{"name":"onData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"onDone":{"name":"onDone","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"cancelOnError":{"name":"cancelOnError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"dart-async.Stream.map","comment":"<p>Creates a new stream that converts each element of this stream\nto a new value using the <a>dart-async.Stream.map.convert</a> function.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"pipe":{"name":"pipe","qualifiedName":"dart-async.Stream.pipe","comment":"<p>Binds this stream as the input of the provided <a>dart-async.StreamConsumer</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"streamConsumer":{"name":"streamConsumer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamConsumer","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"dart-async.Stream.reduce","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-async.Stream.reduce.combine</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream.T","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"dart-async.Stream.singleWhere","comment":"<p>Finds the single element in this stream matching <a>dart-async.Stream.singleWhere.test</a>.</p>\n<p>Like lastMatch, except that it is an error if more than one\nmatching element occurs in the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"dart-async.Stream.skip","comment":"<p>Skips the first <a>dart-async.Stream.skip.count</a> data events from this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"dart-async.Stream.skipWhile","comment":"<p>Skip data events from this stream while they are matched by <a>dart-async.Stream.skipWhile.test</a>.</p>\n<p>Error and done events are provided by the returned stream unmodified.</p>\n<p>Starting with the first data event where <a>dart-async.Stream.skipWhile.test</a> returns false for the\nevent data, the returned stream will have the same events as this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"dart-async.Stream.take","comment":"<p>Provides at most the first n values of this stream.</p>\n<p>Forwards the first n data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.</p>\n<p>If this stream produces fewer than <a>dart-async.Stream.take.count</a> values before it's done,\nso will the returned stream.</p>\n<p>Stops listening to the stream after the first n elements have been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"dart-async.Stream.takeWhile","comment":"<p>Forwards data events while <a>dart-async.Stream.takeWhile.test</a> is successful.</p>\n<p>The returned stream provides the same events as this stream as long\nas <a>dart-async.Stream.takeWhile.test</a> returns <code>true</code> for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that <a>dart-async.Stream.takeWhile.test</a> doesn't accept.</p>\n<p>Stops listening to the stream after the accepted elements.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"dart-async.Stream.timeout","comment":"<p>Creates a new stream with the same events as this stream.</p>\n<p>Whenever more than <a>dart-async.Stream.timeout.timeLimit</a> passes between two events from this stream,\nthe <a>dart-async.Stream.timeout.onTimeout</a> function is called.</p>\n<p>The countdown doesn't start until the returned stream is listened to.\nThe countdown is reset every time an event is forwarded from this stream,\nor when the stream is paused and resumed.</p>\n<p>The <a>dart-async.Stream.timeout.onTimeout</a> function is called with one argument: an\n<a>dart-async.EventSink</a> that allows putting events into the returned stream.\nThis <code>EventSink</code> is only valid during the call to <code>onTimeout</code>.</p>\n<p>If <code>onTimeout</code> is omitted, a timeout will just put a <a>dart-async.TimeoutException</a>\ninto the error channel of the returned stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"timeLimit":{"name":"timeLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"onTimeout":{"name":"onTimeout","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"dart-async.Stream.toList","comment":"<p>Collects the data of this stream in a <a>dart-core.List</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-async.Stream.toSet","comment":"<p>Collects the data of this stream in a <a>dart-core.Set</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Set","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"transform":{"name":"transform","qualifiedName":"dart-async.Stream.transform","comment":"<p>Chains this stream as the input of the provided <a>dart-async.StreamTransformer</a>.</p>\n<p>Returns the result of <code>streamTransformer.bind</code> itself.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"streamTransformer":{"name":"streamTransformer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamTransformer","inner":[{"outer":"dart-async.Stream.T","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"dart-async.Stream.where","comment":"<p>Creates a new stream from this stream that discards some data events.</p>\n<p>The new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the <a>dart-async.Stream.where.test</a>.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-async.Stream.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-async.Stream.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-async.Stream.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-async.Stream.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-async.Stream.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-async.Stream.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-async.Stream.noSuchMethod","comment":"<p><a>dart-async.Stream.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-async.Stream.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-async.Stream.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-async.Stream.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-async.Stream.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}