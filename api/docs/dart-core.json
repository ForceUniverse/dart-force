{"name":"dart-core","qualifiedName":"dart-core","comment":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>\n<p>This library is automatically imported.</p>\n<p>Some classes in this library,\nsuch as <a>dart-core.String</a> and <a>dart-core.num</a>,\nsupport Dart's built-in data types.\nOther classes, such as <a>dart-core.List</a> and <a>dart-core.Map</a>, provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.</p>\n<h2>Numbers and booleans</h2>\n<p><a>dart-core.int</a> and <a>dart-core.double</a> provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type <a>dart-core.bool</a> is either true or false.\nVariables of these types can be constructed from literals:</p>\n<pre><code>int meaningOfLife = 42;\ndouble valueOfPi  = 3.141592;\nbool visible      = true;\n</code></pre>\n<h2>Strings and regular expressions</h2>\n<p>A <a>dart-core.String</a> is immutable and represents a sequence of characters.</p>\n<pre><code>String shakespeareQuote = \"All the world's a stage, ...\";\n</code></pre>\n<p><a>dart-core.StringBuffer</a> provides a way to construct strings efficiently.</p>\n<pre><code>StringBuffer moreShakespeare = new StringBuffer();\nmoreShakespeare.write('And all the men and women ');\nmoreShakespeare.write('merely players; ...');\n</code></pre>\n<p>The String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.</p>\n<pre><code>String philosophy = 'Live on ';\nString get palindrome =&gt; philosophy + philosophy.split('').reversed.join();\n</code></pre>\n<p><a>dart-core.RegExp</a> implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:</p>\n<pre><code>var numbers = new RegExp(r'\\d+');\n</code></pre>\n<p>Dart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.10\">http://ecma-international.org/ecma-262/5.1/#sec-15.10</a>\nfor the specification of JavaScript regular expressions.</p>\n<h2>Collections</h2>\n<p>The dart:core library provides basic collections,\nsuch as <a>dart-core.List</a>, <a>dart-core.Map</a>, and <a>dart-core.Set</a>.</p>\n<p>A List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.</p>\n<pre><code>List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n</code></pre>\n<p>A Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.</p>\n<pre><code>Set villains = new Set();\nvillains.add('Joker');\nvillains.addAll( ['Lex Luther', 'Voldemort'] );\n</code></pre>\n<p>A Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.</p>\n<pre><code>Map sidekicks = { 'Batman': 'Robin',\n                  'Superman': 'Lois Lane',\n                  'Harry Potter': 'Ron and Hermione' };\n</code></pre>\n<p>In addition to these classes,\ndart:core contains <a>dart-core.Iterable</a>,\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.</p>\n<p>Iterable is implemented by List and Set,\nand used by Map for its keys and values.</p>\n<p>For other kinds of collections, check out the\n<a href=\"#dart-collection\">dart:collection</a> library.</p>\n<h2>Date and time</h2>\n<p>Use <a>dart-core.DateTime</a> to represent a point in time\nand <a>dart-core.Duration</a> to represent a span of time.</p>\n<p>You can create DateTime objects with constructors\nor by parsing a correctly formatted string.</p>\n<pre><code>DateTime now = new DateTime.now();\nDateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding = DateTime.parse(\"1969-07-20\");\n</code></pre>\n<p>Create a Duration object specifying the individual time units.</p>\n<pre><code>Duration timeRemaining = new Duration(hours:56, minutes:14);\n</code></pre>\n<p>In addition to DateTime and Duration,\ndart:core contains the <a>dart-core.Stopwatch</a> class for measuring elapsed time.</p>\n<h2>Uri</h2>\n<p>A <a>dart-core.Uri</a> object represents a uniform resource identifier,\nwhich identifies a resource on the web.</p>\n<pre><code>Uri dartlang = Uri.parse('http://dartlang.org/');\n</code></pre>\n<h2>Errors</h2>\n<p>The <a>dart-core.Error</a> class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.</p>\n<h2>Other documentation</h2>\n<p>For more information about how to use the built-in types, refer to\n<a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types\">Built-in Types</a>\nin Chapter 2 of\n<a href=\"http://www.dartlang.org/docs/dart-up-and-running/\">Dart: Up and Running</a>.</p>\n<p>Also, see\n<a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more\">dart:core - Numbers, Collections, Strings, and More</a>\nfor more coverage of classes in this package.</p>\n<p>The\n<a href=\"http://www.dartlang.org/docs/spec/\">Dart Language Specification</a>\nprovides technical details.</p>","variables":{"deprecated":{"name":"deprecated","qualifiedName":"dart-core.deprecated","comment":"<p>Marks a feature as <a>dart-core.Deprecated</a> until the next release.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.Deprecated","inner":[]}],"annotations":[]},"override":{"name":"override","qualifiedName":"dart-core.override","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.Object","inner":[]}],"annotations":[]},"proxy":{"name":"proxy","qualifiedName":"dart-core.proxy","comment":"<p>The annotation <code>@proxy</code> marks a class as implementing interfaces and members\ndynamically through <code>noSuchMethod</code>.</p>\n<p>The annotation applies to any class. It is inherited by subclasses from both\nsuperclass and interfaces.</p>\n<p>If a class is annotated with <code>@proxy</code>, or it implements any class that is\nannotated, then the class is considered to implement any interface and\nany member with regard to static type analysis. As such, it is not a static\ntype warning to assign the object to a variable of any type, and it is not\na static type warning to access any member of the object.</p>\n<p>This only applies to static type warnings. The runtime type of the object\nis unaffected. It is not considered to implement any special interfaces at\nruntime, so assigning it to a typed variable may fail in checked mode, and\ntesting it with the <code>is</code> operator will not work for any type except the\nones it actually implements.</p>\n<p>Tools that understand <code>@proxy</code> should tell the user if a class using <code>@proxy</code>\ndoes not override the <code>noSuchMethod</code> declared on <a>dart-core.Object</a>.</p>\n<p>The intent of the <code>@proxy</code> notation is to create objects that implement a\ntype (or multiple types) that are not known at compile time. If the types\nare known at compile time, a class can be written that implements these\ntypes.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.Object","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"identical":{"name":"identical","qualifiedName":"dart-core.identical","comment":"<p>Check whether two references are to the same object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"identityHashCode":{"name":"identityHashCode","qualifiedName":"dart-core.identityHashCode","comment":"<p>Returns the identity hash code of <code>object</code>.</p>\n<p>Returns the same value as <code>object.hashCode</code> if <a>dart-core.identityHashCode.object</a> has not overridden\n<a>dart-core.Object.hashCode</a>. Returns the value that <a>dart-core.Object.hashCode</a> would return\non this object, even if <code>hashCode</code> has been overridden.</p>\n<p>This hash code is compatible with <a>dart-core.identical</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"print":{"name":"print","qualifiedName":"dart-core.print","comment":"<p>Prints a string representation of the object to the console.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"BidirectionalIterator","qualifiedName":"dart-core.BidirectionalIterator","preview":"<p>An Iterator that allows moving backwards as well as forwards.</p>"},{"name":"Comparable","qualifiedName":"dart-core.Comparable","preview":"<p>Interface used by types that have an intrinsic ordering.</p>"},{"name":"DateTime","qualifiedName":"dart-core.DateTime","preview":"<p>An instant in time, such as July 20, 1969, 8:18pm GMT.</p>"},{"name":"Deprecated","qualifiedName":"dart-core.Deprecated","preview":"<p>The annotation <code>@Deprecated('expires when')</code> marks a feature as deprecated.</p>"},{"name":"Duration","qualifiedName":"dart-core.Duration","preview":"<p>A span of time, such as 27 days, 4 hours, 12 minutes, and 3 seconds.</p>"},{"name":"Expando","qualifiedName":"dart-core.Expando","preview":"<p>An <a>dart-core.Expando</a> allows adding new properties to objects.</p>"},{"name":"Function","qualifiedName":"dart-core.Function","preview":"<p>The base class for all function types.</p>"},{"name":"Invocation","qualifiedName":"dart-core.Invocation","preview":"<p>Representation of the invocation of a member on an object.</p>"},{"name":"Iterable","qualifiedName":"dart-core.Iterable","preview":"<p>An object that uses an <a>dart-core.Iterator</a> to serve objects one at a time.</p>"},{"name":"Iterator","qualifiedName":"dart-core.Iterator","preview":"<p>An interface for getting items, one at a time, from an object.</p>"},{"name":"List","qualifiedName":"dart-core.List","preview":"<p>An indexable collection of objects with a length.</p>"},{"name":"Map","qualifiedName":"dart-core.Map","preview":"<p>An collection of key-value pairs, from which you retrieve a value\nby using its associated key.</p>"},{"name":"Match","qualifiedName":"dart-core.Match","preview":"<p>A result from searching within a string.</p>"},{"name":"Null","qualifiedName":"dart-core.Null","preview":"<p>The reserved word <code>null</code> denotes an object that is the sole instance of \nthis class.</p>"},{"name":"Object","qualifiedName":"dart-core.Object","preview":"<p>The base class for all Dart objects.</p>"},{"name":"Pattern","qualifiedName":"dart-core.Pattern","preview":"<p>An interface for basic searches within strings.</p>"},{"name":"RegExp","qualifiedName":"dart-core.RegExp","preview":"<p>A regular expression pattern.</p>"},{"name":"RuneIterator","qualifiedName":"dart-core.RuneIterator","preview":"<p><a>dart-core.Iterator</a> for reading runes (integer Unicode code points) out of a Dart\nstring.</p>"},{"name":"Runes","qualifiedName":"dart-core.Runes","preview":"<p>The runes (integer Unicode code points) of a <a>dart-core.String</a>.</p>"},{"name":"Set","qualifiedName":"dart-core.Set","preview":"<p>A collection of objects in which each object can occur only once.</p>"},{"name":"Sink","qualifiedName":"dart-core.Sink","preview":"<p>A generic destination for data.</p>"},{"name":"StackTrace","qualifiedName":"dart-core.StackTrace","preview":"<p>An interface implemented by all stack trace objects.</p>"},{"name":"Stopwatch","qualifiedName":"dart-core.Stopwatch","preview":"<p>A simple stopwatch interface to measure elapsed time.</p>"},{"name":"String","qualifiedName":"dart-core.String","preview":"<p>A sequence of characters.</p>"},{"name":"StringBuffer","qualifiedName":"dart-core.StringBuffer","preview":"<p>A class for concatenating strings efficiently.</p>"},{"name":"StringSink","qualifiedName":"dart-core.StringSink"},{"name":"Symbol","qualifiedName":"dart-core.Symbol","preview":"<p>Opaque name used by mirrors, invocations and <a>dart-core.Function.apply</a>.</p>"},{"name":"Type","qualifiedName":"dart-core.Type","preview":"<p>Runtime representation of a type.</p>"},{"name":"Uri","qualifiedName":"dart-core.Uri","preview":"<p>A parsed URI, such as a URL.</p>"},{"name":"bool","qualifiedName":"dart-core.bool","preview":"<p>The reserved words <code>true</code> and <code>false</code> denote objects that are the only\ninstances of this class.</p>"},{"name":"double","qualifiedName":"dart-core.double","preview":"<p>A double-precision floating point number.</p>"},{"name":"int","qualifiedName":"dart-core.int","preview":"<p>An arbitrarily large integer.</p>"},{"name":"num","qualifiedName":"dart-core.num","preview":"<p>An integer or floating-point number.</p>"}],"typedef":{"Comparator":{"name":"Comparator","qualifiedName":"dart-core.Comparator","comment":"<p>The signature of a generic comparison function.</p>\n<p>A comparison function represents an ordering on a type of objects.\nA total ordering on a type means that for two values, either they\nare equal or one is greater than the other (and the latter must then be\nsmaller than the former).</p>\n<p>A <a>dart-core.Comparator</a> function represents such a total ordering by returning</p><ul><li>a negative integer if a is smaller than b,</li><li>zero if a is equal to b, and</li><li>a positive integer if a is greater than b.</li></ul>","return":"dart-core.int","parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparator.T","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparator.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}},"preview":"<p>The signature of a generic comparison function.</p>"}},"error":[{"name":"AbstractClassInstantiationError","qualifiedName":"dart-core.AbstractClassInstantiationError","preview":"<p>Error thrown when trying to instantiate an abstract class.</p>"},{"name":"ArgumentError","qualifiedName":"dart-core.ArgumentError","preview":"<p>Error thrown when a function is passed an unacceptable argument.</p>"},{"name":"AssertionError","qualifiedName":"dart-core.AssertionError","preview":"<p>Error thrown by the runtime system when an assert statement fails.</p>"},{"name":"CastError","qualifiedName":"dart-core.CastError","preview":"<p>Error thrown by the runtime system when a cast operation fails.</p>"},{"name":"ConcurrentModificationError","qualifiedName":"dart-core.ConcurrentModificationError","preview":"<p>Error occurring when a collection is modified during iteration.</p>"},{"name":"CyclicInitializationError","qualifiedName":"dart-core.CyclicInitializationError","preview":"<p>Error thrown when a lazily initialized variable cannot be initialized.</p>"},{"name":"Error","qualifiedName":"dart-core.Error","preview":"<p>Error objects thrown in the case of a program failure.</p>"},{"name":"Exception","qualifiedName":"dart-core.Exception","preview":"<p>A marker interface implemented by all core library exceptions.</p>"},{"name":"FallThroughError","qualifiedName":"dart-core.FallThroughError","preview":"<p>Error thrown when control reaches the end of a switch case.</p>"},{"name":"FormatException","qualifiedName":"dart-core.FormatException","preview":"<p>Exception thrown when a string or some other data does not have an expected\nformat and cannot be parsed or processed.</p>"},{"name":"IntegerDivisionByZeroException","qualifiedName":"dart-core.IntegerDivisionByZeroException"},{"name":"NoSuchMethodError","qualifiedName":"dart-core.NoSuchMethodError","preview":"<p>Error thrown by the default implementation of <code>noSuchMethod</code> on <a>dart-core.Object</a>.</p>"},{"name":"NullThrownError","qualifiedName":"dart-core.NullThrownError","preview":"<p>Error thrown when attempting to throw <code>null</code>.</p>"},{"name":"OutOfMemoryError","qualifiedName":"dart-core.OutOfMemoryError"},{"name":"RangeError","qualifiedName":"dart-core.RangeError","preview":"<p>Error thrown due to an index being outside a valid range.</p>"},{"name":"StackOverflowError","qualifiedName":"dart-core.StackOverflowError"},{"name":"StateError","qualifiedName":"dart-core.StateError","preview":"<p>The operation was not allowed by the current state of the object.</p>"},{"name":"TypeError","qualifiedName":"dart-core.TypeError","preview":"<p>Error thrown by the runtime system when a type assertion fails.</p>"},{"name":"UnimplementedError","qualifiedName":"dart-core.UnimplementedError","preview":"<p>Thrown by operations that have not been implemented yet.</p>"},{"name":"UnsupportedError","qualifiedName":"dart-core.UnsupportedError","preview":"<p>The operation was not allowed by the object.</p>"}]},"packageName":"","packageIntro":null}