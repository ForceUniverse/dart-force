{"name":"CssRule","qualifiedName":"dart-dom-html.CssRule","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":["dart-dom-html.CssCharsetRule","dart-dom-html.CssFilterRule","dart-dom-html.CssFontFaceRule","dart-dom-html.CssImportRule","dart-dom-html.CssKeyframeRule","dart-dom-html.CssKeyframesRule","dart-dom-html.CssMediaRule","dart-dom-html.CssPageRule","dart-dom-html.CssStyleRule","dart-dom-html.CssSupportsRule","dart-dom-html.CssViewportRule"],"variables":{"CHARSET_RULE":{"name":"CHARSET_RULE","qualifiedName":"dart-dom-html.CssRule.CHARSET_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.CHARSET_RULE'"]}]},"FONT_FACE_RULE":{"name":"FONT_FACE_RULE","qualifiedName":"dart-dom-html.CssRule.FONT_FACE_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.FONT_FACE_RULE'"]}]},"IMPORT_RULE":{"name":"IMPORT_RULE","qualifiedName":"dart-dom-html.CssRule.IMPORT_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.IMPORT_RULE'"]}]},"KEYFRAMES_RULE":{"name":"KEYFRAMES_RULE","qualifiedName":"dart-dom-html.CssRule.KEYFRAMES_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.KEYFRAMES_RULE'"]},{"name":"metadata.Experimental","parameters":[]}]},"KEYFRAME_RULE":{"name":"KEYFRAME_RULE","qualifiedName":"dart-dom-html.CssRule.KEYFRAME_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.KEYFRAME_RULE'"]},{"name":"metadata.Experimental","parameters":[]}]},"MEDIA_RULE":{"name":"MEDIA_RULE","qualifiedName":"dart-dom-html.CssRule.MEDIA_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.MEDIA_RULE'"]}]},"PAGE_RULE":{"name":"PAGE_RULE","qualifiedName":"dart-dom-html.CssRule.PAGE_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.PAGE_RULE'"]}]},"STYLE_RULE":{"name":"STYLE_RULE","qualifiedName":"dart-dom-html.CssRule.STYLE_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.STYLE_RULE'"]}]},"SUPPORTS_RULE":{"name":"SUPPORTS_RULE","qualifiedName":"dart-dom-html.CssRule.SUPPORTS_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.SUPPORTS_RULE'"]}]},"VIEWPORT_RULE":{"name":"VIEWPORT_RULE","qualifiedName":"dart-dom-html.CssRule.VIEWPORT_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.VIEWPORT_RULE'"]},{"name":"metadata.Experimental","parameters":[]}]},"WEBKIT_FILTER_RULE":{"name":"WEBKIT_FILTER_RULE","qualifiedName":"dart-dom-html.CssRule.WEBKIT_FILTER_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.WEBKIT_FILTER_RULE'"]},{"name":"metadata.Experimental","parameters":[]}]},"WEBKIT_KEYFRAMES_RULE":{"name":"WEBKIT_KEYFRAMES_RULE","qualifiedName":"dart-dom-html.CssRule.WEBKIT_KEYFRAMES_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.WEBKIT_KEYFRAMES_RULE'"]},{"name":"metadata.Experimental","parameters":[]}]},"WEBKIT_KEYFRAME_RULE":{"name":"WEBKIT_KEYFRAME_RULE","qualifiedName":"dart-dom-html.CssRule.WEBKIT_KEYFRAME_RULE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.WEBKIT_KEYFRAME_RULE'"]},{"name":"metadata.Experimental","parameters":[]}]},"cssText":{"name":"cssText","qualifiedName":"dart-dom-html.CssRule.cssText","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.cssText'"]}]},"parentRule":{"name":"parentRule","qualifiedName":"dart-dom-html.CssRule.parentRule","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.CssRule","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.parentRule'"]}]},"parentStyleSheet":{"name":"parentStyleSheet","qualifiedName":"dart-dom-html.CssRule.parentStyleSheet","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.CssStyleSheet","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.parentStyleSheet'"]}]},"type":{"name":"type","qualifiedName":"dart-dom-html.CssRule.type","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule.type'"]}]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.CssRule.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.CssRule.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-dom-html.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.CssRule.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"dart-dom-html.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.CssRule.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.CssRule.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.CssRule.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-dom-html.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.CssRule.noSuchMethod","comment":"<p><a>dart-dom-html.CssRule.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.CssRule.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.CssRule.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.CssRule.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"dart-dom-html.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.CssRule.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-dom-html.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["'CSSRule'"]}],"generics":{}}