{"name":"LibraryMirror","qualifiedName":"dart-mirrors.LibraryMirror","comment":"<p>A <a>dart-mirrors.LibraryMirror</a> reflects a Dart language library, providing\naccess to the variables, functions, and classes of the\nlibrary.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-mirrors.ObjectMirror","dart-mirrors.DeclarationMirror"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"declarations":{"name":"declarations","qualifiedName":"dart-mirrors.LibraryMirror.declarations","comment":"<p>Returns an immutable map of the declarations actually given in the library.</p>\n<p>This map includes all regular methods, getters, setters, fields, classes\nand typedefs actually declared in the library. The map is keyed by the\nsimple names of the declarations.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Symbol","inner":[]},{"outer":"dart-mirrors.DeclarationMirror","inner":[]}]}],"parameters":{},"annotations":[]},"libraryDependencies":{"name":"libraryDependencies","qualifiedName":"dart-mirrors.LibraryMirror.libraryDependencies","comment":"<p>Returns a list of the imports and exports in this library;</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-mirrors.LibraryDependencyMirror","inner":[]}]}],"parameters":{},"annotations":[]},"uri":{"name":"uri","qualifiedName":"dart-mirrors.LibraryMirror.uri","comment":"<p>The absolute uri of the library.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-mirrors.LibraryMirror.==","comment":"<p>Returns <code>true</code> if this mirror is equal to <a>dart-mirrors.LibraryMirror.==.other</a>.\nOtherwise returns <code>false</code>.</p>\n<p>The equality holds if and only if\n(1) <a>dart-mirrors.LibraryMirror.==.other</a> is a mirror of the same kind\nand\n(2)  The library being reflected by this mirror\nand the library being reflected by <a>dart-mirrors.LibraryMirror.==.other</a>\nare\nthe same library in the same isolate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-mirrors.LibraryMirror.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-mirrors.LibraryMirror.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isPrivate":{"name":"isPrivate","qualifiedName":"dart-mirrors.LibraryMirror.isPrivate","comment":"<p>Returns <code>true</code> if this declaration is considered private\naccording to the Dart language specification.\nAlways returns <code>false</code> if this declaration\nis a library.\nOtherwise return <code>false</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.isPrivate","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isTopLevel":{"name":"isTopLevel","qualifiedName":"dart-mirrors.LibraryMirror.isTopLevel","comment":"<p>Is this declaration top-level?</p>\n<p>This is defined to be equivalent to:\n   <code>mirror.owner != null &amp;&amp; mirror.owner is LibraryMirror</code></p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.isTopLevel","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"location":{"name":"location","qualifiedName":"dart-mirrors.LibraryMirror.location","comment":"<p>The source location of this Dart language entity.</p>\n<p>This operation is optional and may return <code>null</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.location","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.SourceLocation","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"dart-mirrors.LibraryMirror.metadata","comment":"<p>A list of the metadata associated with this declaration.</p>\n<p>Let <em>D</em> be the declaration this mirror reflects.\nIf <em>D</em> is decorated with annotations <em>A1, ..., An</em>\nwhere <em>n > 0</em>, then for each annotation <em>Ai</em> associated\nwith <em>D, 1 &lt;= i &lt;= n</em>, let <em>ci</em> be the constant object\nspecified by <em>Ai</em>. Then this method returns a list whose\nmembers are instance mirrors on <em>c1, ..., cn</em>.\nIf no annotations are associated with <em>D</em>, then\nan empty list is returned.</p>\n<p>If evaluating any of <em>c1, ..., cn</em> would cause a\ncompilation error\nthe effect is the same as if a non-reflective compilation error\nhad been encountered.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.metadata","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}]}],"parameters":{},"annotations":[]},"owner":{"name":"owner","qualifiedName":"dart-mirrors.LibraryMirror.owner","comment":"<p>A mirror on the owner of this Dart language entity. This is the declaration\nimmediately surrounding the reflectee.</p>\n<p>For a library, the owner is <code>null</code>.\nFor a class declaration, typedef or top level function\nor variable, the owner is the enclosing library.\nFor a mixin application <em>S with M</em>, the owner is the owner\nof <em>M</em>.\nFor a constructor, the owner is the immediately enclosing class.\nFor a method, instance variable or\na static variable, the owner is the immediately enclosing class,\nunless the class is a mixin application <em>S with M</em>, in which case\nthe owner is <em>M</em>. Note that <em>M</em> may be an invocation of a generic.\nFor a parameter, local variable or local function the owner is the\nimmediately enclosing function.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.owner","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.DeclarationMirror","inner":[]}],"parameters":{},"annotations":[]},"qualifiedName":{"name":"qualifiedName","qualifiedName":"dart-mirrors.LibraryMirror.qualifiedName","comment":"<p>The fully-qualified name for this Dart language entity.</p>\n<p>This name is qualified by the name of the owner. For instance,\nthe qualified name of a method 'method' in class 'Class' in\nlibrary 'library' is 'library.Class.method'.</p>\n<p>Returns a <a>dart-core.Symbol</a> constructed from a string representing the\nfully qualified name of the reflectee.\nLet <em>o</em> be the <a>dart-mirrors.LibraryMirror.owner</a> of this mirror, let <em>r</em> be the reflectee of\nthis mirror, let <em>p</em> be the fully qualified\nname of the reflectee of <em>o</em>, and let <em>s</em> be the simple name of <em>r</em>\ncomputed by <a>dart-mirrors.LibraryMirror.simpleName</a>.\nThe fully qualified name of <em>r</em> is the\nconcatenation of <em>p</em>, '.', and <em>s</em>.</p>\n<p>Because an isolate can contain more than one library with the same name (at\ndifferent URIs), a fully-qualified name does not uniquely identify any\nlanguage entity.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.qualifiedName","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-mirrors.LibraryMirror.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"simpleName":{"name":"simpleName","qualifiedName":"dart-mirrors.LibraryMirror.simpleName","comment":"<p>The simple name for this Dart language entity.</p>\n<p>The simple name is in most cases the the identifier name of the\nentity, such as 'method' for a method <code>void method() {...}</code> or\n'mylibrary' for a <code>library 'mylibrary';</code> declaration.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.simpleName","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-mirrors.LibraryMirror.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-mirrors.LibraryMirror.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-mirrors.LibraryMirror.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"getField":{"name":"getField","qualifiedName":"dart-mirrors.LibraryMirror.getField","comment":"<p>Invokes a getter and returns a mirror on the result. The getter\ncan be the implicit getter for a field or a user-defined getter\nmethod.</p>\n<p>Let <em>o</em> be the object reflected by this mirror, let\n<em>f</em> be the simple name of the getter denoted by <a>dart-mirrors.LibraryMirror.getField.fieldName</a>,\nThen this method will perform the getter invocation\n <em>o.f</em>\nin a scope that has access to the private members\nof <em>o</em> (if <em>o</em> is a class or library) or the private members of the\nclass of <em>o</em> (otherwise).</p>\n<p>If this mirror is an <a>dart-mirrors.InstanceMirror</a>, and <a>dart-mirrors.LibraryMirror.getField.fieldName</a> denotes an instance\nmethod on its reflectee, the result of the invocation is an instance\nmirror on a closure corresponding to that method.</p>\n<p>If this mirror is a <a>dart-mirrors.LibraryMirror</a>, and <a>dart-mirrors.LibraryMirror.getField.fieldName</a> denotes a top-level\nmethod in the corresponding library, the result of the invocation is an\ninstance mirror on a closure corresponding to that method.</p>\n<p>If this mirror is a <a>dart-mirrors.ClassMirror</a>, and <a>dart-mirrors.LibraryMirror.getField.fieldName</a> denotes a static method\nin the corresponding class, the result of the invocation is an instance\nmirror on a closure corresponding to that method.</p>\n<p>If the invocation returns a result <em>r</em>, this method returns\nthe result of calling <a href=\"*r*\">reflect</a>.\nIf the invocation causes a compilation error\nthe effect is the same as if a non-reflective compilation error\nhad been encountered.\nIf the invocation throws an exception <em>e</em> (that it does not catch)\nthis method throws <em>e</em>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.ObjectMirror.getField","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}],"parameters":{"fieldName":{"name":"fieldName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"invoke":{"name":"invoke","qualifiedName":"dart-mirrors.LibraryMirror.invoke","comment":"<p>Invokes the named function and returns a mirror on the result.</p>\n<p>Let <em>o</em> be the object reflected by this mirror, let\n<em>f</em> be the simple name of the member denoted by <a>dart-mirrors.LibraryMirror.invoke.memberName</a>,\nlet <em>a1, ..., an</em> be the elements of <a>dart-mirrors.LibraryMirror.invoke.positionalArguments</a>\nlet <em>k1, ..., km</em> be the identifiers denoted by the elements of\nnamedArguments.keys\nand let <em>v1, ..., vm</em> be the elements of namedArguments.values.\nThen this method will perform the method invocation\n <em>o.f(a1, ..., an, k1: v1, ..., km: vm)</em>\nin a scope that has access to the private members\nof <em>o</em> (if <em>o</em> is a class or library) or the private members of the\nclass of <em>o</em> (otherwise).\nIf the invocation returns a result <em>r</em>, this method returns\nthe result of calling <a href=\"*r*\">reflect</a>.\nIf the invocation causes a compilation error\nthe effect is the same as if a non-reflective compilation error\nhad been encountered.\nIf the invocation throws an exception <em>e</em> (that it does not catch)\nthis method throws <em>e</em>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.ObjectMirror.invoke","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}],"parameters":{"memberName":{"name":"memberName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]},"positionalArguments":{"name":"positionalArguments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]},"namedArguments":{"name":"namedArguments","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Symbol","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-mirrors.LibraryMirror.noSuchMethod","comment":"<p><a>dart-mirrors.LibraryMirror.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-mirrors.LibraryMirror.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-mirrors.LibraryMirror.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-mirrors.LibraryMirror.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setField":{"name":"setField","qualifiedName":"dart-mirrors.LibraryMirror.setField","comment":"<p>Invokes a setter and returns a mirror on the result. The setter\nmay be either the implicit setter for a non-final field or a\nuser-defined setter method.</p>\n<p>Let <em>o</em> be the object reflected by this mirror, let\n<em>f</em> be the simple name of the getter denoted by <a>dart-mirrors.LibraryMirror.setField.fieldName</a>,\nand let <em>a</em> be the object bound to <a>dart-mirrors.LibraryMirror.setField.value</a>.\nThen this method will perform the setter invocation\n<em>o.f = a</em>\nin a scope that has access to the private members\nof <em>o</em> (if <em>o</em> is a class or library) or the private members of the\nclass of <em>o</em> (otherwise).\nIf the invocation returns a result <em>r</em>, this method returns\nthe result of calling <a href=\"[value]\">reflect</a>.\nIf the invocation causes a compilation error\nthe effect is the same as if a non-reflective compilation error\nhad been encountered.\nIf the invocation throws an exception <em>e</em> (that it does not catch)\nthis method throws <em>e</em>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.ObjectMirror.setField","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}],"parameters":{"fieldName":{"name":"fieldName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-mirrors.LibraryMirror.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}