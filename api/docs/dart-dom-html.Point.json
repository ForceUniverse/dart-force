{"name":"Point","qualifiedName":"dart-dom-html.Point","comment":"<p>A utility class for representing two-dimensional positions.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"x":{"name":"x","qualifiedName":"dart-math.Point.x","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.Point.T","inner":[]}],"annotations":[]},"y":{"name":"y","qualifiedName":"dart-math.Point.y","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.Point.T","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.Point.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.Point.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"magnitude":{"name":"magnitude","qualifiedName":"dart-dom-html.Point.magnitude","comment":"<p>Get the straight line (Euclidean) distance between the origin (0, 0) and\nthis point.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-dom-html.Point.Point-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point.T","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"*":{"name":"*","qualifiedName":"dart-dom-html.Point.*","comment":"<p>Scale this point by <a>dart-dom-html.Point.*.factor</a> as if it were a vector.</p>\n<p><em>Important</em> <em>Note</em>: This function accepts a <code>num</code> as its argument only so\nthat you can scale Point&lt;double> objects by an <code>int</code> factor. Because the\nstar operator always returns the same type of Point that originally called\nit, passing in a double <a>dart-dom-html.Point.*.factor</a> on a <code>Point&lt;int&gt;</code> <em>causes</em> <em>a</em>\n<em>runtime</em> <em>error</em> in checked mode.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Point.T","inner":[]}]}],"parameters":{"factor":{"name":"factor","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"dart-dom-html.Point.+","comment":"<p>Add <a>dart-dom-html.Point.+.other</a> to <code>this</code>, as if both points were vectors.</p>\n<p>Returns the resulting \"vector\" as a Point.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Point.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Point.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"dart-dom-html.Point.-","comment":"<p>Subtract <a>dart-dom-html.Point.-.other</a> from <code>this</code>, as if both points were vectors.</p>\n<p>Returns the resulting \"vector\" as a Point.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Point.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Point.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"==":{"name":"==","qualifiedName":"dart-dom-html.Point.==","comment":"<p>A <code>Point</code> is only equal to another <code>Point</code> with the same coordinates.</p>\n<p>This point is equal to <code>other</code> if, and only if,\n<code>other</code> is a <code>Point</code> with\n<a>dart-math.Point.x</a> equal to <code>other.x</code> and <a>dart-math.Point.y</a> equal to <code>other.y</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"distanceTo":{"name":"distanceTo","qualifiedName":"dart-dom-html.Point.distanceTo","comment":"<p>Returns the distance between <code>this</code> and <a>dart-dom-html.Point.distanceTo.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Point.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"squaredDistanceTo":{"name":"squaredDistanceTo","qualifiedName":"dart-dom-html.Point.squaredDistanceTo","comment":"<p>Returns the squared distance between <code>this</code> and <a>dart-dom-html.Point.squaredDistanceTo.other</a>.</p>\n<p>Squared distances can be used for comparisons when the actual value is not\nrequired.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point.T","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Point.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.Point.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.Point.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.Point.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.Point.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.Point.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.Point.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.Point.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.Point.noSuchMethod","comment":"<p><a>dart-dom-html.Point.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.Point.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.Point.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.Point.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.Point.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.num"}}}