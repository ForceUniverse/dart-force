{"name":"RegExp","qualifiedName":"dart-core.RegExp","comment":"<p>A regular expression pattern.</p>\n<p>Regular expressions are <a>dart-core.Pattern</a>s, and can as such be used to match strings\nor parts of strings.</p>\n<p>Dart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.10\">http://ecma-international.org/ecma-262/5.1/#sec-15.10</a>\nfor the specification of JavaScript regular expressions.</p>\n<p><a>dart-core.RegExp.firstMatch</a> is the main implementation method that applies a regular\nexpression to a string and returns the first <a>dart-core.Match</a>. All\nother methods in <a>dart-core.RegExp</a> can build on it.</p>\n<p>Use <a>dart-core.RegExp.allMatches</a> to look for all matches of a regular expression in\na string.</p>\n<p>The following example finds all matches of a regular expression in\na string.</p>\n<pre><code>RegExp exp = new RegExp(r\"(\\w+)\");\nString str = \"Parse my string\";\nIterable&lt;Match&gt; matches = exp.allMatches(str);\n</code></pre>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-core.Pattern"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isCaseSensitive":{"name":"isCaseSensitive","qualifiedName":"dart-core.RegExp.isCaseSensitive","comment":"<p>Whether this regular expression is case sensitive.</p>\n<p>If the regular expression is not case sensitive, it will match an input\nletter with a pattern letter even if the two letters are different case\nversions of the same letter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isMultiLine":{"name":"isMultiLine","qualifiedName":"dart-core.RegExp.isMultiLine","comment":"<p>Whether this regular expression matches multiple lines.</p>\n<p>If the regexp does match multiple lines, the \"^\" and \"$\" characters\nmatch the beginning and end of lines. If not, the character match the\nbeginning and end of the input.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"pattern":{"name":"pattern","qualifiedName":"dart-core.RegExp.pattern","comment":"<p>The source regular expression string used to create this <code>RegExp</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.RegExp.RegExp-","comment":"<p>Constructs a regular expression.</p>\n<p>Throws a <a>dart-core.FormatException</a> if <a>dart-core.RegExp.RegExp-.source</a> is not valid regular\nexpression syntax.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.RegExp","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"multiLine":{"name":"multiLine","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"caseSensitive":{"name":"caseSensitive","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"allMatches":{"name":"allMatches","qualifiedName":"dart-core.RegExp.allMatches","comment":"<p>Returns an iterable of the matches of the regular expression on <a>dart-core.RegExp.allMatches.input</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Match","inner":[]}]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"firstMatch":{"name":"firstMatch","qualifiedName":"dart-core.RegExp.firstMatch","comment":"<p>Searches for the first match of the regular expression\nin the string <a>dart-core.RegExp.firstMatch.input</a>. Returns <code>null</code> if there is no match.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Match","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"hasMatch":{"name":"hasMatch","qualifiedName":"dart-core.RegExp.hasMatch","comment":"<p>Returns whether the regular expression has a match in the string <a>dart-core.RegExp.hasMatch.input</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"stringMatch":{"name":"stringMatch","qualifiedName":"dart-core.RegExp.stringMatch","comment":"<p>Returns the first substring match of this regular expression in <a>dart-core.RegExp.stringMatch.input</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.RegExp.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.RegExp.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.RegExp.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.RegExp.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.RegExp.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.RegExp.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"allMatches":{"name":"allMatches","qualifiedName":"dart-core.RegExp.allMatches","comment":"<p>Match this pattern against the string repeatedly.</p>\n<p>The iterable will contain all the non-overlapping matches of the\npattern on the string, ordered by start index.</p>\n<p>The matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.</p>\n<p>If the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.</p>","commentFrom":"","inheritedFrom":"dart-core.Pattern.allMatches","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Match","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matchAsPrefix":{"name":"matchAsPrefix","qualifiedName":"dart-core.RegExp.matchAsPrefix","comment":"<p>Match this pattern against the start of string.</p>\n<p>If <a>dart-core.RegExp.matchAsPrefix.start</a> is provided, it must be an integer in the range <code>0</code> ..\n<code>string.length</code>. In that case, this patten is tested against the\nstring at the <a>dart-core.RegExp.matchAsPrefix.start</a> position. That is, a match is returned if the\npattern can match a part of the string starting from position <a>dart-core.RegExp.matchAsPrefix.start</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Pattern.matchAsPrefix","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Match","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.RegExp.noSuchMethod","comment":"<p><a>dart-core.RegExp.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.RegExp.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.RegExp.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.RegExp.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.RegExp.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}