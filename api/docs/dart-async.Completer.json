{"name":"Completer","qualifiedName":"dart-async.Completer","comment":"<p>A way to produce Future objects and to complete them later\nwith a value or error.</p>\n<p>If you already have a Future, you probably don't need a Completer.\nInstead, you can usually use <a>dart-async.Future.then</a>, which returns a Future:</p>\n<pre><code>Future doStuff(){\n  return someAsyncOperation().then((result) {\n    // Do something.\n  });\n}\n</code></pre>\n<p>If you do need to create a Future from scratch—for example,\nwhen you're converting a callback-based API into a Future-based\none—you can use a Completer as follows:</p>\n<pre><code>Class AsyncOperation {\n  Completer _completer = new Completer();\n\n  Future&lt;T&gt; doOperation() {\n    _startOperation();\n    return _completer.future; // Send future object back to client.\n  }\n\n  // Something calls this when the value is ready.\n  _finishOperation(T result) {\n    _completer.complete(result);\n  }\n\n  // If something goes wrong, call this.\n  _errorHappened(error) {\n    _completer.completeError(error);\n  }\n}\n</code></pre>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"future":{"name":"future","qualifiedName":"dart-async.Completer.future","comment":"<p>The future that will contain the result provided to this completer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"isCompleted":{"name":"isCompleted","qualifiedName":"dart-async.Completer.isCompleted","comment":"<p>Whether the future has been completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-async.Completer.Completer-","comment":"<p>Creates a completer whose future is completed asynchronously, sometime\nafter <a>dart-async.Completer.complete</a> is called on it. This allows a call to <a>dart-async.Completer.complete</a> to\nbe in the middle of other code, without running an unknown amount of\nfuture completion and then callbacks synchronously at the point that\n<a>dart-async.Completer.complete</a> is called.</p>\n<p>Example:</p>\n<pre><code>var completer = new Completer.sync();\ncompleter.future.then((_) { bar(); });\n// The completion is the result of the asynchronous onDone event.\n// However, there is code executed after the call to complete,\n// but before completer.future runs its completion callback.\nstream.listen(print, onDone: () {\n  completer.complete(\"done\");\n  foo();  // In this case, foo() runs before bar().\n});\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Completer","inner":[{"outer":"dart-async.Completer.T","inner":[]}]}],"parameters":{},"annotations":[]},"sync":{"name":"sync","qualifiedName":"dart-async.Completer.Completer-sync","comment":"<p>Completes the future synchronously.</p>\n<p>This constructor should be avoided unless the completion of the future is\nknown to be the final result of another asynchronous operation. If in doubt\nuse the default <a>dart-async.Completer</a> constructor.</p>\n<p>Example:</p>\n<pre><code>var completer = new Completer.sync();\n// The completion is the result of the asynchronous onDone event.\n// No other operation is performed after the completion. It is safe\n// to use the Completer.sync constructor.\nstream.listen(print, onDone: () { completer.complete(\"done\"); });\n</code></pre>\n<p>Bad example. Do not use this code. Only for illustrative purposes:</p>\n<pre><code>var completer = new Completer.sync();\ncompleter.future.then((_) { bar(); });\n// The completion is the result of the asynchronous onDone event.\n// However, there is still code executed after the completion. This\n// operation is *not* safe.\nstream.listen(print, onDone: () {\n  completer.complete(\"done\");\n  foo();  // In this case, foo() runs after bar().\n});\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Completer","inner":[{"outer":"dart-async.Completer.T","inner":[]}]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"complete":{"name":"complete","qualifiedName":"dart-async.Completer.complete","comment":"<p>Completes <a>dart-async.Completer.future</a> with the supplied values.</p>\n<p>If the value is itself a future, the completer will wait for that future\nto complete, and complete with the same result, whether it is a success\nor an error.</p>\n<p>Calling <code>complete</code> or <a>dart-async.Completer.completeError</a> must not be done more than once.</p>\n<p>All listeners on the future are informed about the value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"completeError":{"name":"completeError","qualifiedName":"dart-async.Completer.completeError","comment":"<p>Complete <a>dart-async.Completer.future</a> with an error.</p>\n<p>Calling <a>dart-async.Completer.complete</a> or <code>completeError</code> must not be done more than once.</p>\n<p>Completing a future with an error indicates that an exception was thrown\nwhile trying to produce a value.</p>\n<p>The argument <a>dart-async.Completer.completeError.error</a> must not be <code>null</code>.</p>\n<p>If <code>error</code> is a <code>Future</code>, the future itself is used as the error value.\nIf you want to complete with the result of the future, you can use:</p>\n<pre><code>thisCompleter.complete(theFuture)\n</code></pre>\n<p>or if you only want to handle an error from the future:</p>\n<pre><code>theFuture.catchError(thisCompleter.completeError);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-async.Completer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-async.Completer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-async.Completer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-async.Completer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-async.Completer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-async.Completer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-async.Completer.noSuchMethod","comment":"<p><a>dart-async.Completer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-async.Completer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-async.Completer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-async.Completer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-async.Completer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}