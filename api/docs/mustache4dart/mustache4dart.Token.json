{"name":"Token","qualifiedName":"mustache4dart/mustache4dart.Token","comment":"<p>This is the main class describing a compiled token.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"prev":{"name":"prev","qualifiedName":"mustache4dart/mustache4dart.Token.prev","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"mustache4dart/mustache4dart.Token","inner":[]}],"annotations":[]},"rendable":{"name":"rendable","qualifiedName":"mustache4dart/mustache4dart.Token.rendable","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"next=":{"name":"next=","qualifiedName":"mustache4dart/mustache4dart.Token.next=","comment":"","commentFrom":"mustache4dart.Token.next=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"mustache4dart/mustache4dart.Token","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"mustache4dart/mustache4dart.Token.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>mustache4dart/mustache4dart.Token.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"next":{"name":"next","qualifiedName":"mustache4dart/mustache4dart.Token.next","comment":"","commentFrom":"mustache4dart.Token.next","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mustache4dart/mustache4dart.Token","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"mustache4dart/mustache4dart.Token.value","comment":"<p>This describes the value of the token.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"mustache4dart/mustache4dart.Token.Token-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mustache4dart/mustache4dart.Token","inner":[]}],"parameters":{"token":{"name":"token","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"partial":{"name":"partial","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"d":{"name":"d","optional":false,"named":false,"default":false,"type":[{"outer":"mustache4dart/mustache4dart.Delimiter","inner":[]}],"value":null,"annotations":[]},"ident":{"name":"ident","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"withSource":{"name":"withSource","qualifiedName":"mustache4dart/mustache4dart.Token.Token-withSource","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_source":{"name":"_source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"mustache4dart/mustache4dart.Token.==","comment":"<p>Two tokens are the same if their _val are the same.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"apply":{"name":"apply","qualifiedName":"mustache4dart/mustache4dart.Token.apply","comment":"","commentFrom":"mustache4dart.Token.apply","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.StringBuffer","inner":[]}],"parameters":{"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"mustache4dart/mustache_context.MustacheContext","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"call":{"name":"call","qualifiedName":"mustache4dart/mustache4dart.Token.call","comment":"","commentFrom":"mustache4dart.Token.call","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mustache4dart/mustache4dart.Token","inner":[]}],"parameters":{"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"mustache4dart/mustache_context.MustacheContext","inner":[]}],"value":null,"annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StringSink","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"mustache4dart/mustache4dart.Token.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>mustache4dart/mustache4dart.Token.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"mustache4dart/mustache4dart.Token.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"mustache4dart/mustache4dart.Token.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>mustache4dart/mustache4dart.Token.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>mustache4dart/mustache4dart.Token.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"mustache4dart/mustache4dart.Token.noSuchMethod","comment":"<p><a>mustache4dart/mustache4dart.Token.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>mustache4dart/mustache4dart.Token.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>mustache4dart/mustache4dart.Token.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>mustache4dart/mustache4dart.Token.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"mustache4dart/mustache4dart.Token.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}