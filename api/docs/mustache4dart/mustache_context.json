{"name":"mustache_context","qualifiedName":"mustache4dart/mustache_context","comment":"","variables":{"USE_MIRRORS":{"name":"USE_MIRRORS","qualifiedName":"mustache4dart/mustache_context.USE_MIRRORS","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"MustacheContext","qualifiedName":"mustache4dart/mustache_context.MustacheContext"}],"typedef":{},"error":[]},"packageName":"mustache4dart","packageIntro":"<h1>Mustache for the dartlang <a href=\"https://drone.io/github.com/valotas/mustache4dart/latest\"><a href=\"https://drone.io/github.com/valotas/mustache4dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/valotas/mustache4dart/status.png\"></img></a></a></h1>\n<p>A simple implementation of <a href=\"http://mustache.github.com/\">Mustache</a> for the <a href=\"http://www.dartlang.org/\">Dart language</a>,\nwhich passes happily all the <a href=\"http://github.com/mustache/spec\">mustache specs</a>. If you want to \nhave a look at how it works, just check the <a href=\"http://github.com/valotas/mustache4dart/blob/master/test/mustache_tests.dart\">tests</a>. For more info, \njust read further.</p>\n<h2>Using it</h2>\n<p>In order to use the library, just add it to your pubspec.yalm as a dependency</p>\n<pre><code>dependencies:\n  mustache4dart: '&gt;= 1.0.0'\n</code></pre>\n<p>and you are good to go. You can use the render toplevel function to render your template.\nFor example:</p>\n<pre class=\"dart\"><code>var salutation = render('Hello {{name}}!', {'name': 'Bob'});\nprint(salutation); //shoud print Hello Bob!\n</code></pre>\n<h3>Context objects</h3>\n<p>mustache4dart will look at your given object for operators, fields or methods. For example,\nif you give the template <code>{{firstname}}</code> for rendering, mustache4dart will try the followings</p><ol><li>use the <code>[]</code> operator with <code>firstname</code> as the parameter</li><li>search for a field named <code>firstname</code></li><li>search for a getter named <code>firstname</code></li><li>search for a method named <code>firstname</code></li><li>search for a method named <code>getFirstname</code></li></ol>\n<p>in each case the first valid value will be used.</p>\n<h4>@MirrorsUsed</h4>\n<p>In order to do the stuff described above the mirror library is being used which could lead to big js files when compiling the library with dartjs. The implementation does use the <code>@MirrorsUsed</code> annotation but <a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-mirrors.MirrorsUsed\">as documented</a> this is experimental.</p>\n<p>In order to avoid the use of the mirrors package, make sure that you compile your library with <code>dart2js -DMIRRORS=false </code>. In that case though you must always make sure that your context object have a right implementation of the <code>[]</code> operator as it will be the only check made against them (from the ones described above) in order to define a value.</p>\n<h3>Partials</h3>\n<p>mustache4dart support partials but it needs somehow to know how to find a partial. You can\ndo that by providing a function that returns a template given a name:</p>\n<pre class=\"dart\"><code>String partialProvider(String partialName) =&gt; \"this is the partial with name: ${partialName}\";\nexpect(render('[{{&gt;p}}]', null, partial: partialProvider), '[this is the partial with name: p]'));\n</code></pre>\n<h3>Compiling to functions</h3>\n<p>If you have a template that you are going to reuse with different contextes you can compile\nit to a function using the toplevel function compile:</p>\n<pre class=\"dart\"><code>var salut = compile('Hello {{name}}!');\nprint(salut({'name': 'Alice'})); //should print Hello Alice!\n</code></pre>\n<h2>Running the tests</h2>\n<p>At the moment the project is under heavy development but pass all the <a href=\"http://github.com/mustache/spec\">Mustache specs</a>. \nIf you want to run the tests yourself, just do what <a href=\"https://drone.io/github.com/valotas/mustache4dart/admin\">drone.io does</a>,\nor to put it by another way, do the following:</p>\n<pre class=\"sh\"><code>git clone git://github.com/valotas/mustache4dart.git\ngit submodule init\ngit submodule update \npub install\ntest/run.sh\n</code></pre>\n<h2>Contributing</h2>\n<p>If you found a bug, just create a <a href=\"https://github.com/valotas/mustache4dart/issues/new\">new issue</a> or even better fork and issue a\npull request with you fix.</p>\n<h2>Versioning</h2>\n<p>The library will follow a <a href=\"http://semver.org/\">semantic versioning</a></p>"}