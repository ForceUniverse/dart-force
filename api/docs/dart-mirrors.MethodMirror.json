{"name":"MethodMirror","qualifiedName":"dart-mirrors.MethodMirror","comment":"<p>A <a>dart-mirrors.MethodMirror</a> reflects a Dart language function, method,\nconstructor, getter, or setter.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-mirrors.DeclarationMirror"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"constructorName":{"name":"constructorName","qualifiedName":"dart-mirrors.MethodMirror.constructorName","comment":"<p>The constructor name for named constructors and factory methods.</p>\n<p>For unnamed constructors, this is the empty string.  For\nnon-constructors, this is the empty string.</p>\n<p>For example, <code>'bar'</code> is the constructor name for constructor\n<code>Foo.bar</code> of type <code>Foo</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{},"annotations":[]},"isAbstract":{"name":"isAbstract","qualifiedName":"dart-mirrors.MethodMirror.isAbstract","comment":"<p>Is the reflectee abstract?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isConstConstructor":{"name":"isConstConstructor","qualifiedName":"dart-mirrors.MethodMirror.isConstConstructor","comment":"<p>Is the reflectee a const constructor?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isConstructor":{"name":"isConstructor","qualifiedName":"dart-mirrors.MethodMirror.isConstructor","comment":"<p>Is the reflectee a constructor?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isFactoryConstructor":{"name":"isFactoryConstructor","qualifiedName":"dart-mirrors.MethodMirror.isFactoryConstructor","comment":"<p>Is the reflectee a factory constructor?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isGenerativeConstructor":{"name":"isGenerativeConstructor","qualifiedName":"dart-mirrors.MethodMirror.isGenerativeConstructor","comment":"<p>Is the reflectee a generative constructor?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isGetter":{"name":"isGetter","qualifiedName":"dart-mirrors.MethodMirror.isGetter","comment":"<p>Is the reflectee a getter?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isOperator":{"name":"isOperator","qualifiedName":"dart-mirrors.MethodMirror.isOperator","comment":"<p>Is the reflectee an operator?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isRedirectingConstructor":{"name":"isRedirectingConstructor","qualifiedName":"dart-mirrors.MethodMirror.isRedirectingConstructor","comment":"<p>Is the reflectee a redirecting constructor?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isRegularMethod":{"name":"isRegularMethod","qualifiedName":"dart-mirrors.MethodMirror.isRegularMethod","comment":"<p>Is the reflectee a regular function or method?</p>\n<p>A function or method is regular if it is not a getter, setter, or\nconstructor.  Note that operators, by this definition, are\nregular methods.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isSetter":{"name":"isSetter","qualifiedName":"dart-mirrors.MethodMirror.isSetter","comment":"<p>Is the reflectee a setter?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isStatic":{"name":"isStatic","qualifiedName":"dart-mirrors.MethodMirror.isStatic","comment":"<p>Is the reflectee static?</p>\n<p>For the purposes of the mirrors library, a top-level function is\nconsidered static.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isSynthetic":{"name":"isSynthetic","qualifiedName":"dart-mirrors.MethodMirror.isSynthetic","comment":"<p>Returns true if the reflectee is synthetic, and returns false otherwise.</p>\n<p>A reflectee is synthetic if it is a getter or setter implicitly introduced\nfor a field or Type, or if it is a constructor that was implicitly\nintroduced as a default constructor or as part of a mixin application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"parameters":{"name":"parameters","qualifiedName":"dart-mirrors.MethodMirror.parameters","comment":"<p>A list of mirrors on the parameters for the reflectee.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-mirrors.ParameterMirror","inner":[]}]}],"parameters":{},"annotations":[]},"returnType":{"name":"returnType","qualifiedName":"dart-mirrors.MethodMirror.returnType","comment":"<p>A mirror on the return type for the reflectee.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.TypeMirror","inner":[]}],"parameters":{},"annotations":[]},"source":{"name":"source","qualifiedName":"dart-mirrors.MethodMirror.source","comment":"<p>The source code for the reflectee, if available. Otherwise null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-mirrors.MethodMirror.==","comment":"<p>Returns true if this mirror is equal to <a>dart-mirrors.MethodMirror.==.other</a>.</p>\n<p>The equality holds if and only if\n(1) <a>dart-mirrors.MethodMirror.==.other</a> is a mirror of the same kind\nand\n(2) <code>simpleName == other.simpleName</code> and\n<code>owner == other.owner</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-mirrors.MethodMirror.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-mirrors.MethodMirror.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isPrivate":{"name":"isPrivate","qualifiedName":"dart-mirrors.MethodMirror.isPrivate","comment":"<p>Returns <code>true</code> if this declaration is considered private\naccording to the Dart language specification.\nAlways returns <code>false</code> if this declaration\nis a library.\nOtherwise return <code>false</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.isPrivate","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isTopLevel":{"name":"isTopLevel","qualifiedName":"dart-mirrors.MethodMirror.isTopLevel","comment":"<p>Is this declaration top-level?</p>\n<p>This is defined to be equivalent to:\n   <code>mirror.owner != null &amp;&amp; mirror.owner is LibraryMirror</code></p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.isTopLevel","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"location":{"name":"location","qualifiedName":"dart-mirrors.MethodMirror.location","comment":"<p>The source location of this Dart language entity.</p>\n<p>This operation is optional and may return <code>null</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.location","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.SourceLocation","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"dart-mirrors.MethodMirror.metadata","comment":"<p>A list of the metadata associated with this declaration.</p>\n<p>Let <em>D</em> be the declaration this mirror reflects.\nIf <em>D</em> is decorated with annotations <em>A1, ..., An</em>\nwhere <em>n > 0</em>, then for each annotation <em>Ai</em> associated\nwith <em>D, 1 &lt;= i &lt;= n</em>, let <em>ci</em> be the constant object\nspecified by <em>Ai</em>. Then this method returns a list whose\nmembers are instance mirrors on <em>c1, ..., cn</em>.\nIf no annotations are associated with <em>D</em>, then\nan empty list is returned.</p>\n<p>If evaluating any of <em>c1, ..., cn</em> would cause a\ncompilation error\nthe effect is the same as if a non-reflective compilation error\nhad been encountered.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.metadata","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}]}],"parameters":{},"annotations":[]},"owner":{"name":"owner","qualifiedName":"dart-mirrors.MethodMirror.owner","comment":"<p>A mirror on the owner of this Dart language entity. This is the declaration\nimmediately surrounding the reflectee.</p>\n<p>For a library, the owner is <code>null</code>.\nFor a class declaration, typedef or top level function\nor variable, the owner is the enclosing library.\nFor a mixin application <em>S with M</em>, the owner is the owner\nof <em>M</em>.\nFor a constructor, the owner is the immediately enclosing class.\nFor a method, instance variable or\na static variable, the owner is the immediately enclosing class,\nunless the class is a mixin application <em>S with M</em>, in which case\nthe owner is <em>M</em>. Note that <em>M</em> may be an invocation of a generic.\nFor a parameter, local variable or local function the owner is the\nimmediately enclosing function.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.owner","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.DeclarationMirror","inner":[]}],"parameters":{},"annotations":[]},"qualifiedName":{"name":"qualifiedName","qualifiedName":"dart-mirrors.MethodMirror.qualifiedName","comment":"<p>The fully-qualified name for this Dart language entity.</p>\n<p>This name is qualified by the name of the owner. For instance,\nthe qualified name of a method 'method' in class 'Class' in\nlibrary 'library' is 'library.Class.method'.</p>\n<p>Returns a <a>dart-core.Symbol</a> constructed from a string representing the\nfully qualified name of the reflectee.\nLet <em>o</em> be the <a>dart-mirrors.MethodMirror.owner</a> of this mirror, let <em>r</em> be the reflectee of\nthis mirror, let <em>p</em> be the fully qualified\nname of the reflectee of <em>o</em>, and let <em>s</em> be the simple name of <em>r</em>\ncomputed by <a>dart-mirrors.MethodMirror.simpleName</a>.\nThe fully qualified name of <em>r</em> is the\nconcatenation of <em>p</em>, '.', and <em>s</em>.</p>\n<p>Because an isolate can contain more than one library with the same name (at\ndifferent URIs), a fully-qualified name does not uniquely identify any\nlanguage entity.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.qualifiedName","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-mirrors.MethodMirror.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"simpleName":{"name":"simpleName","qualifiedName":"dart-mirrors.MethodMirror.simpleName","comment":"<p>The simple name for this Dart language entity.</p>\n<p>The simple name is in most cases the the identifier name of the\nentity, such as 'method' for a method <code>void method() {...}</code> or\n'mylibrary' for a <code>library 'mylibrary';</code> declaration.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.simpleName","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-mirrors.MethodMirror.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-mirrors.MethodMirror.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-mirrors.MethodMirror.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-mirrors.MethodMirror.noSuchMethod","comment":"<p><a>dart-mirrors.MethodMirror.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-mirrors.MethodMirror.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-mirrors.MethodMirror.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-mirrors.MethodMirror.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-mirrors.MethodMirror.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}