{"name":"Deprecated","qualifiedName":"dart-core.Deprecated","comment":"<p>The annotation <code>@Deprecated('expires when')</code> marks a feature as deprecated.</p>\n<p>The annotation <code>@deprecated</code> is a shorthand for deprecating until\nan unspecified \"next release\".</p>\n<p>The intent of the <code>@Deprecated</code> annotation is to inform users of a feature\nthat they should change their code, even if it is currently still working\ncorrectly.</p>\n<p>A deprecated feature is scheduled to be removed at a later time, possibly\nspecified as the \"expires\" field of the annotation.\nThis means that a deprecated feature should not be used, or code using it\nwill break at some point in the future. If there is code using the feature,\nthat code should be rewritten to not use the deprecated feature.</p>\n<p>A deprecated feature should document how the same effect can be achieved,\nso the programmer knows how to rewrite the code.</p>\n<p>The <code>@Deprecated</code> annotation applies to libraries, top-level declarations\n(variables, getters, setters, functions, classes and typedefs),\nclass-level declarations (variables, getters, setters, methods, operators or\nconstructors, whether static or not), named optional arguments and\ntrailing optional positional parameters.</p>\n<p>Deprecation is transitive:</p><ul><li>If a library is deprecated, so is every member of it.</li><li>If a class is deprecated, so is every member of it.</li><li>If a variable is deprecated, so are its implicit getter and setter.</li></ul>\n<p>A tool that processes Dart source code may report when:</p><ul><li>the code imports a deprecated library.</li><li>\n<p>the code exports a deprecated library, or any deprecated member of\n Â a non-deprecated library.</p></li><li>the code refers statically to a deprecated declaration.</li><li>\n<p>the code dynamically uses a member of an object with a statically known\n  type, where the member is deprecated on the static type of the object.</p></li><li>\n<p>the code dynamically calls a method with an argument where the\n  corresponding optional parameter is deprecated on the object's static type.</p></li></ul>\n<p>If the deprecated use is inside a library, class or method which is itself\ndeprecated, the tool should not bother the user about it.\nA deprecated feature is expected to use other deprecated features.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"expires":{"name":"expires","qualifiedName":"dart-core.Deprecated.expires","comment":"<p>A description of when the deprecated feature is expected to be retired.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-core.Deprecated.Deprecated-","comment":"<p>Create a deprecation annotation which specifies the expiration of the\nannotated feature.</p>\n<p>The <a>dart-core.Deprecated.Deprecated-.expires</a> argument should be readable by programmers, and should state\nwhen an annotated feature is expected to be removed.\nThis can be specified, for example, as a date, as a release number, or\nas relative to some other change (like \"when bug 4418 is fixed\").</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expires":{"name":"expires","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"dart-core.Deprecated.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Deprecated.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Deprecated.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Deprecated.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Deprecated.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Deprecated.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Deprecated.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Deprecated.noSuchMethod","comment":"<p><a>dart-core.Deprecated.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Deprecated.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Deprecated.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Deprecated.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Deprecated.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}