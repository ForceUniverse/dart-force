{"name":"ParameterMirror","qualifiedName":"dart-mirrors.ParameterMirror","comment":"<p>A <a>dart-mirrors.ParameterMirror</a> reflects a Dart formal parameter declaration.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-mirrors.VariableMirror"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"defaultValue":{"name":"defaultValue","qualifiedName":"dart-mirrors.ParameterMirror.defaultValue","comment":"<p>If this is a required parameter, returns <code>null</code>. Otherwise returns a\nmirror on the default value for this parameter. If no default is declared\nfor an optional parameter, the default is <code>null</code> and a mirror on <code>null</code>\nis returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}],"parameters":{},"annotations":[]},"hasDefaultValue":{"name":"hasDefaultValue","qualifiedName":"dart-mirrors.ParameterMirror.hasDefaultValue","comment":"<p>Returns <code>true</code> if the reflectee has explicitly declared a default value.\nOtherwise returns <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNamed":{"name":"isNamed","qualifiedName":"dart-mirrors.ParameterMirror.isNamed","comment":"<p>Returns <code>true</code> if the reflectee is a named parameter.\nOtherwise returns <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isOptional":{"name":"isOptional","qualifiedName":"dart-mirrors.ParameterMirror.isOptional","comment":"<p>Returns <code>true</code> if the reflectee is an optional parameter.\nOtherwise returns <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"type":{"name":"type","qualifiedName":"dart-mirrors.ParameterMirror.type","comment":"<p>A mirror on the type of this parameter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.TypeMirror","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-mirrors.ParameterMirror.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-mirrors.ParameterMirror.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isConst":{"name":"isConst","qualifiedName":"dart-mirrors.ParameterMirror.isConst","comment":"<p>Returns <code>true</code> if the reflectee is declared <code>const</code>.\nOtherwise returns <code>false</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.VariableMirror.isConst","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isFinal":{"name":"isFinal","qualifiedName":"dart-mirrors.ParameterMirror.isFinal","comment":"<p>Returns <code>true</code> if the reflectee is a final variable.\nOtherwise returns <code>false</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.VariableMirror.isFinal","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isPrivate":{"name":"isPrivate","qualifiedName":"dart-mirrors.ParameterMirror.isPrivate","comment":"<p>Returns <code>true</code> if this declaration is considered private\naccording to the Dart language specification.\nAlways returns <code>false</code> if this declaration\nis a library.\nOtherwise return <code>false</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.isPrivate","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isStatic":{"name":"isStatic","qualifiedName":"dart-mirrors.ParameterMirror.isStatic","comment":"<p>Returns <code>true</code> if the reflectee is a static variable.\nOtherwise returns <code>false</code>.</p>\n<p>For the purposes of the mirror library, top-level variables are\nimplicitly declared static.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.VariableMirror.isStatic","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isTopLevel":{"name":"isTopLevel","qualifiedName":"dart-mirrors.ParameterMirror.isTopLevel","comment":"<p>Is this declaration top-level?</p>\n<p>This is defined to be equivalent to:\n   <code>mirror.owner != null &amp;&amp; mirror.owner is LibraryMirror</code></p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.isTopLevel","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"location":{"name":"location","qualifiedName":"dart-mirrors.ParameterMirror.location","comment":"<p>The source location of this Dart language entity.</p>\n<p>This operation is optional and may return <code>null</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.location","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.SourceLocation","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"dart-mirrors.ParameterMirror.metadata","comment":"<p>A list of the metadata associated with this declaration.</p>\n<p>Let <em>D</em> be the declaration this mirror reflects.\nIf <em>D</em> is decorated with annotations <em>A1, ..., An</em>\nwhere <em>n > 0</em>, then for each annotation <em>Ai</em> associated\nwith <em>D, 1 &lt;= i &lt;= n</em>, let <em>ci</em> be the constant object\nspecified by <em>Ai</em>. Then this method returns a list whose\nmembers are instance mirrors on <em>c1, ..., cn</em>.\nIf no annotations are associated with <em>D</em>, then\nan empty list is returned.</p>\n<p>If evaluating any of <em>c1, ..., cn</em> would cause a\ncompilation error\nthe effect is the same as if a non-reflective compilation error\nhad been encountered.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.metadata","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-mirrors.InstanceMirror","inner":[]}]}],"parameters":{},"annotations":[]},"owner":{"name":"owner","qualifiedName":"dart-mirrors.ParameterMirror.owner","comment":"<p>A mirror on the owner of this Dart language entity. This is the declaration\nimmediately surrounding the reflectee.</p>\n<p>For a library, the owner is <code>null</code>.\nFor a class declaration, typedef or top level function\nor variable, the owner is the enclosing library.\nFor a mixin application <em>S with M</em>, the owner is the owner\nof <em>M</em>.\nFor a constructor, the owner is the immediately enclosing class.\nFor a method, instance variable or\na static variable, the owner is the immediately enclosing class,\nunless the class is a mixin application <em>S with M</em>, in which case\nthe owner is <em>M</em>. Note that <em>M</em> may be an invocation of a generic.\nFor a parameter, local variable or local function the owner is the\nimmediately enclosing function.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.owner","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.DeclarationMirror","inner":[]}],"parameters":{},"annotations":[]},"qualifiedName":{"name":"qualifiedName","qualifiedName":"dart-mirrors.ParameterMirror.qualifiedName","comment":"<p>The fully-qualified name for this Dart language entity.</p>\n<p>This name is qualified by the name of the owner. For instance,\nthe qualified name of a method 'method' in class 'Class' in\nlibrary 'library' is 'library.Class.method'.</p>\n<p>Returns a <a>dart-core.Symbol</a> constructed from a string representing the\nfully qualified name of the reflectee.\nLet <em>o</em> be the <a>dart-mirrors.ParameterMirror.owner</a> of this mirror, let <em>r</em> be the reflectee of\nthis mirror, let <em>p</em> be the fully qualified\nname of the reflectee of <em>o</em>, and let <em>s</em> be the simple name of <em>r</em>\ncomputed by <a>dart-mirrors.ParameterMirror.simpleName</a>.\nThe fully qualified name of <em>r</em> is the\nconcatenation of <em>p</em>, '.', and <em>s</em>.</p>\n<p>Because an isolate can contain more than one library with the same name (at\ndifferent URIs), a fully-qualified name does not uniquely identify any\nlanguage entity.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.qualifiedName","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-mirrors.ParameterMirror.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"simpleName":{"name":"simpleName","qualifiedName":"dart-mirrors.ParameterMirror.simpleName","comment":"<p>The simple name for this Dart language entity.</p>\n<p>The simple name is in most cases the the identifier name of the\nentity, such as 'method' for a method <code>void method() {...}</code> or\n'mylibrary' for a <code>library 'mylibrary';</code> declaration.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.DeclarationMirror.simpleName","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{},"annotations":[]},"type":{"name":"type","qualifiedName":"dart-mirrors.ParameterMirror.type","comment":"<p>Returns a mirror on the type of the reflectee.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.VariableMirror.type","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.TypeMirror","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-mirrors.ParameterMirror.==","comment":"<p>Returns true if this mirror is equal to <a>dart-mirrors.ParameterMirror.==.other</a>.</p>\n<p>The equality holds if and only if\n(1) <a>dart-mirrors.ParameterMirror.==.other</a> is a mirror of the same kind\nand\n(2)  <code>simpleName == other.simpleName</code> and\n<code>owner == other.owner</code>.</p>","commentFrom":"","inheritedFrom":"dart-mirrors.VariableMirror.==","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-mirrors.ParameterMirror.noSuchMethod","comment":"<p><a>dart-mirrors.ParameterMirror.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-mirrors.ParameterMirror.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-mirrors.ParameterMirror.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-mirrors.ParameterMirror.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-mirrors.ParameterMirror.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}