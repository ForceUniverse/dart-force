{"name":"ContentType","qualifiedName":"dart-io.ContentType","comment":"<p>Representation of a content type. An instance of <a>dart-io.ContentType</a> is\nimmutable.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-io.HeaderValue"],"subclass":[],"variables":{"BINARY":{"name":"BINARY","qualifiedName":"dart-io.ContentType.BINARY","comment":"<p>Content type for binary data.</p>\n<pre><code>application/octet-stream\n</code></pre>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"HTML":{"name":"HTML","qualifiedName":"dart-io.ContentType.HTML","comment":"<p>Content type for HTML using UTF-8 encoding.</p>\n<pre><code>text/html; charset=utf-8\n</code></pre>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"JSON":{"name":"JSON","qualifiedName":"dart-io.ContentType.JSON","comment":"<p>Content type for JSON using UTF-8 encoding.</p>\n<pre><code>application/json; charset=utf-8\n</code></pre>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"TEXT":{"name":"TEXT","qualifiedName":"dart-io.ContentType.TEXT","comment":"<p>Content type for plain text using UTF-8 encoding.</p>\n<pre><code>text/plain; charset=utf-8\n</code></pre>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"charset":{"name":"charset","qualifiedName":"dart-io.ContentType.charset","comment":"<p>Gets the character set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"mimeType":{"name":"mimeType","qualifiedName":"dart-io.ContentType.mimeType","comment":"<p>Gets the mime-type, without any parameters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"primaryType":{"name":"primaryType","qualifiedName":"dart-io.ContentType.primaryType","comment":"<p>Gets the primary type.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"subType":{"name":"subType","qualifiedName":"dart-io.ContentType.subType","comment":"<p>Gets the sub type.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-io.ContentType.ContentType-","comment":"<p>Creates a new content type object setting the primary type and\nsub type. The charset and additional parameters can also be set\nusing <a>dart-io.ContentType.ContentType-.charset</a> and <a>dart-io.ContentType.ContentType-.parameters</a>. If charset is passed and\n<a>dart-io.ContentType.ContentType-.parameters</a> contains charset as well the passed <a>dart-io.ContentType.ContentType-.charset</a> will\noverride the value in parameters. Keys and values passed in\nparameters will be converted to lower case.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.ContentType","inner":[]}],"parameters":{"primaryType":{"name":"primaryType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"subType":{"name":"subType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"charset":{"name":"charset","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"parameters":{"name":"parameters","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"parse":{"name":"parse","qualifiedName":"dart-io.ContentType.parse","comment":"<p>Creates a new content type object from parsing a Content-Type\nheader value. As primary type, sub type and parameter names and\nvalues are not case sensitive all these values will be converted\nto lower case. Parsing this string</p>\n<pre><code>text/html; charset=utf-8\n</code></pre>\n<p>will create a content type object with primary type <code>text</code>, sub\ntype <code>html</code> and parameter <code>charset</code> with value <code>utf-8</code>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-io.ContentType","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.ContentType.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.ContentType.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parameters":{"name":"parameters","qualifiedName":"dart-io.ContentType.parameters","comment":"<p>Gets the map of parameters.</p>\n<p>This map cannot be modified. invoking any operation which would\nmodify the map will throw <a>dart-core.UnsupportedError</a>.</p>","commentFrom":"","inheritedFrom":"dart-io.HeaderValue.parameters","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.ContentType.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"dart-io.ContentType.value","comment":"<p>Gets the header value.</p>","commentFrom":"","inheritedFrom":"dart-io.HeaderValue.value","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.ContentType.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.ContentType.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.ContentType.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.ContentType.noSuchMethod","comment":"<p><a>dart-io.ContentType.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.ContentType.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.ContentType.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.ContentType.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.ContentType.toString","comment":"<p>Returns the formatted string representation in the form:</p>\n<pre><code>value; parameter1=value1; parameter2=value2\n</code></pre>","commentFrom":"","inheritedFrom":"dart-io.HeaderValue.toString","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}