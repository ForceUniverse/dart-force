{"name":"RawSecureServerSocket","qualifiedName":"dart-io.RawSecureServerSocket","comment":"<p>The RawSecureServerSocket is a server socket, providing a stream of low-level\n<a>dart-io.RawSecureSocket</a>s.</p>\n<p>See <a>dart-io.RawSecureSocket</a> for more info.</p>","isAbstract":false,"superclass":"dart-async.Stream","implements":[],"subclass":[],"variables":{"certificateName":{"name":"certificateName","qualifiedName":"dart-io.RawSecureServerSocket.certificateName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"requestClientCertificate":{"name":"requestClientCertificate","qualifiedName":"dart-io.RawSecureServerSocket.requestClientCertificate","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"requireClientCertificate":{"name":"requireClientCertificate","qualifiedName":"dart-io.RawSecureServerSocket.requireClientCertificate","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"address":{"name":"address","qualifiedName":"dart-io.RawSecureServerSocket.address","comment":"<p>Returns the address used by this socket.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"port":{"name":"port","qualifiedName":"dart-io.RawSecureServerSocket.port","comment":"<p>Returns the port used by this socket.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"bind":{"name":"bind","qualifiedName":"dart-io.RawSecureServerSocket.bind","comment":"<p>Returns a future for a <a>dart-io.RawSecureServerSocket</a>. When the future\ncompletes the server socket is bound to the given <a>dart-io.RawSecureServerSocket.bind.address</a> and\n<a>dart-io.RawSecureServerSocket.bind.port</a> and has started listening on it.</p>\n<p>The <a>dart-io.RawSecureServerSocket.bind.address</a> can either be a <a>dart-core.String</a> or an\n<a>dart-io.InternetAddress</a>. If <a>dart-io.RawSecureServerSocket.bind.address</a> is a <a>dart-core.String</a>, <a>dart-io.RawSecureServerSocket.bind</a> will\nperform a <a>dart-io.InternetAddress.lookup</a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n[InternetAddress.LOOPBACK_IP_V4] or\n[InternetAddress.LOOPBACK_IP_V6]. To allow for incoming\nconnection from the network use either one of the values\n[InternetAddress.ANY_IP_V4] or [InternetAddress.ANY_IP_V6] to\nbind to all interfaces or the IP address of a specific interface.</p>\n<p>If <a>dart-io.RawSecureServerSocket.bind.port</a> has the value <code>0</code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<a>dart-io.RawSecureServerSocket.bind.port</a> getter.</p>\n<p>The optional argument <a>dart-io.RawSecureServerSocket.bind.backlog</a> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <a>dart-io.RawSecureServerSocket.bind.backlog</a> has the\nvalue of <code>0</code> (the default) a reasonable value will be chosen by\nthe system.</p>\n<p>Incoming client connections are promoted to secure connections,\nusing the server certificate given by <a>dart-io.RawSecureServerSocket.bind.certificateName</a>.</p>\n<p><a>dart-io.RawSecureServerSocket.bind.address</a> must be given as a numeric address, not a host name.</p>\n<p><a>dart-io.RawSecureServerSocket.bind.certificateName</a> is the nickname or the distinguished name (DN) of\nthe certificate in the certificate database. It is looked up in the\nNSS certificate database set by SecureSocket.setCertificateDatabase.\nIf <a>dart-io.RawSecureServerSocket.bind.certificateName</a> contains \"CN=\", it is assumed to be a distinguished\nname.  Otherwise, it is looked up as a nickname.</p>\n<p>To request or require that clients authenticate by providing an SSL (TLS)\nclient certificate, set the optional parameters requestClientCertificate or\nrequireClientCertificate to true.  Require implies request, so one doesn't\nneed to specify both.  To check whether a client certificate was received,\ncheck SecureSocket.peerCertificate after connecting.  If no certificate\nwas received, the result will be null.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RawSecureServerSocket","inner":[]}]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"certificateName":{"name":"certificateName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"backlog":{"name":"backlog","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"v6Only":{"name":"v6Only","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"requestClientCertificate":{"name":"requestClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"requireClientCertificate":{"name":"requireClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"dart-io.RawSecureServerSocket.close","comment":"<p>Closes the socket. The returned future completes when the socket\nis fully closed and is no longer bound.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RawSecureServerSocket","inner":[]}]}],"parameters":{},"annotations":[]},"listen":{"name":"listen","qualifiedName":"dart-io.RawSecureServerSocket.listen","comment":"<p>Adds a subscription to this stream.</p>\n<p>On each data event from this stream, the subscriber's <a>dart-io.RawSecureServerSocket.listen.onData</a> handler\nis called. If <a>dart-io.RawSecureServerSocket.listen.onData</a> is null, nothing happens.</p>\n<p>On errors from this stream, the <a>dart-io.RawSecureServerSocket.listen.onError</a> handler is given a\nobject describing the error.</p>\n<p>The <a>dart-io.RawSecureServerSocket.listen.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. If <a>dart-io.RawSecureServerSocket.listen.onError</a> accepts\ntwo arguments it is called with the stack trace (which could be <code>null</code> if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.</p>\n<p>If this stream closes, the <a>dart-io.RawSecureServerSocket.listen.onDone</a> handler is called.</p>\n<p>If <a>dart-io.RawSecureServerSocket.listen.cancelOnError</a> is true, the subscription is ended when\nthe first error is reported. The default is false.</p>","commentFrom":"http.Stream.listen","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-io.RawSecureSocket","inner":[]}]}],"parameters":{"onData":{"name":"onData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"s":{"name":"s","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.RawSecureSocket","inner":[]}],"value":null,"annotations":[]}}}},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"onDone":{"name":"onDone","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"cancelOnError":{"name":"cancelOnError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"dart-io.RawSecureServerSocket.first","comment":"<p>Returns the first element of the stream.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed\nand cannot be reused after a call to this getter.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>\n<p>Except for the type of the error, this method is equivalent to\n<code>this.elementAt(0)</code>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-io.RawSecureServerSocket.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.RawSecureServerSocket.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isBroadcast":{"name":"isBroadcast","qualifiedName":"dart-io.RawSecureServerSocket.isBroadcast","comment":"<p>Reports whether this stream is a broadcast stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.isBroadcast","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-io.RawSecureServerSocket.isEmpty","comment":"<p>Reports whether this stream contains any elements.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this getter.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-io.RawSecureServerSocket.last","comment":"<p>Returns the last element of the stream.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-io.RawSecureServerSocket.length","comment":"<p>Counts the elements in the stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.RawSecureServerSocket.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-io.RawSecureServerSocket.single","comment":"<p>Returns the single element.</p>\n<p>If an error event occurs before or after the first data event, the\nresulting future is completed with that error.</p>\n<p>If this is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.RawSecureServerSocket.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.RawSecureServerSocket.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.RawSecureServerSocket.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"any":{"name":"any","qualifiedName":"dart-io.RawSecureServerSocket.any","comment":"<p>Checks whether <a>dart-io.RawSecureServerSocket.any.test</a> accepts any element provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.</p>\n<p>If this stream reports an error, the <a>dart-async.Future</a> reports that error.</p>\n<p>Stops listening to the stream after the first matching element has been\nfound.</p>\n<p>Internally the method cancels its subscription after this element. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asBroadcastStream":{"name":"asBroadcastStream","qualifiedName":"dart-io.RawSecureServerSocket.asBroadcastStream","comment":"<p>Returns a multi-subscription stream that produces the same events as this.</p>\n<p>If this stream is already a broadcast stream, it is returned unmodified.</p>\n<p>If this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.</p>\n<p>If <a>dart-io.RawSecureServerSocket.asBroadcastStream.onListen</a> is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto <a>dart-io.RawSecureServerSocket.asBroadcastStream.onListen</a>. It is not possible to change the event handlers, including\nusing <a>dart-async.StreamSubscription.asFuture</a>.</p>\n<p>If <a>dart-io.RawSecureServerSocket.asBroadcastStream.onCancel</a> is provided, it is called in a similar way to <a>dart-io.RawSecureServerSocket.asBroadcastStream.onListen</a>\nwhen the returned stream stops having listener. If it later gets\na new listener, the <a>dart-io.RawSecureServerSocket.asBroadcastStream.onListen</a> function is called again.</p>\n<p>Use the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asBroadcastStream","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onListen":{"name":"onListen","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}},"onCancel":{"name":"onCancel","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncExpand":{"name":"asyncExpand","qualifiedName":"dart-io.RawSecureServerSocket.asyncExpand","comment":"<p>Creates a new stream with the events of a stream per original event.</p>\n<p>This acts like <a>dart-io.RawSecureServerSocket.expand</a>, except that <a>dart-io.RawSecureServerSocket.asyncExpand.convert</a> returns a <a>dart-async.Stream</a>\ninstead of an <a>dart-core.Iterable</a>.\nThe events of the returned stream becomes the events of the returned\nstream, in the order they are produced.</p>\n<p>If <a>dart-io.RawSecureServerSocket.asyncExpand.convert</a> returns <code>null</code>, no value is put on the output stream,\njust as if it returned an empty stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asyncExpand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncMap":{"name":"asyncMap","qualifiedName":"dart-io.RawSecureServerSocket.asyncMap","comment":"<p>Creates a new stream with each data event of this stream asynchronously\nmapped to a new event.</p>\n<p>This acts like <a>dart-io.RawSecureServerSocket.map</a>, except that <a>dart-io.RawSecureServerSocket.asyncMap.convert</a> may return a <a>dart-async.Future</a>,\nand in that case, the stream waits for that future to complete before\ncontinuing with its result.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asyncMap","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-io.RawSecureServerSocket.contains","comment":"<p>Checks whether <a>dart-io.RawSecureServerSocket.contains.needle</a> occurs in the elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"needle":{"name":"needle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"distinct":{"name":"distinct","qualifiedName":"dart-io.RawSecureServerSocket.distinct","comment":"<p>Skips data events if they are equal to the previous data event.</p>\n<p>The returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.</p>\n<p>Equality is determined by the provided <a>dart-io.RawSecureServerSocket.distinct.equals</a> method. If that is\nomitted, the '==' operator on the last provided data element is used.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.distinct","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"equals":{"name":"equals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"next":{"name":"next","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"drain":{"name":"drain","qualifiedName":"dart-io.RawSecureServerSocket.drain","comment":"<p>Discards all data on the stream, but signals when it's done or an error\noccured.</p>\n<p>When subscribing using <a>dart-io.RawSecureServerSocket.drain</a>, cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>dart-io.RawSecureServerSocket.drain.futureValue</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.drain","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"dart-io.RawSecureServerSocket.elementAt","comment":"<p>Returns the value of the <a>dart-io.RawSecureServerSocket.elementAt.index</a>th data event of this stream.</p>\n<p>Stops listening to the stream after the <a>dart-io.RawSecureServerSocket.elementAt.index</a>th data event has been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>If an error event occurs before the value is found, the future completes\nwith this error.</p>\n<p>If a done event occurs before the value is found, the future completes\nwith a <a>dart-core.RangeError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"dart-io.RawSecureServerSocket.every","comment":"<p>Checks whether <a>dart-io.RawSecureServerSocket.every.test</a> accepts all elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"dart-io.RawSecureServerSocket.expand","comment":"<p>Creates a new stream from this stream that converts each element\ninto zero or more events.</p>\n<p>Each incoming event is converted to an <a>dart-core.Iterable</a> of new events,\nand each of these new events are then sent by the returned stream\nin order.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"dart-io.RawSecureServerSocket.firstWhere","comment":"<p>Finds the first element of this stream matching <a>dart-io.RawSecureServerSocket.firstWhere.test</a>.</p>\n<p>Returns a future that is filled with the first element of this stream\nthat <a>dart-io.RawSecureServerSocket.firstWhere.test</a> returns true for.</p>\n<p>If no such element is found before this stream is done, and a\n<a>dart-io.RawSecureServerSocket.firstWhere.defaultValue</a> function is provided, the result of calling <a>dart-io.RawSecureServerSocket.firstWhere.defaultValue</a>\nbecomes the value of the future.</p>\n<p>Stops listening to the stream after the first matching element has been\nreceived.</p>\n<p>Internally the method cancels its subscription after the first element that\nmatches the predicate. This means that single-subscription (non-broadcast)\nstreams are closed and cannot be reused after a call to this method.</p>\n<p>If an error occurs, or if this stream ends without finding a match and\nwith no <a>dart-io.RawSecureServerSocket.firstWhere.defaultValue</a> function provided, the future will receive an\nerror.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"dart-io.RawSecureServerSocket.fold","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-io.RawSecureServerSocket.fold.combine</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-io.RawSecureServerSocket.forEach","comment":"<p>Executes <a>dart-io.RawSecureServerSocket.forEach.action</a> on each data event of the stream.</p>\n<p>Completes the returned <a>dart-async.Future</a> when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if <a>dart-io.RawSecureServerSocket.forEach.action</a> throws.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"handleError":{"name":"handleError","qualifiedName":"dart-io.RawSecureServerSocket.handleError","comment":"<p>Creates a wrapper Stream that intercepts some errors from this stream.</p>\n<p>If this stream sends an error that matches <a>dart-io.RawSecureServerSocket.handleError.test</a>, then it is intercepted\nby the handle function.</p>\n<p>The <a>dart-io.RawSecureServerSocket.handleError.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. Depending on the function\ntype the the stream either invokes <a>dart-io.RawSecureServerSocket.handleError.onError</a> with or without a stack\ntrace. The stack trace argument might be <code>null</code> if the stream itself\nreceived an error without stack trace.</p>\n<p>An asynchronous error <code>e</code> is matched by a test function if <code>test(e)</code>\nreturns true. If <a>dart-io.RawSecureServerSocket.handleError.test</a> is omitted, every error is considered matching.</p>\n<p>If the error is intercepted, the handle function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.</p>\n<p>If you need to transform an error into a data event, use the more generic\n<a>dart-io.RawSecureServerSocket.transform</a> to handle the event by writing a data event to\nthe output sink</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.handleError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onError":{"name":"onError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"test":{"name":"test","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"join":{"name":"join","qualifiedName":"dart-io.RawSecureServerSocket.join","comment":"<p>Collects string of data events' string representations.</p>\n<p>If <a>dart-io.RawSecureServerSocket.join.separator</a> is provided, it is inserted between any two\nelements.</p>\n<p>Any error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"dart-io.RawSecureServerSocket.lastWhere","comment":"<p>Finds the last element in this stream matching <a>dart-io.RawSecureServerSocket.lastWhere.test</a>.</p>\n<p>As <a>dart-io.RawSecureServerSocket.firstWhere</a>, except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"listen":{"name":"listen","qualifiedName":"dart-io.RawSecureServerSocket.listen","comment":"<p>Adds a subscription to this stream.</p>\n<p>On each data event from this stream, the subscriber's <a>dart-io.RawSecureServerSocket.listen.onData</a> handler\nis called. If <a>dart-io.RawSecureServerSocket.listen.onData</a> is null, nothing happens.</p>\n<p>On errors from this stream, the <a>dart-io.RawSecureServerSocket.listen.onError</a> handler is given a\nobject describing the error.</p>\n<p>The <a>dart-io.RawSecureServerSocket.listen.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. If <a>dart-io.RawSecureServerSocket.listen.onError</a> accepts\ntwo arguments it is called with the stack trace (which could be <code>null</code> if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.</p>\n<p>If this stream closes, the <a>dart-io.RawSecureServerSocket.listen.onDone</a> handler is called.</p>\n<p>If <a>dart-io.RawSecureServerSocket.listen.cancelOnError</a> is true, the subscription is ended when\nthe first error is reported. The default is false.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.listen","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onData":{"name":"onData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"onDone":{"name":"onDone","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"cancelOnError":{"name":"cancelOnError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"dart-io.RawSecureServerSocket.map","comment":"<p>Creates a new stream that converts each element of this stream\nto a new value using the <a>dart-io.RawSecureServerSocket.map.convert</a> function.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.RawSecureServerSocket.noSuchMethod","comment":"<p><a>dart-io.RawSecureServerSocket.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.RawSecureServerSocket.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.RawSecureServerSocket.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.RawSecureServerSocket.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pipe":{"name":"pipe","qualifiedName":"dart-io.RawSecureServerSocket.pipe","comment":"<p>Binds this stream as the input of the provided <a>dart-async.StreamConsumer</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.pipe","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"streamConsumer":{"name":"streamConsumer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamConsumer","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"dart-io.RawSecureServerSocket.reduce","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-io.RawSecureServerSocket.reduce.combine</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream.T","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"dart-io.RawSecureServerSocket.singleWhere","comment":"<p>Finds the single element in this stream matching <a>dart-io.RawSecureServerSocket.singleWhere.test</a>.</p>\n<p>Like lastMatch, except that it is an error if more than one\nmatching element occurs in the stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"dart-io.RawSecureServerSocket.skip","comment":"<p>Skips the first <a>dart-io.RawSecureServerSocket.skip.count</a> data events from this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"dart-io.RawSecureServerSocket.skipWhile","comment":"<p>Skip data events from this stream while they are matched by <a>dart-io.RawSecureServerSocket.skipWhile.test</a>.</p>\n<p>Error and done events are provided by the returned stream unmodified.</p>\n<p>Starting with the first data event where <a>dart-io.RawSecureServerSocket.skipWhile.test</a> returns false for the\nevent data, the returned stream will have the same events as this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"dart-io.RawSecureServerSocket.take","comment":"<p>Provides at most the first n values of this stream.</p>\n<p>Forwards the first n data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.</p>\n<p>If this stream produces fewer than <a>dart-io.RawSecureServerSocket.take.count</a> values before it's done,\nso will the returned stream.</p>\n<p>Stops listening to the stream after the first n elements have been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"dart-io.RawSecureServerSocket.takeWhile","comment":"<p>Forwards data events while <a>dart-io.RawSecureServerSocket.takeWhile.test</a> is successful.</p>\n<p>The returned stream provides the same events as this stream as long\nas <a>dart-io.RawSecureServerSocket.takeWhile.test</a> returns <code>true</code> for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that <a>dart-io.RawSecureServerSocket.takeWhile.test</a> doesn't accept.</p>\n<p>Stops listening to the stream after the accepted elements.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"dart-io.RawSecureServerSocket.timeout","comment":"<p>Creates a new stream with the same events as this stream.</p>\n<p>Whenever more than <a>dart-io.RawSecureServerSocket.timeout.timeLimit</a> passes between two events from this stream,\nthe <a>dart-io.RawSecureServerSocket.timeout.onTimeout</a> function is called.</p>\n<p>The countdown doesn't start until the returned stream is listened to.\nThe countdown is reset every time an event is forwarded from this stream,\nor when the stream is paused and resumed.</p>\n<p>The <a>dart-io.RawSecureServerSocket.timeout.onTimeout</a> function is called with one argument: an\n<a>dart-async.EventSink</a> that allows putting events into the returned stream.\nThis <code>EventSink</code> is only valid during the call to <code>onTimeout</code>.</p>\n<p>If <code>onTimeout</code> is omitted, a timeout will just put a <a>dart-async.TimeoutException</a>\ninto the error channel of the returned stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.timeout","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"timeLimit":{"name":"timeLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"onTimeout":{"name":"onTimeout","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"dart-io.RawSecureServerSocket.toList","comment":"<p>Collects the data of this stream in a <a>dart-core.List</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-io.RawSecureServerSocket.toSet","comment":"<p>Collects the data of this stream in a <a>dart-core.Set</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.toSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Set","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.RawSecureServerSocket.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"transform":{"name":"transform","qualifiedName":"dart-io.RawSecureServerSocket.transform","comment":"<p>Chains this stream as the input of the provided <a>dart-async.StreamTransformer</a>.</p>\n<p>Returns the result of <code>streamTransformer.bind</code> itself.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.transform","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"streamTransformer":{"name":"streamTransformer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamTransformer","inner":[{"outer":"dart-async.Stream.T","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"dart-io.RawSecureServerSocket.where","comment":"<p>Creates a new stream from this stream that discards some data events.</p>\n<p>The new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the <a>dart-io.RawSecureServerSocket.where.test</a>.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{}}