{"name":"Frame","qualifiedName":"stack_trace/stack_trace.Frame","comment":"<p>A single stack frame. Each frame points to a precise location in Dart code.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"column":{"name":"column","qualifiedName":"stack_trace/stack_trace.Frame.column","comment":"<p>The column number of the code location.</p>\n<p>This can be null, indicating that the column number is unknown or\nunimportant.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"line":{"name":"line","qualifiedName":"stack_trace/stack_trace.Frame.line","comment":"<p>The line number on which the code location is located.</p>\n<p>This can be null, indicating that the line number is unknown or\nunimportant.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"member":{"name":"member","qualifiedName":"stack_trace/stack_trace.Frame.member","comment":"<p>The name of the member in which the code location occurs.</p>\n<p>Anonymous closures are represented as <code>&lt;fn&gt;</code> in this member string.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"uri":{"name":"uri","qualifiedName":"stack_trace/stack_trace.Frame.uri","comment":"<p>The URI of the file in which the code is located.</p>\n<p>This URI will usually have the scheme <code>dart</code>, <code>file</code>, <code>http</code>, or <code>https</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isCore":{"name":"isCore","qualifiedName":"stack_trace/stack_trace.Frame.isCore","comment":"<p>Whether this stack frame comes from the Dart core libraries.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"library":{"name":"library","qualifiedName":"stack_trace/stack_trace.Frame.library","comment":"<p>Returns a human-friendly description of the library that this stack frame\ncomes from.</p>\n<p>This will usually be the string form of <a>stack_trace/stack_trace.Frame.uri</a>, but a relative URI will be\nused if possible.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"location":{"name":"location","qualifiedName":"stack_trace/stack_trace.Frame.location","comment":"<p>A human-friendly description of the code location.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"package":{"name":"package","qualifiedName":"stack_trace/stack_trace.Frame.package","comment":"<p>Returns the name of the package this stack frame comes from, or <code>null</code> if\nthis stack frame doesn't come from a <code>package:</code> URL.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"stack_trace/stack_trace.Frame.Frame-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":null,"annotations":[]},"line":{"name":"line","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"column":{"name":"column","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"member":{"name":"member","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"caller":{"name":"caller","qualifiedName":"stack_trace/stack_trace.Frame.Frame-caller","comment":"<p>Returns a single frame of the current stack.</p>\n<p>By default, this will return the frame above the current method. If\n<a>stack_trace/stack_trace.Frame.Frame-caller.level</a> is <code>0</code>, it will return the current method's frame; if <a>stack_trace/stack_trace.Frame.Frame-caller.level</a> is\nhigher than <code>1</code>, it will return higher frames.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"level":{"name":"level","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"parseFirefox":{"name":"parseFirefox","qualifiedName":"stack_trace/stack_trace.Frame.Frame-parseFirefox","comment":"<p>Parses a string representation of a Firefox stack frame.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseFriendly":{"name":"parseFriendly","qualifiedName":"stack_trace/stack_trace.Frame.Frame-parseFriendly","comment":"<p>Parses this package's string representation of a stack frame.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseIE":{"name":"parseIE","qualifiedName":"stack_trace/stack_trace.Frame.Frame-parseIE","comment":"<p>Parses a string representation of an IE stack frame.</p>\n<p>IE10+ frames look just like V8 frames. Prior to IE10, stack traces can't\nbe retrieved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseSafari6_0":{"name":"parseSafari6_0","qualifiedName":"stack_trace/stack_trace.Frame.Frame-parseSafari6_0","comment":"<p>Parses a string representation of a Safari 6.0 stack frame.</p>\n<p>Safari 6.0 frames look just like Firefox frames. Prior to Safari 6.0,\nstack traces can't be retrieved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseSafari6_1":{"name":"parseSafari6_1","qualifiedName":"stack_trace/stack_trace.Frame.Frame-parseSafari6_1","comment":"<p>Parses a string representation of a Safari 6.1+ stack frame.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseV8":{"name":"parseV8","qualifiedName":"stack_trace/stack_trace.Frame.Frame-parseV8","comment":"<p>Parses a string representation of a Chrome/V8 stack frame.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseVM":{"name":"parseVM","qualifiedName":"stack_trace/stack_trace.Frame.Frame-parseVM","comment":"<p>Parses a string representation of a Dart VM stack frame.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"stack_trace/stack_trace.Frame.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stack_trace/stack_trace.Frame.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stack_trace/stack_trace.Frame.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stack_trace/stack_trace.Frame.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stack_trace/stack_trace.Frame.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stack_trace/stack_trace.Frame.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stack_trace/stack_trace.Frame.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stack_trace/stack_trace.Frame.noSuchMethod","comment":"<p><a>stack_trace/stack_trace.Frame.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stack_trace/stack_trace.Frame.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stack_trace/stack_trace.Frame.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stack_trace/stack_trace.Frame.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"stack_trace/stack_trace.Frame.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}