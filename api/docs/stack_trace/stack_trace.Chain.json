{"name":"Chain","qualifiedName":"stack_trace/stack_trace.Chain","comment":"<p>A chain of stack traces.</p>\n<p>A stack chain is a collection of one or more stack traces that collectively\nrepresent the path from main through nested function calls to a particular\ncode location, usually where an error was thrown. Multiple stack traces are\nnecessary when using asynchronous functions, since the program's stack is\nreset before each asynchronous callback is run.</p>\n<p>Stack chains can be automatically tracked using <a>stack_trace/stack_trace.Chain.capture</a>. This sets\nup a new <a>stack_trace/dart-async.Zone</a> in which the current stack chain is tracked and can be\naccessed using new Chain.current. Any errors that would be top-leveled in\nthe zone can be handled, along with their associated chains, with the\n<code>onError</code> callback. For example:</p>\n<pre><code>Chain.capture(() {\n  // ...\n}, onError: (error, stackChain) {\n  print(\"Caught error $error\\n\"\n        \"$stackChain\");\n});\n</code></pre>\n<p>For the most part <a>stack_trace/stack_trace.Chain.capture</a> will notice when an error is thrown and\nassociate the correct stack chain with it; the chain can be accessed using\nnew Chain.forTrace. However, there are some cases where exceptions won't\nbe automatically detected: any <a>stack_trace/dart-async.Future</a> constructor,\n<a>stack_trace/dart-async.Completer.completeError</a>, Stream.addError, and libraries that use these.\nFor these, all you need to do is wrap the Future or Stream in a call to\n<a>stack_trace/stack_trace.Chain.track</a> and the errors will be tracked correctly.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.StackTrace"],"subclass":[],"variables":{"traces":{"name":"traces","qualifiedName":"stack_trace/stack_trace.Chain.traces","comment":"<p>The stack traces that make up this chain.</p>\n<p>Like the frames in a stack trace, the traces are ordered from most local\nto least local. The first one is the trace where the actual exception was\nraised, the second one is where that callback was scheduled, and so on.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"terse":{"name":"terse","qualifiedName":"stack_trace/stack_trace.Chain.terse","comment":"<p>Returns a terser version of this.</p>\n<p>This calls <a>stack_trace/trace.Trace.terse</a> on every trace in <a>stack_trace/stack_trace.Chain.traces</a>, and discards any\ntrace that contain only internal frames.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Chain","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"stack_trace/stack_trace.Chain.Chain-","comment":"<p>Returns a new <a>stack_trace/stack_trace.Chain</a> comprised of <a>stack_trace/stack_trace.Chain.Chain-.traces</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"traces":{"name":"traces","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"current":{"name":"current","qualifiedName":"stack_trace/stack_trace.Chain.Chain-current","comment":"<p>Returns the current stack chain.</p>\n<p>By default, the first frame of the first trace will be the line where\n<a>stack_trace/stack_trace.Chain.Chain-current</a> is called. If <a>stack_trace/stack_trace.Chain.Chain-current.level</a> is passed, the first trace will\nstart that many frames up instead.</p>\n<p>If this is called outside of a <a>stack_trace/stack_trace.Chain.capture</a> zone, it just returns a\nsingle-trace chain.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Chain","inner":[]}],"parameters":{"level":{"name":"level","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"forTrace":{"name":"forTrace","qualifiedName":"stack_trace/stack_trace.Chain.Chain-forTrace","comment":"<p>Returns the stack chain associated with <a>stack_trace/stack_trace.Chain.Chain-forTrace.trace</a>.</p>\n<p>The first stack trace in the returned chain will always be <a>stack_trace/stack_trace.Chain.Chain-forTrace.trace</a>\n(converted to a <a>stack_trace/stack_trace.Trace</a> if necessary). If there is no chain associated\nwith <a>stack_trace/stack_trace.Chain.Chain-forTrace.trace</a> or if this is called outside of a <a>stack_trace/stack_trace.Chain.capture</a> zone, this just\nreturns a single-trace chain containing <a>stack_trace/stack_trace.Chain.Chain-forTrace.trace</a>.</p>\n<p>If <a>stack_trace/stack_trace.Chain.Chain-forTrace.trace</a> is already a <a>stack_trace/stack_trace.Chain</a>, it will be returned as-is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Chain","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"stack_trace/stack_trace.Chain.Chain-parse","comment":"<p>Parses a string representation of a stack chain.</p>\n<p>Specifically, this parses the output of <a>stack_trace/stack_trace.Chain.toString</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Chain","inner":[]}],"parameters":{"chain":{"name":"chain","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"capture":{"name":"capture","qualifiedName":"stack_trace/stack_trace.Chain.capture","comment":"<p>Runs <a>stack_trace/stack_trace.Chain.capture.callback</a> in a <a>stack_trace/dart-async.Zone</a> in which the current stack chain is tracked\nand automatically associated with (most) errors.</p>\n<p>If <a>stack_trace/stack_trace.Chain.capture.onError</a> is passed, any error in the zone that would otherwise go\nunhandled is passed to it, along with the <a>stack_trace/stack_trace.Chain</a> associated with that\nerror. Note that if <a>stack_trace/stack_trace.Chain.capture.callback</a> produces multiple unhandled errors,\n<a>stack_trace/stack_trace.Chain.capture.onError</a> may be called more than once. If <a>stack_trace/stack_trace.Chain.capture.onError</a> isn't passed, the\nparent Zone's <code>unhandledErrorHandler</code> will be called with the error and\nits chain.</p>\n<p>For the most part an error thrown in the zone will have the correct stack\nchain associated with it. However, there are some cases where exceptions\nwon't be automatically detected: any <a>stack_trace/dart-async.Future</a> constructor,\n<a>stack_trace/dart-async.Completer.completeError</a>, Stream.addError, and libraries that use\nthese. For these, all you need to do is wrap the Future or Stream in a\ncall to <a>stack_trace/stack_trace.Chain.track</a> and the errors will be tracked correctly.</p>\n<p>Note that even if <a>stack_trace/stack_trace.Chain.capture.onError</a> isn't passed, this zone will still be an error\nzone. This means that any errors that would cross the zone boundary are\nconsidered unhandled.</p>\n<p>If <a>stack_trace/stack_trace.Chain.capture.callback</a> returns a value, it will be returned by <a>stack_trace/stack_trace.Chain.capture</a> as well.</p>\n<p>Currently, capturing stack chains doesn't work when using dart2js due to\nissues 15171 and 15105. Stack chains reported on dart2js will contain\nonly one trace.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"stack_trace/stack_trace.ChainHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"foldFrames":{"name":"foldFrames","qualifiedName":"stack_trace/stack_trace.Chain.foldFrames","comment":"<p>Returns a new <a>stack_trace/stack_trace.Chain</a> based on this where multiple stack frames matching\n<a>stack_trace/stack_trace.Chain.foldFrames.predicate</a> are folded together.</p>\n<p>This means that whenever there are multiple frames in a row that match\n<a>stack_trace/stack_trace.Chain.foldFrames.predicate</a>, only the last one is kept. In addition, traces that are\ncomposed entirely of frames matching <a>stack_trace/stack_trace.Chain.foldFrames.predicate</a> are omitted.</p>\n<p>This is useful for limiting the amount of library code that appears in a\nstack trace by only showing user code and code that's called by user code.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Chain","inner":[]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"stack_trace/stack_trace.Chain.toString","comment":"<p>Returns a <a>dart-core.String</a> representation of the stack trace.</p>\n<p>The string represents the full stack trace starting from\nthe point where a throw ocurred to the top of the current call sequence.</p>\n<p>The exact format of the string representation is not final.</p>","commentFrom":"dart-core.StackTrace.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toTrace":{"name":"toTrace","qualifiedName":"stack_trace/stack_trace.Chain.toTrace","comment":"<p>Converts this to a <a>stack_trace/stack_trace.Trace</a>.</p>\n<p>The trace version of a chain is just the concatenation of all the traces\nin the chain.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}],"parameters":{},"annotations":[]},"track":{"name":"track","qualifiedName":"stack_trace/stack_trace.Chain.track","comment":"<p>Ensures that any errors emitted by <a>stack_trace/stack_trace.Chain.track.futureOrStream</a> have the correct stack\nchain information associated with them.</p>\n<p>For the most part an error thrown within a <a>stack_trace/stack_trace.Chain.capture</a> zone will have the\ncorrect stack chain automatically associated with it. However, there are\nsome cases where exceptions won't be automatically detected: any <a>stack_trace/dart-async.Future</a>\nconstructor, <a>stack_trace/dart-async.Completer.completeError</a>, Stream.addError, and libraries\nthat use these.</p>\n<p>This returns a <a>stack_trace/dart-async.Future</a> or <a>stack_trace/dart-async.Stream</a> that will emit the same values and\nerrors as <a>stack_trace/stack_trace.Chain.track.futureOrStream</a>. The only exception is that if <a>stack_trace/stack_trace.Chain.track.futureOrStream</a>\nemits an error without a stack trace, one will be added in the return\nvalue.</p>\n<p>If this is called outside of a <a>stack_trace/stack_trace.Chain.capture</a> zone, it just returns\n<a>stack_trace/stack_trace.Chain.track.futureOrStream</a> as-is.</p>\n<p>As the name suggests, <a>stack_trace/stack_trace.Chain.track.futureOrStream</a> may be either a <a>stack_trace/dart-async.Future</a> or a\n<a>stack_trace/dart-async.Stream</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"futureOrStream":{"name":"futureOrStream","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stack_trace/stack_trace.Chain.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stack_trace/stack_trace.Chain.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stack_trace/stack_trace.Chain.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stack_trace/stack_trace.Chain.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stack_trace/stack_trace.Chain.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stack_trace/stack_trace.Chain.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stack_trace/stack_trace.Chain.noSuchMethod","comment":"<p><a>stack_trace/stack_trace.Chain.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stack_trace/stack_trace.Chain.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stack_trace/stack_trace.Chain.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stack_trace/stack_trace.Chain.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"stack_trace/stack_trace.Chain.toString","comment":"<p>Returns a <a>dart-core.String</a> representation of the stack trace.</p>\n<p>The string represents the full stack trace starting from\nthe point where a throw ocurred to the top of the current call sequence.</p>\n<p>The exact format of the string representation is not final.</p>","commentFrom":"","inheritedFrom":"dart-core.StackTrace.toString","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}