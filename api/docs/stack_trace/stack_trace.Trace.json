{"name":"Trace","qualifiedName":"stack_trace/stack_trace.Trace","comment":"<p>A stack trace, comprised of a list of stack frames.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.StackTrace"],"subclass":[],"variables":{"frames":{"name":"frames","qualifiedName":"stack_trace/stack_trace.Trace.frames","comment":"<p>The stack frames that comprise this stack trace.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"terse":{"name":"terse","qualifiedName":"stack_trace/stack_trace.Trace.terse","comment":"<p>Returns a terser version of this.</p>\n<p>This is accomplished by folding together multiple stack frames from the\ncore library or from this package, as in <a>stack_trace/stack_trace.Trace.foldFrames</a>. Remaining core\nlibrary frames have their libraries, \"-patch\" suffixes, and line numbers\nremoved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}],"parameters":{},"annotations":[]},"vmTrace":{"name":"vmTrace","qualifiedName":"stack_trace/stack_trace.Trace.vmTrace","comment":"<p>Returns a VM-style <a>dart-core.StackTrace</a> object.</p>\n<p>The return value's <a>stack_trace/stack_trace.Trace.toString</a> method will always return a string\nrepresentation in the Dart VM's stack trace format, regardless of what\nplatform is being used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.StackTrace","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"stack_trace/stack_trace.Trace.Trace-","comment":"<p>Returns a new <a>stack_trace/stack_trace.Trace</a> comprised of <a>stack_trace/stack_trace.Trace.Trace-.frames</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"frames":{"name":"frames","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"current":{"name":"current","qualifiedName":"stack_trace/stack_trace.Trace.Trace-current","comment":"<p>Returns the current stack trace.</p>\n<p>By default, the first frame of this trace will be the line where\n<a>stack_trace/stack_trace.Trace.Trace-current</a> is called. If <a>stack_trace/stack_trace.Trace.Trace-current.level</a> is passed, the trace will start that\nmany frames up instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}],"parameters":{"level":{"name":"level","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"from":{"name":"from","qualifiedName":"stack_trace/stack_trace.Trace.Trace-from","comment":"<p>Returns a new stack trace containing the same data as <a>stack_trace/stack_trace.Trace.Trace-from.trace</a>.</p>\n<p>If <a>stack_trace/stack_trace.Trace.Trace-from.trace</a> is a native <a>dart-core.StackTrace</a>, its data will be parsed out; if it's\na <a>stack_trace/stack_trace.Trace</a>, it will be returned as-is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parse","comment":"<p>Parses a string representation of a stack trace.</p>\n<p><a>stack_trace/stack_trace.Trace.Trace-parse.trace</a> should be formatted in the same way as a Dart VM or browser stack\ntrace.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseFirefox":{"name":"parseFirefox","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseFirefox","comment":"<p>Parses a string representation of a Firefox stack trace.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseFriendly":{"name":"parseFriendly","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseFriendly","comment":"<p>Parses this package's string representation of a stack trace.</p>\n<p>This also parses string representations of <a>stack_trace/stack_trace.Chain</a>s. They parse to the\nsame trace that <a>stack_trace/stack_trace-chain.Chain.toTrace</a> would return.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseIE":{"name":"parseIE","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseIE","comment":"<p>Parses a string representation of an Internet Explorer stack trace.</p>\n<p>IE10+ traces look just like V8 traces. Prior to IE10, stack traces can't\nbe retrieved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseSafari":{"name":"parseSafari","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseSafari","comment":"<p>Parses a string representation of a Safari stack trace.</p>\n<p>This will automatically decide between parseSafari6_0 and\nparseSafari6_1 based on the contents of <a>stack_trace/stack_trace.Trace.Trace-parseSafari.trace</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseSafari6_0":{"name":"parseSafari6_0","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseSafari6_0","comment":"<p>Parses a string representation of a Safari 6.0 stack trace.</p>\n<p>Safari 6.0 stack traces look just like Firefox traces, except that they\nsometimes (e.g. in isolates) have a \"native code\" frame. We just ignore\nthis frame to make the stack format more consistent between browsers.\nPrior to Safari 6.0, stack traces can't be retrieved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseSafari6_1":{"name":"parseSafari6_1","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseSafari6_1","comment":"<p>Parses a string representation of a Safari 6.1+ stack trace.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseV8":{"name":"parseV8","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseV8","comment":"<p>Parses a string representation of a Chrome/V8 stack trace.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseVM":{"name":"parseVM","qualifiedName":"stack_trace/stack_trace.Trace.Trace-parseVM","comment":"<p>Parses a string representation of a Dart VM stack trace.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trace":{"name":"trace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"foldFrames":{"name":"foldFrames","qualifiedName":"stack_trace/stack_trace.Trace.foldFrames","comment":"<p>Returns a new <a>stack_trace/stack_trace.Trace</a> based on this where multiple stack frames matching\n<a>stack_trace/stack_trace.Trace.foldFrames.predicate</a> are folded together. This means that whenever there are\nmultiple frames in a row that match <a>stack_trace/stack_trace.Trace.foldFrames.predicate</a>, only the last one is\nkept.</p>\n<p>This is useful for limiting the amount of library code that appears in a\nstack trace by only showing user code and code that's called by user code.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stack_trace/stack_trace.Trace","inner":[]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"stack_trace/stack_trace.Frame","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"format":{"name":"format","qualifiedName":"stack_trace/stack_trace.Trace.format","comment":"<p>Returns a human-readable representation of <a>stack_trace/stack_trace.Trace.format.stackTrace</a>. If <a>stack_trace/stack_trace.Trace.format.terse</a> is\nset, this folds together multiple stack frames from the Dart core\nlibraries, so that only the core library method directly called from user\ncode is visible (see <a>stack_trace/stack_trace.Trace.terse</a>).</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"stackTrace":{"name":"stackTrace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]},"terse":{"name":"terse","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"stack_trace/stack_trace.Trace.toString","comment":"<p>Returns a human-readable string representation of this.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stack_trace/stack_trace.Trace.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stack_trace/stack_trace.Trace.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stack_trace/stack_trace.Trace.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stack_trace/stack_trace.Trace.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stack_trace/stack_trace.Trace.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stack_trace/stack_trace.Trace.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stack_trace/stack_trace.Trace.noSuchMethod","comment":"<p><a>stack_trace/stack_trace.Trace.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stack_trace/stack_trace.Trace.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stack_trace/stack_trace.Trace.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stack_trace/stack_trace.Trace.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"stack_trace/stack_trace.Trace.toString","comment":"<p>Returns a <a>dart-core.String</a> representation of the stack trace.</p>\n<p>The string represents the full stack trace starting from\nthe point where a throw ocurred to the top of the current call sequence.</p>\n<p>The exact format of the string representation is not final.</p>","commentFrom":"","inheritedFrom":"dart-core.StackTrace.toString","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}