{"name":"Symbol","qualifiedName":"dart-core.Symbol","comment":"<p>Opaque name used by mirrors, invocations and <a>dart-core.Function.apply</a>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-core.Symbol.Symbol-","comment":"<p>Constructs a new Symbol.</p>\n<p>The name must be a valid public Dart member name,\npublic constructor name, or library name, optionally qualified.</p>\n<p>A qualified name is a valid name preceded by a public identifier name\nand a '<code>.</code>', e.g., <code>foo.bar.baz=</code> is a qualified version of <code>baz=</code>.\nThat means that the content of the <a>dart-core.Symbol.Symbol-.name</a> String must be either</p><ul><li>\n<p>a valid public Dart identifier\n  (that is, an identifier not starting with \"<code>_</code>\"),</p></li><li>such an identifier followed by \"=\" (a setter name),</li><li>\n<p>the name of a declarable operator\n  (one of \"<code>+</code>\", \"<code>-</code>\", \"<code>*</code>\", \"<code>/</code>\", \"<code>%</code>\", \"<code>~/</code>\", \"<code>&amp;</code>\", \"<code>|</code>\",\n  \"<code>^</code>\", \"<code>~</code>\", \"<code>&lt;&lt;</code>\", \"<code>&gt;&gt;</code>\", \"<code>&lt;</code>\", \"<code>&lt;=</code>\", \"<code>&gt;</code>\", \"<code>&gt;=</code>\", \"<code>==</code>\",\n  \"<code>[]</code>\", \"<code>[]=</code>\", or \"<code>unary-</code>\"),</p></li><li>\n<p>any of the above preceeded by any number of qualifiers,\n  where a qualifier is a non-private identifier followed by '<code>.</code>',</p></li><li>\n<p>or the empty string (the default name of a library with no library\n  name declaration).</p></li></ul>\n<p>The following text is non-normative:</p>\n<p>Creating non-const Symbol instances may result in larger output.  If\npossible, use MirrorsUsed in \"dart:mirrors\" to specify which names might\nbe passed to this constructor.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Symbol.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Symbol.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Symbol.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Symbol.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Symbol.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Symbol.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Symbol.noSuchMethod","comment":"<p><a>dart-core.Symbol.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Symbol.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Symbol.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Symbol.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Symbol.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}