{"name":"MultipartFile","qualifiedName":"http/http.MultipartFile","comment":"<p>A file to be uploaded as part of a MultipartRequest. This doesn't need to\ncorrespond to a physical file.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"contentType":{"name":"contentType","qualifiedName":"http/http.MultipartFile.contentType","comment":"<p>The content-type of the file. Defaults to <code>application/octet-stream</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-io.ContentType","inner":[]}],"annotations":[]},"field":{"name":"field","qualifiedName":"http/http.MultipartFile.field","comment":"<p>The name of the form field for the file.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"filename":{"name":"filename","qualifiedName":"http/http.MultipartFile.filename","comment":"<p>The basename of the file. May be null.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"length":{"name":"length","qualifiedName":"http/http.MultipartFile.length","comment":"<p>The size of the file in bytes. This must be known in advance, even if this\nfile is created from a <a>http/http.ByteStream</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isFinalized":{"name":"isFinalized","qualifiedName":"http/http.MultipartFile.isFinalized","comment":"<p>Whether <a>http/http.MultipartFile.finalize</a> has been called.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"http/http.MultipartFile.MultipartFile-","comment":"<p>Creates a new <a>http/http.MultipartFile</a> from a chunked <a>http/http.Stream</a> of bytes. The length\nof the file in bytes must be known in advance. If it's not, read the data\nfrom the stream and use <a>http/http.MultipartFile.MultipartFile-fromBytes</a> instead.</p>\n<p><a>http/http.MultipartFile.MultipartFile-.contentType</a> currently defaults to <code>application/octet-stream</code>, but in the\nfuture may be inferred from <a>http/http.MultipartFile.MultipartFile-.filename</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"field":{"name":"field","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"http/http.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":null,"annotations":[]},"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"filename":{"name":"filename","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"contentType":{"name":"contentType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-io.ContentType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromBytes":{"name":"fromBytes","qualifiedName":"http/http.MultipartFile.MultipartFile-fromBytes","comment":"<p>Creates a new <a>http/http.MultipartFile</a> from a byte array.</p>\n<p><a>http/http.MultipartFile.MultipartFile-fromBytes.contentType</a> currently defaults to <code>application/octet-stream</code>, but in the\nfuture may be inferred from <a>http/http.MultipartFile.MultipartFile-fromBytes.filename</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"http/http.MultipartFile","inner":[]}],"parameters":{"field":{"name":"field","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"filename":{"name":"filename","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"contentType":{"name":"contentType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-io.ContentType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromString":{"name":"fromString","qualifiedName":"http/http.MultipartFile.MultipartFile-fromString","comment":"<p>Creates a new <a>http/http.MultipartFile</a> from a string.</p>\n<p>The encoding to use when translating <a>http/http.MultipartFile.MultipartFile-fromString.value</a> into bytes is taken from\n<a>http/http.MultipartFile.MultipartFile-fromString.contentType</a> if it has a charset set. Otherwise, it defaults to UTF-8.\n<a>http/http.MultipartFile.MultipartFile-fromString.contentType</a> currently defaults to <code>text/plain; charset=utf-8</code>, but in\nthe future may be inferred from <a>http/http.MultipartFile.MultipartFile-fromString.filename</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"http/http.MultipartFile","inner":[]}],"parameters":{"field":{"name":"field","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"filename":{"name":"filename","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"contentType":{"name":"contentType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-io.ContentType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"finalize":{"name":"finalize","qualifiedName":"http/http.MultipartFile.finalize","comment":"","commentFrom":"http.MultipartFile.finalize","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"http/http.ByteStream","inner":[]}],"parameters":{},"annotations":[]},"fromPath":{"name":"fromPath","qualifiedName":"http/http.MultipartFile.fromPath","comment":"<p>Creates a new <a>http/http.MultipartFile</a> from a path to a file on disk.</p>\n<p><a>http/http.MultipartFile.fromPath.filename</a> defaults to the basename of <a>http/http.MultipartFile.fromPath.filePath</a>. <a>http/http.MultipartFile.fromPath.contentType</a> currently\ndefaults to <code>application/octet-stream</code>, but in the future may be inferred\nfrom <a>http/http.MultipartFile.fromPath.filename</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http/http.MultipartFile","inner":[]}]}],"parameters":{"field":{"name":"field","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"filePath":{"name":"filePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"filename":{"name":"filename","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"contentType":{"name":"contentType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-io.ContentType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"http/http.MultipartFile.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>http/http.MultipartFile.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"http/http.MultipartFile.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"http/http.MultipartFile.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>http/http.MultipartFile.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>http/http.MultipartFile.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"http/http.MultipartFile.noSuchMethod","comment":"<p><a>http/http.MultipartFile.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>http/http.MultipartFile.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>http/http.MultipartFile.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>http/http.MultipartFile.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http/http.MultipartFile.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}