{"name":"http-testing","qualifiedName":"http/http-testing","comment":"<p>This library contains testing classes for the HTTP library.</p>\n<p>The MockClient class is a drop-in replacement for <code>http.Client</code> that\nallows test code to set up a local request handler in order to fake a server\nthat responds to HTTP requests:</p>\n<pre><code>import 'dart:convert';\nimport 'package:http/testing.dart';\n\nvar client = new MockClient((request) {\n  if (request.url.path != \"/data.json\") {\n    return new Response(\"\", 404);\n  }\n  return new Response(JSON.encode({\n    'numbers': [1, 4, 15, 19, 214]\n  }, 200, headers: {\n    'content-type': 'application/json'\n  });\n};\n</code></pre>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"MockClient","qualifiedName":"http/http-testing.MockClient","preview":"<p>A mock HTTP client designed for use when testing code that uses\n<a>http/http-testing.BaseClient</a>. This client allows you to define a handler callback for all\nrequests that are made through it so that you can mock a server without\nhaving to send real HTTP requests.</p>"}],"typedef":{"MockClientHandler":{"name":"MockClientHandler","qualifiedName":"http/http-testing.MockClientHandler","comment":"<p>A handler function that receives <a>http/http.Request</a>s and sends <a>http/http.Response</a>s. Note that\nrequest will be finalized.</p>","return":"dart-async.Future","parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"http/request.Request","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A handler function that receives <a>http/http.Request</a>s and sends <a>http/http.Response</a>s. Note that\nrequest will be finalized.</p>"},"MockClientStreamHandler":{"name":"MockClientStreamHandler","qualifiedName":"http/http-testing.MockClientStreamHandler","comment":"<p>A handler function that receives StreamedRequests and sends\n<a>http/http.StreamedResponse</a>s. Note that request will be finalized.</p>","return":"dart-async.Future","parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"http/base_request.BaseRequest","inner":[]}],"value":null,"annotations":[]},"bodyStream":{"name":"bodyStream","optional":false,"named":false,"default":false,"type":[{"outer":"http/byte_stream.ByteStream","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A handler function that receives StreamedRequests and sends\n<a>http/http.StreamedResponse</a>s. Note that request will be finalized.</p>"}},"error":[]},"packageName":"http","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources.</p>\n<p><strong>NOTE:</strong> This package currently only works for\nserver-side or command-line Dart applications. In other words, if the app\nimports <code>dart:io</code>, it can use this package.</p>\n<h2>Using</h2>\n<p>Please see the <a href=\"https://api.dartlang.org/docs/channels/dev/latest/http.html\">API docs</a> for explanations and examples.</p>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"}