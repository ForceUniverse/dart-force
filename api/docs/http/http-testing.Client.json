{"name":"Client","qualifiedName":"http/http-testing.Client","comment":"<p>The interface for HTTP clients that take care of maintaining persistent\nconnections across multiple requests to the same server. If you only need to\nsend a single request, it's usually easier to use <a>http/http-testing.Client.head</a>, <a>http/http-testing.Client.get</a>, <a>http/http-testing.Client.post</a>,\n<a>http/http-testing.Client.put</a>, or <a>http/http-testing.Client.delete</a> instead.</p>\n<p>When creating an HTTP client class with additional functionality, you must\nextend <a>http/http-testing.BaseClient</a> rather than <a>http/http-testing.Client</a>. In most cases, you can wrap\nanother instance of <a>http/http-testing.Client</a> and add functionality on top of that. This\nallows all classes implementing <a>http/http-testing.Client</a> to be mutually composable.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"http/http-testing.Client.Client-","comment":"<p>Creates a new Client using the default implementation. This implementation\nuses an underlying <code>dart:io</code> HttpClient to make requests.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"http/http-testing.Client","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"close":{"name":"close","qualifiedName":"http/http-testing.Client.close","comment":"<p>Closes the client and cleans up any resources associated with it. It's\nimportant to close each client when it's done being used; failing to do so\ncan cause the Dart process to hang.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"delete":{"name":"delete","qualifiedName":"http/http-testing.Client.delete","comment":"<p>Sends an HTTP DELETE request with the given headers to the given URL,\nwhich can be a <a>dart-core.Uri</a> or a <a>dart-core.String</a>.</p>\n<p>For more fine-grained control over the request, use <a>http/http-testing.Client.send</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http/response.Response","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"get":{"name":"get","qualifiedName":"http/http-testing.Client.get","comment":"<p>Sends an HTTP GET request with the given headers to the given URL, which\ncan be a <a>dart-core.Uri</a> or a <a>dart-core.String</a>.</p>\n<p>For more fine-grained control over the request, use <a>http/http-testing.Client.send</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http/response.Response","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"head":{"name":"head","qualifiedName":"http/http-testing.Client.head","comment":"<p>Sends an HTTP HEAD request with the given headers to the given URL, which\ncan be a <a>dart-core.Uri</a> or a <a>dart-core.String</a>.</p>\n<p>For more fine-grained control over the request, use <a>http/http-testing.Client.send</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http/response.Response","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"post":{"name":"post","qualifiedName":"http/http-testing.Client.post","comment":"<p>Sends an HTTP POST request with the given headers and body to the given\nURL, which can be a <a>dart-core.Uri</a> or a <a>dart-core.String</a>.</p>\n<p><a>http/http-testing.Client.post.body</a> sets the body of the request. It can be a <a>dart-core.String</a>, a <a>dart-core</a>&lt;<a>dart-core</a>>\nor a <a>dart-core</a>&lt;<a>dart-core</a>, <a>dart-core</a>>. If it's a String, it's encoded using\n<a>http/http-testing.Client.post.encoding</a> and used as the body of the request. The content-type of the\nrequest will default to \"text/plain\".</p>\n<p>If <a>http/http-testing.Client.post.body</a> is a List, it's used as a list of bytes for the body of the\nrequest.</p>\n<p>If <a>http/http-testing.Client.post.body</a> is a Map, it's encoded as form fields using <a>http/http-testing.Client.post.encoding</a>. The\ncontent-type of the request will be set to\n<code>\"application/x-www-form-urlencoded\"</code>; this cannot be overridden.</p>\n<p><a>http/http-testing.Client.post.encoding</a> defaults to <a>http/dart-convert.UTF8</a>.</p>\n<p>For more fine-grained control over the request, use <a>http/http-testing.Client.send</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http/response.Response","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"put":{"name":"put","qualifiedName":"http/http-testing.Client.put","comment":"<p>Sends an HTTP PUT request with the given headers and body to the given\nURL, which can be a <a>dart-core.Uri</a> or a <a>dart-core.String</a>.</p>\n<p><a>http/http-testing.Client.put.body</a> sets the body of the request. It can be a <a>dart-core.String</a>, a <a>dart-core</a>&lt;<a>dart-core</a>>\nor a <a>dart-core</a>&lt;<a>dart-core</a>, <a>dart-core</a>>. If it's a String, it's encoded using\n<a>http/http-testing.Client.put.encoding</a> and used as the body of the request. The content-type of the\nrequest will default to \"text/plain\".</p>\n<p>If <a>http/http-testing.Client.put.body</a> is a List, it's used as a list of bytes for the body of the\nrequest.</p>\n<p>If <a>http/http-testing.Client.put.body</a> is a Map, it's encoded as form fields using <a>http/http-testing.Client.put.encoding</a>. The\ncontent-type of the request will be set to\n<code>\"application/x-www-form-urlencoded\"</code>; this cannot be overridden.</p>\n<p><a>http/http-testing.Client.put.encoding</a> defaults to <a>http/dart-convert.UTF8</a>.</p>\n<p>For more fine-grained control over the request, use <a>http/http-testing.Client.send</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http/response.Response","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"read":{"name":"read","qualifiedName":"http/http-testing.Client.read","comment":"<p>Sends an HTTP GET request with the given headers to the given URL, which\ncan be a <a>dart-core.Uri</a> or a <a>dart-core.String</a>, and returns a Future that completes to the\nbody of the response as a String.</p>\n<p>The Future will emit an HttpException if the response doesn't have a\nsuccess status code.</p>\n<p>For more fine-grained control over the request and response, use <a>http/http-testing.Client.send</a> or\n<a>http/http-testing.Client.get</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"readBytes":{"name":"readBytes","qualifiedName":"http/http-testing.Client.readBytes","comment":"<p>Sends an HTTP GET request with the given headers to the given URL, which\ncan be a <a>dart-core.Uri</a> or a <a>dart-core.String</a>, and returns a Future that completes to the\nbody of the response as a list of bytes.</p>\n<p>The Future will emit an HttpException if the response doesn't have a\nsuccess status code.</p>\n<p>For more fine-grained control over the request and response, use <a>http/http-testing.Client.send</a> or\n<a>http/http-testing.Client.get</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-typed_data.Uint8List","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"send":{"name":"send","qualifiedName":"http/http-testing.Client.send","comment":"<p>Sends an HTTP request and asynchronously returns the response.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"http/streamed_response.StreamedResponse","inner":[]}]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"http/base_request.BaseRequest","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"http/http-testing.Client.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>http/http-testing.Client.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"http/http-testing.Client.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"http/http-testing.Client.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>http/http-testing.Client.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>http/http-testing.Client.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"http/http-testing.Client.noSuchMethod","comment":"<p><a>http/http-testing.Client.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>http/http-testing.Client.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>http/http-testing.Client.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>http/http-testing.Client.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http/http-testing.Client.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}