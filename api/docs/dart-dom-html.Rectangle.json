{"name":"Rectangle","qualifiedName":"dart-dom-html.Rectangle","comment":"<p>A class for representing two-dimensional rectangles whose properties are\nimmutable.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"height":{"name":"height","qualifiedName":"dart-math.Rectangle.height","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"left":{"name":"left","qualifiedName":"dart-math.Rectangle.left","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"top":{"name":"top","qualifiedName":"dart-math.Rectangle.top","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"width":{"name":"width","qualifiedName":"dart-math.Rectangle.width","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-dom-html.Rectangle.Rectangle-","comment":"<p>Create a rectangle spanned by <code>(left, top)</code> and <code>(left+width, top+height)</code>.</p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>left</code> and <code>left + width</code>, and\nwith y-coordinate between <code>top</code> and <code>top + height</code>, both inclusive.</p>\n<p>The <code>width</code> and <code>height</code> should be non-negative.\nIf <code>width</code> or <code>height</code> are negative, they are clamped to zero.</p>\n<p>If <code>width</code> and <code>height</code> are zero, the \"rectangle\" comprises only the single\npoint <code>(left, top)</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle.T","inner":[]}],"value":null,"annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle.T","inner":[]}],"value":null,"annotations":[]},"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle.T","inner":[]}],"value":null,"annotations":[]},"height":{"name":"height","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromPoints":{"name":"fromPoints","qualifiedName":"dart-dom-html.Rectangle.Rectangle-fromPoints","comment":"<p>Create a rectangle spanned by the points <a>dart-dom-html.Rectangle.Rectangle-fromPoints.a</a> and <a>dart-dom-html.Rectangle.Rectangle-fromPoints.b</a>;</p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>a.x</code> and <code>b.x</code>, and\nwith y-coordinate between <code>a.y</code> and <code>b.y</code>, both inclusive.</p>\n<p>If the distance between <code>a.x</code> and <code>b.x</code> is not representable\n(which can happen if one or both is a double),\nthe actual right edge might be slightly off from <code>max(a.x, b.x)</code>.\nSimilar for the y-coordinates and the bottom edge.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-dom-html.Rectangle.T","inner":[]}]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Rectangle.T","inner":[]}]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-dom-html.Rectangle.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"bottom":{"name":"bottom","qualifiedName":"dart-dom-html.Rectangle.bottom","comment":"<p>The y-coordinate of the bottom edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottom","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"bottomLeft":{"name":"bottomLeft","qualifiedName":"dart-dom-html.Rectangle.bottomLeft","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottomLeft","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"bottomRight":{"name":"bottomRight","qualifiedName":"dart-dom-html.Rectangle.bottomRight","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottomRight","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.Rectangle.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.Rectangle.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-math._RectangleBase.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"height":{"name":"height","qualifiedName":"dart-dom-html.Rectangle.height","comment":"<p>The height of the rectangle.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.height","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"left":{"name":"left","qualifiedName":"dart-dom-html.Rectangle.left","comment":"<p>The x-coordinate of the left edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.left","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"right":{"name":"right","qualifiedName":"dart-dom-html.Rectangle.right","comment":"<p>The x-coordinate of the right edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.right","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.Rectangle.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"top":{"name":"top","qualifiedName":"dart-dom-html.Rectangle.top","comment":"<p>The y-coordinate of the top edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.top","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"topLeft":{"name":"topLeft","qualifiedName":"dart-dom-html.Rectangle.topLeft","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.topLeft","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"topRight":{"name":"topRight","qualifiedName":"dart-dom-html.Rectangle.topRight","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.topRight","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"width":{"name":"width","qualifiedName":"dart-dom-html.Rectangle.width","comment":"<p>The width of the rectangle.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.width","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.Rectangle.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.Rectangle.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.Rectangle.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-math._RectangleBase.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"boundingBox":{"name":"boundingBox","qualifiedName":"dart-dom-html.Rectangle.boundingBox","comment":"<p>Returns a new rectangle which completely contains <code>this</code> and <a>dart-dom-html.Rectangle.boundingBox.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.boundingBox","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math._RectangleBase.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"containsPoint":{"name":"containsPoint","qualifiedName":"dart-dom-html.Rectangle.containsPoint","comment":"<p>Tests whether <a>dart-dom-html.Rectangle.containsPoint.another</a> is inside or along the edges of <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.containsPoint","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"another":{"name":"another","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Point","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"containsRectangle":{"name":"containsRectangle","qualifiedName":"dart-dom-html.Rectangle.containsRectangle","comment":"<p>Tests whether <code>this</code> entirely contains <a>dart-dom-html.Rectangle.containsRectangle.another</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.containsRectangle","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"another":{"name":"another","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"dart-dom-html.Rectangle.intersection","comment":"<p>Computes the intersection of <code>this</code> and <a>dart-dom-html.Rectangle.intersection.other</a>.</p>\n<p>The intersection of two axis-aligned rectangles, if any, is always another\naxis-aligned rectangle.</p>\n<p>Returns the intersection of this and <code>other</code>, or <code>null</code> if they don't\nintersect.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.intersection","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-math._RectangleBase.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"intersects":{"name":"intersects","qualifiedName":"dart-dom-html.Rectangle.intersects","comment":"<p>Returns true if <code>this</code> intersects <a>dart-dom-html.Rectangle.intersects.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.intersects","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Rectangle","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.Rectangle.noSuchMethod","comment":"<p><a>dart-dom-html.Rectangle.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.Rectangle.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.Rectangle.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.Rectangle.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.Rectangle.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-math._RectangleBase.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.num"}}}