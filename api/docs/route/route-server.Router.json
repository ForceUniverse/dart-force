{"name":"Router","qualifiedName":"route/route-server.Router","comment":"<p>A request router that makes it easier to handle <a>route/dart-io.HttpRequest</a>s from an\n<a>route/dart-io.HttpServer</a>.</p>\n<p><a>route/route-server.Router.serve</a> creates a new <a>route/dart-async.Stream</a> of requests whose paths match against the\ngiven pattern. Matching requests are not sent to any other streams created by\na server() call.</p>\n<p><a>route/route-server.Router.filter</a> registers a <a>route/route-server.Filter</a> function to run against matching requests. On\neach request the filters that match are run in order, waiting for each to\ncomplete since filters return a Future. If any filter completes false, the\nsubsequent filters and request handlers are not run. This way a filter can\nprevent further processing, like needed for authentication.</p>\n<p>Requests not matched by a call to <a>route/route-server.Router.serve</a> are sent to the <a>route/route-server.Router.defaultStream</a>.\nIf there's no subscriber to the defaultStream then a 404 is sent to the\nresponse.</p>\n<p>Example:</p>\n<pre><code>import 'package:route/server.dart';\nimport 'package:route/pattern.dart';\n\nHttpServer.bind().then((server) {\n  var router = new Router(server)\n    ..filter(matchesAny(['/foo', '/bar']), authFilter)\n    ..serve('/foo').listen(fooHandler)\n    ..serve('/bar').listen(barHandler)\n    ..defaultStream.listen(send404);\n});\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"defaultStream":{"name":"defaultStream","qualifiedName":"route/route-server.Router.defaultStream","comment":"","commentFrom":"route-server.Router.defaultStream","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"route/route-server.Router.Router-","comment":"<p>Create a new Router that listens to the <a>route/route-server.Router.Router-.incoming</a> stream, usually an\ninstance of <a>route/dart-io.HttpServer</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"incoming":{"name":"incoming","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"filter":{"name":"filter","qualifiedName":"route/route-server.Router.filter","comment":"<p>A <a>route/route-server.Filter</a> returns a Future&lt;<a>dart-core</a>> that tells the router whether to apply\nthe remaining filters and send requests to the streams created by <a>route/route-server.Router.serve</a>.</p>\n<p>If the filter returns true, the request is passed to the next filter, and\nthen to the first matching server stream. If the filter returns false, it's\nassumed that the filter is handling the request and it's not forwarded.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]},"filter":{"name":"filter","optional":false,"named":false,"default":false,"type":[{"outer":"route/route-server.Filter","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"serve":{"name":"serve","qualifiedName":"route/route-server.Router.serve","comment":"<p>Request whose URI matches <a>route/route-server.Router.serve.url</a> and <a>route/route-server.Router.serve.method</a> (if provided) are sent to the \nstream created by this method, and not sent to any other router streams.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]},"method":{"name":"method","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"route/route-server.Router.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>route/route-server.Router.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"route/route-server.Router.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"route/route-server.Router.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>route/route-server.Router.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>route/route-server.Router.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"route/route-server.Router.noSuchMethod","comment":"<p><a>route/route-server.Router.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>route/route-server.Router.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>route/route-server.Router.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>route/route-server.Router.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"route/route-server.Router.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}