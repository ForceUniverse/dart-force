{"name":"pattern","qualifiedName":"route/pattern","comment":"<p>Pattern utilities for use with server.Router.</p>\n<p>Example:</p>\n<pre><code>var router = new Router(server);\nrouter.filter(matchesAny(new UrlPattern(r'/(\\w+)'),\n    exclude: [new UrlPattern('/login')]), authFilter);\n</code></pre>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"matchAny":{"name":"matchAny","qualifiedName":"route/pattern.matchAny","comment":"<p>Returns a <a>dart-core.Pattern</a> that matches against every pattern in <a>route/pattern.matchAny.include</a> and\nreturns all the matches. If the input string matches against any pattern in\n<a>route/pattern.matchAny.exclude</a> no matches are returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Pattern","inner":[]}],"parameters":{"include":{"name":"include","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Pattern","inner":[]}]}],"value":null,"annotations":[]},"exclude":{"name":"exclude","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Pattern","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"matchesFull":{"name":"matchesFull","qualifiedName":"route/pattern.matchesFull","comment":"<p>Returns true if <a>route/pattern.matchesFull.pattern</a> has a single match in <a>route/pattern.matchesFull.str</a> that matches the whole\nstring, not a substring.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"pattern":{"name":"pattern","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]},"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[],"typedef":{},"error":[]},"packageName":"route","packageIntro":"<h1>Route</h1>\n<p>Route is a client + server routing library for Dart that helps make building\nsingle-page web apps and using <code>HttpServer</code> easier.</p>\n<h2>Installation</h2>\n<p>Add this package to your pubspec.yaml file:</p>\n<pre><code>dependencies:\n  route: any\n  \n</code></pre>\n<p>Then, run <code>pub install</code> to download and link in the package.</p>\n<h2>UrlPattern</h2>\n<p>Route is built around <code>UrlPattern</code> a class that matches, parses and produces\nURLs. A <code>UrlPattern</code> is similar to a regex, but constrained so that it is\n<em>reversible</em>, given a <code>UrlPattern</code> and a set of arguments you can produce the\nURL that when parsed returns those same arguments. This is important for keeping\nthe URL space for your app flexible so that you can change a URL for a resource\nin one place and keep your app working.</p>\n<p>Route lets you use the same URL patterns for client-side and server-side\nrouting. Just define a library containing all your URLs.</p>\n<p>As an example, consider a blog with a home page and an article page. The article\nURL has the form /article/1234. We want to show articles without reloading the\npage.</p>\n<p>Example (urls.dart):</p>\n<pre class=\"dart\"><code>library urls;\n\nimport 'package:route/url_pattern.dart';\n\nfinal homeUrl = new UrlPattern(r'/');\nfinal articleUrl = new UrlPattern(r'/article/(\\d+)');\nfinal allUrls = [homeUrl, articleUrl];\n</code></pre>\n<h2>Client Routing</h2>\n<p>On the client, there is a <code>Router</code> class that associates <code>UrlPattern</code>s\nto handlers. Given a URL, the router finds a pattern that matches, and invokes\nit's handler. This is similar to\n<code>HttpServer.addRequestHandler(matcher, handler)</code> on the server. The handlers\nare then responsible for rendering the appropriate changes to the page.</p>\n<p>The <code>Router</code> can listen to <code>Window.onPopState</code> events and invoke the correct\nhandler so that the back button seamlessly works.</p>\n<p>Example (client.dart):</p>\n<pre class=\"dart\"><code>library client;\n\nimport 'package:route/client.dart';\n\nmain() {\n  var router = new Router()\n    ..addHandler(homeUrl, showHome)\n    ..addHandler(articleUrl, showArticle)\n    ..listen();\n}\n\nvoid showHome(String path) {\n  // nothing to parse from path, since there are no groups\n}\n\nvoid showArticle(String path) {\n  var articleId = articleUrl.parse(req.path)[0];\n  // show article page with loading indicator\n  // load article from server, then render article\n}\n</code></pre>\n<h2>Server Routing</h2>\n<p>On the server, route gives you a utility function to match <code>HttpRequest</code>s\nagainst <code>UrlPatterns</code>.</p>\n<pre class=\"dart\"><code>import 'urls.dart';\nimport 'package:route/server.dart';\nimport 'package:route/pattern.dart';\n\nHttpServer.bind().then((server) {\n  var router = new Router(server)\n    ..filter(matchesAny(allUrls), authFilter)\n    ..serve(homeUrl).listen(serverHome)\n    ..serve(articleUrl, method: 'GET').listen(serveArticle)\n    ..defaultStream.listen(serveNotFound);\n});\n\nFuture&lt;bool&gt; authFilter(req) {\n  return getUser(getUserIdCookie(req)).then((user) {\n    if (user != null) {\n      return true;\n    }\n    redirectToLoginPage(req);\n    return false;\n  });\n}\n\nserveArcticle(req) {\n  var articleId = articleUrl.parse(req.uri.path)[0];\n  // retrieve article data and respond\n}\n</code></pre>\n<h2>Further Goals</h2><ul><li>\n<p>Integration with Polymer so that the changing of UI views can happen\n   automatically.</p></li><li>Handling different HTTP methods to help implement REST APIs.</li><li>\n<p>Automatic generation of REST URLs from a single URL pattern, similar to Ruby\n   on Rails</p></li><li>Helpers for nested views and key-value URL schemes common with complex apps.</li><li>Done ~~Server-side routing for the dart:io v2 HttpServer~~</li><li>Done ~~IE 9 support~~</li></ul>"}