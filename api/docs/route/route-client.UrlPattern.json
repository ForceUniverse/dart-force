{"name":"UrlPattern","qualifiedName":"route/route-client.UrlPattern","comment":"<p>A pattern, similar to a <a>route/dart-core.RegExp</a>, that is designed to match against URL\npaths, easily return groups of a matched path, and produce paths from a list\nof arguments - this is they are \"reversible\".</p>\n<p><code>UrlPattern</code>s also allow for handling plain paths and URLs with a fragment in\na uniform way so that they can be used for client side routing on browsers\nthat support <code>window.history.pushState</code> as well as legacy browsers.</p>\n<p>The differences from a plain <a>route/dart-core.RegExp</a>:\n * All non-literals must be in a group. Everything outside of a groups is\n   considered a literal and special regex characters are escaped.\n * There can only be one match, and it must match the entire string. <code>^</code> and\n   <code>$</code> are automatically added to the beginning and end of the pattern,\n   respectively.\n * The pattern must be un-ambiguous, eg <code>(.*)(.*)</code> is not allowed at the\n   top-level.\n * The hash character (#) matches both '#' and '/', and it is only allowed\n   once per pattern. Hashes are not allowed inside groups.</p>\n<p>With those differences, <code>UrlPatterns</code> become much more useful for routing\nURLs and constructing them, both on the client and server. The best practice\nis to define your application's set of URLs in a shared library.</p>\n<p>urls.dart:</p>\n<pre><code>library urls;\n\nfinal articleUrl = new UrlPattern(r'/articles/(\\d+)');\n</code></pre>\n<p>server.dart:</p>\n<pre><code>import 'urls.dart';\nimport 'package:route/server.dart';\n\nmain() {\n  var server = new HttpServer();\n  server.addRequestHandler(matchesUrl(articleUrl), serveArticle);\n}\n\nserveArcticle(req, res) {\n  var articleId = articleUrl.parse(req.path)[0];\n  // ...\n}\n</code></pre>\n<h2>Use with older browsers</h2>\n<p>Since '#' matches both '#' and '/' it can be used in as a path separator\nbetween the \"static\" portion of your URL and the \"dynamic\" portion. The\ndynamic portion would be the part that change when a user navigates to new\ndata that's loaded dynamically rather than loading a new page.</p>\n<p>In newer browsers that support <code>History.pushState()</code> an entire new path can\nbe pushed into the location bar without reloading the page. In older browsers\nonly the fragment can be changed without reloading the page. By matching both\ncharacters, and by producing either, we can use pushState in newer browsers,\nbut fall back to fragments when necessary.</p>\n<p>Examples:</p>\n<pre><code>var pattern = new UrlPattern(r'/app#profile/(\\d+)');\npattern.matches('/app/profile/1234'); // true\npattern.matches('/app#profile/1234'); // true\npattern.reverse([1234], useFragment: true); // /app#profile/1234\npattern.reverse([1234], useFragment: false); // /app/profile/1234\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Pattern"],"subclass":[],"variables":{"pattern":{"name":"pattern","qualifiedName":"route/route-client.UrlPattern.pattern","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"route/route-client.UrlPattern.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>route/route-client.UrlPattern.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"regex":{"name":"regex","qualifiedName":"route/route-client.UrlPattern.regex","comment":"","commentFrom":"route-url_pattern.UrlPattern.regex","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.RegExp","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"route/route-client.UrlPattern.UrlPattern-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"pattern":{"name":"pattern","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"route/route-client.UrlPattern.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>route/route-client.UrlPattern.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>route/route-client.UrlPattern.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"allMatches":{"name":"allMatches","qualifiedName":"route/route-client.UrlPattern.allMatches","comment":"<p>Match this pattern against the string repeatedly.</p>\n<p>The iterable will contain all the non-overlapping matches of the\npattern on the string, ordered by start index.</p>\n<p>The matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.</p>\n<p>If the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.</p>","commentFrom":"dart-core.Pattern.allMatches","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Match","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matchAsPrefix":{"name":"matchAsPrefix","qualifiedName":"route/route-client.UrlPattern.matchAsPrefix","comment":"<p>Match this pattern against the start of string.</p>\n<p>If <a>route/route-client.UrlPattern.matchAsPrefix.start</a> is provided, it must be an integer in the range <code>0</code> ..\n<code>string.length</code>. In that case, this patten is tested against the\nstring at the <a>route/route-client.UrlPattern.matchAsPrefix.start</a> position. That is, a match is returned if the\npattern can match a part of the string starting from position <a>route/route-client.UrlPattern.matchAsPrefix.start</a>.</p>","commentFrom":"dart-core.Pattern.matchAsPrefix","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Match","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"matches":{"name":"matches","qualifiedName":"route/route-client.UrlPattern.matches","comment":"<p>Returns true if this pattern matches path.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matchesNonFragment":{"name":"matchesNonFragment","qualifiedName":"route/route-client.UrlPattern.matchesNonFragment","comment":"<p>Returns true if the path portion of the pattern, the part before the\nfragment, matches <a>route/route-client.UrlPattern.matchesNonFragment.str</a>. If there is no fragment in the pattern, this is\nequivalent to calling <a>route/route-client.UrlPattern.matches</a>.</p>\n<p>This method is most useful on a server that is serving the HTML of a\nsingle page app. Clients that don't support pushState will not send the\nfragment to the server, so the server will have to handle just the path\npart.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"route/route-client.UrlPattern.parse","comment":"<p>Parses a URL path, or path + fragment, and returns the group matches.\nThrows <a>dart-core.ArgumentError</a> if this pattern does not match <a>route/route-client.UrlPattern.parse.path</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reverse":{"name":"reverse","qualifiedName":"route/route-client.UrlPattern.reverse","comment":"","commentFrom":"route-url_pattern.UrlPattern.reverse","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"useFragment":{"name":"useFragment","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"route/route-client.UrlPattern.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"route/route-client.UrlPattern.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>route/route-client.UrlPattern.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"route/route-client.UrlPattern.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"route/route-client.UrlPattern.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>route/route-client.UrlPattern.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>route/route-client.UrlPattern.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"allMatches":{"name":"allMatches","qualifiedName":"route/route-client.UrlPattern.allMatches","comment":"<p>Match this pattern against the string repeatedly.</p>\n<p>The iterable will contain all the non-overlapping matches of the\npattern on the string, ordered by start index.</p>\n<p>The matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.</p>\n<p>If the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.</p>","commentFrom":"","inheritedFrom":"dart-core.Pattern.allMatches","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Match","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matchAsPrefix":{"name":"matchAsPrefix","qualifiedName":"route/route-client.UrlPattern.matchAsPrefix","comment":"<p>Match this pattern against the start of string.</p>\n<p>If <a>route/route-client.UrlPattern.matchAsPrefix.start</a> is provided, it must be an integer in the range <code>0</code> ..\n<code>string.length</code>. In that case, this patten is tested against the\nstring at the <a>route/route-client.UrlPattern.matchAsPrefix.start</a> position. That is, a match is returned if the\npattern can match a part of the string starting from position <a>route/route-client.UrlPattern.matchAsPrefix.start</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Pattern.matchAsPrefix","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Match","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"route/route-client.UrlPattern.noSuchMethod","comment":"<p><a>route/route-client.UrlPattern.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>route/route-client.UrlPattern.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>route/route-client.UrlPattern.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>route/route-client.UrlPattern.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"route/route-client.UrlPattern.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}