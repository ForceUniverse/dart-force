{"name":"Platform","qualifiedName":"dart-io.Platform","comment":"<p>Information about the environment in which the current program is running.</p>\n<p>Platform provides information such as the operating system,\nthe hostname of the computer, the value of environment variables,\nthe path to the running program,\nand so on.</p>\n<h2>Get the URI to the current Dart script</h2>\n<p>Use the <a>dart-io.Platform.script</a> getter to get the URI to the currently running\nDart script.</p>\n<pre><code>import 'dart:io' show Platform;\n\nvoid main() {\n  // Get the URI of the script being run.\n  var uri = Platform.script;\n  // Convert the URI to a path.\n  var path = uri.toFilePath();\n}\n</code></pre>\n<h2>Get the value of an environment variable</h2>\n<p>The <a>dart-io.Platform.environment</a> getter returns a the names and values of environment\nvariables in a <a>dart-core.Map</a> that contains key-value pairs of strings. The Map is\nunmodifiable. This sample shows how to get the value of the <code>PATH</code>\nenvironment variable.</p>\n<pre><code>import 'dart:io' show Platform;\n\nvoid main() {\n  Map&lt;String, String&gt; envVars = Platform.environment;\n  print(envVars['PATH']);\n}\n</code></pre>\n<h2>Determine the OS</h2>\n<p>You can get the name of the operating system as a string with the\n<a>dart-io.Platform.operatingSystem</a> getter. You can also use one of the static boolean\ngetters: <a>dart-io.Platform.isMacOS</a>, <a>dart-io.Platform.isLinux</a>, and <a>dart-io.Platform.isWindows</a>.</p>\n<pre><code>import 'dart:io' show Platform, stdout;\n\nvoid main() {\n  // Get the operating system as a string.\n  String os = Platform.operatingSystem;\n  // Or, use a predicate getter.\n  if (Platform.isMacOS) {\n    Print('is a Mac'); \n  } else {\n   print('is not a Mac');\n  }\n}\n</code></pre>\n<h2>Other resources</h2>\n<p><a href=\"https://www.dartlang.org/dart-by-example/#dart-io-and-command-line-apps\">Dart by Example</a>\nprovides additional task-oriented code samples that show how to use \nvarious API from the dart:io library.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"isAndroid":{"name":"isAndroid","qualifiedName":"dart-io.Platform.isAndroid","comment":"<p>Returns true if the operating system is Android.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"isLinux":{"name":"isLinux","qualifiedName":"dart-io.Platform.isLinux","comment":"<p>Returns true if the operating system is Linux.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"isMacOS":{"name":"isMacOS","qualifiedName":"dart-io.Platform.isMacOS","comment":"<p>Returns true if the operating system is Mac OS.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"isWindows":{"name":"isWindows","qualifiedName":"dart-io.Platform.isWindows","comment":"<p>Returns true if the operating system is Windows.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"environment":{"name":"environment","qualifiedName":"dart-io.Platform.environment","comment":"<p>Get the environment for this process.</p>\n<p>The returned environment is an unmodifiable map which content is\nretrieved from the operating system on its first use.</p>\n<p>Environment variables on Windows are case-insensitive. The map\nreturned on Windows is therefore case-insensitive and will convert\nall keys to upper case. On other platforms the returned map is\na standard case-sensitive map.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"executable":{"name":"executable","qualifiedName":"dart-io.Platform.executable","comment":"<p>Returns the path of the executable used to run the script in this\nisolate.</p>\n<p>If the execution environment does not support <a>dart-io.Platform.executable</a> an empty\nstring is returned.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"executableArguments":{"name":"executableArguments","qualifiedName":"dart-io.Platform.executableArguments","comment":"<p>Returns the flags passed to the executable used to run the script in this\nisolate. These are the command-line flags between the executable name\nand the script name. Each fetch of executableArguments returns a new\nList, containing the flags passed to the executable.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"localHostname":{"name":"localHostname","qualifiedName":"dart-io.Platform.localHostname","comment":"<p>Get the local hostname for the system.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"numberOfProcessors":{"name":"numberOfProcessors","qualifiedName":"dart-io.Platform.numberOfProcessors","comment":"<p>Get the number of processors of the machine.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"operatingSystem":{"name":"operatingSystem","qualifiedName":"dart-io.Platform.operatingSystem","comment":"<p>Get a string (<code>linux</code>, <code>macos</code>, <code>windows</code> or <code>android</code>)\nrepresenting the operating system.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"packageRoot":{"name":"packageRoot","qualifiedName":"dart-io.Platform.packageRoot","comment":"<p>Returns the value of the --package-root flag passed to the executable\nused to run the script in this isolate.  This is the directory in which\nDart packages are looked up.</p>\n<p>If there is no --package-root flag, then the empty string is returned.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"pathSeparator":{"name":"pathSeparator","qualifiedName":"dart-io.Platform.pathSeparator","comment":"<p>Get the path separator used by the operating system to separate\ncomponents in file paths.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"script":{"name":"script","qualifiedName":"dart-io.Platform.script","comment":"<p>Returns the absolute URI of the script being run in this\nisolate.</p>\n<p>If the script argument on the command line is relative,\nit is resolved to an absolute URI before fetching the script, and\nthis absolute URI is returned.</p>\n<p>URI resolution only does string manipulation on the script path, and this\nmay be different from the file system's path resolution behavior. For\nexample, a symbolic link immediately followed by '..' will not be\nlooked up.</p>\n<p>If the executable environment does not support <a>dart-io.Platform.script</a> an empty\n<a>dart-core.Uri</a> is returned.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{},"annotations":[]},"version":{"name":"version","qualifiedName":"dart-io.Platform.version","comment":"<p>Returns the version of the current Dart runtime.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.Platform.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.Platform.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.Platform.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.Platform.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.Platform.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.Platform.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.Platform.noSuchMethod","comment":"<p><a>dart-io.Platform.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.Platform.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.Platform.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.Platform.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.Platform.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}