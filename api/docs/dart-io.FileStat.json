{"name":"FileStat","qualifiedName":"dart-io.FileStat","comment":"<p>A FileStat object represents the result of calling the POSIX stat() function\non a file system object.  It is an immutable object, representing the\nsnapshotted values returned by the stat() call.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"accessed":{"name":"accessed","qualifiedName":"dart-io.FileStat.accessed","comment":"<p>The time of the last access to the data of the file system\nobject.  On Windows platforms, this may have 1 day granularity, and be\nout of date by an hour.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"annotations":[]},"changed":{"name":"changed","qualifiedName":"dart-io.FileStat.changed","comment":"<p>The time of the last change to the data or metadata of the file system\nobject.  On Windows platforms, this is instead the file creation time.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"annotations":[]},"mode":{"name":"mode","qualifiedName":"dart-io.FileStat.mode","comment":"<p>The mode of the file system object.  Permissions are encoded in the lower\n16 bits of this number, and can be decoded using the <a>dart-io.FileStat.modeString</a> getter.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"modified":{"name":"modified","qualifiedName":"dart-io.FileStat.modified","comment":"<p>The time of the last change to the data of the file system\nobject.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"annotations":[]},"size":{"name":"size","qualifiedName":"dart-io.FileStat.size","comment":"<p>The size of the file system object.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"type":{"name":"type","qualifiedName":"dart-io.FileStat.type","comment":"<p>The type of the object (file, directory, or link).  If the call to\nstat() fails, the type of the returned object is NOT_FOUND.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-io.FileSystemEntityType","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"modeString":{"name":"modeString","qualifiedName":"dart-io.FileStat.modeString","comment":"<p>Returns the mode value as a human-readable string, in the format\n\"rwxrwxrwx\", reflecting the user, group, and world permissions to\nread, write, and execute the file system object, with \"-\" replacing the\nletter for missing permissions.  Extra permission bits may be represented\nby prepending \"(suid)\", \"(guid)\", and/or \"(sticky)\" to the mode string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"stat":{"name":"stat","qualifiedName":"dart-io.FileStat.stat","comment":"<p>Asynchronously calls the operating system's stat() function on <a>dart-io.FileStat.stat.path</a>.\nReturns a Future which completes with a <a>dart-io.FileStat</a> object containing\nthe data returned by stat().\nIf the call fails, completes the future with a <a>dart-io.FileStat</a> object with\n.type set to FileSystemEntityType.NOT_FOUND and the other fields invalid.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.FileStat","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"statSync":{"name":"statSync","qualifiedName":"dart-io.FileStat.statSync","comment":"<p>Calls the operating system's stat() function on <a>dart-io.FileStat.statSync.path</a>.\nReturns a <a>dart-io.FileStat</a> object containing the data returned by stat().\nIf the call fails, returns a <a>dart-io.FileStat</a> object with .type set to\nFileSystemEntityType.NOT_FOUND and the other fields invalid.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-io.FileStat","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.FileStat.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.FileStat.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.FileStat.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.FileStat.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.FileStat.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.FileStat.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.FileStat.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.FileStat.noSuchMethod","comment":"<p><a>dart-io.FileStat.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.FileStat.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.FileStat.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.FileStat.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.FileStat.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}