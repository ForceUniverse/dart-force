{"name":"WindowBase","qualifiedName":"dart-dom-html.WindowBase","comment":"<p>Top-level container for a browser tab or window.</p>\n<p>In a web browser, a <a>dart-dom-html.WindowBase</a> object represents any browser window. This\nobject contains the window's state and its relation to other\nwindows, such as which window opened this window.</p>\n<p><strong>Note:</strong> This class represents any window, while <a>dart-dom-html.Window</a> is\nused to access the properties and content of the current window or tab.</p>\n<h2>See also</h2><ul><li><a>dart-dom-html.Window</a></li></ul>\n<h2>Other resources</h2><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/window\">DOM Window</a> from MDN.</li><li><a href=\"http://www.w3.org/TR/Window/\">Window</a> from the W3C.</li></ul>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-dom-html.EventTarget"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"closed":{"name":"closed","qualifiedName":"dart-dom-html.WindowBase.closed","comment":"<p>Indicates whether this window has been closed.</p>\n<pre><code>print(window.closed); // 'false'\nwindow.close();\nprint(window.closed); // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"history":{"name":"history","qualifiedName":"dart-dom-html.WindowBase.history","comment":"<p>The current session history for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html\">Session history and navigation specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.HistoryBase","inner":[]}],"parameters":{},"annotations":[]},"location":{"name":"location","qualifiedName":"dart-dom-html.WindowBase.location","comment":"<p>The current location of this window.</p>\n<pre><code>Location currentLocation = window.location;\nprint(currentLocation.href); // 'http://www.example.com:80/'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.LocationBase","inner":[]}],"parameters":{},"annotations":[]},"opener":{"name":"opener","qualifiedName":"dart-dom-html.WindowBase.opener","comment":"<p>A reference to the window that opened this one.</p>\n<pre><code>Window thisWindow = window;\nWindowBase otherWindow = thisWindow.open('http://www.example.com/', 'foo');\nprint(otherWindow.opener == thisWindow); // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.WindowBase","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"dart-dom-html.WindowBase.parent","comment":"<p>A reference to the parent of this window.</p>\n<p>If this <a>dart-dom-html.WindowBase</a> has no parent, <a>dart-dom-html.WindowBase.parent</a> will return a reference to\nthe <a>dart-dom-html.WindowBase</a> itself.</p>\n<pre><code>IFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\nprint(myIframe.contentWindow.parent == window) // 'true'\n\nprint(window.parent == window) // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.WindowBase","inner":[]}],"parameters":{},"annotations":[]},"top":{"name":"top","qualifiedName":"dart-dom-html.WindowBase.top","comment":"<p>A reference to the topmost window in the window hierarchy.</p>\n<p>If this <a>dart-dom-html.WindowBase</a> is the topmost <a>dart-dom-html.WindowBase</a>, <a>dart-dom-html.WindowBase.top</a> will return a\nreference to the <a>dart-dom-html.WindowBase</a> itself.</p>\n<pre><code>// Add an IFrame to the current window.\nIFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\n\n// Add an IFrame inside of the other IFrame.\nIFrameElement innerIFrame = new IFrameElement();\nmyIFrame.elements.add(innerIFrame);\n\nprint(myIframe.contentWindow.top == window) // 'true'\nprint(innerIFrame.contentWindow.top == window) // 'true'\n\nprint(window.top == window) // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.WindowBase","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"close":{"name":"close","qualifiedName":"dart-dom-html.WindowBase.close","comment":"<p>Closes the window.</p>\n<p>This method should only succeed if the <a>dart-dom-html.WindowBase</a> object is\n<strong>script-closeable</strong> and the window calling <a>dart-dom-html.WindowBase.close</a> is allowed to navigate\nthe window.</p>\n<p>A window is script-closeable if it is either a window\nthat was opened by another window, or if it is a window with only one\ndocument in its history.</p>\n<p>A window might not be allowed to navigate, and therefore close, another\nwindow due to browser security features.</p>\n<pre><code>var other = window.open('http://www.example.com', 'foo');\n// Closes other window, as it is script-closeable.\nother.close();\nprint(other.closed()); // 'true'\n\nwindow.location('http://www.mysite.com', 'foo');\n// Does not close this window, as the history has changed.\nwindow.close();\nprint(window.closed()); // 'false'\n</code></pre>\n<p>See also:</p><ul><li><a href=\"http://www.w3.org/TR/html5/browsers.html#dom-window-close\">Window close discussion</a> from the W3C</li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"postMessage":{"name":"postMessage","qualifiedName":"dart-dom-html.WindowBase.postMessage","comment":"<p>Sends a cross-origin message.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage\">window.postMessage</a> from\nMDN.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html\">Cross-document messaging</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"targetOrigin":{"name":"targetOrigin","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"messagePorts":{"name":"messagePorts","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.WindowBase.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.WindowBase.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-dom-html.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"dart-dom-html.WindowBase.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.WindowBase.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"dart-dom-html.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.WindowBase.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.WindowBase.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.WindowBase.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-dom-html.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addEventListener":{"name":"addEventListener","qualifiedName":"dart-dom-html.WindowBase.addEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.addEventListener'"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"dart-dom-html.WindowBase.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.dispatchEvent'"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.WindowBase.noSuchMethod","comment":"<p><a>dart-dom-html.WindowBase.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.WindowBase.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.WindowBase.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.WindowBase.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"dart-dom-html.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"dart-dom-html.WindowBase.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.removeEventListener'"]}]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.WindowBase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-dom-html.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}