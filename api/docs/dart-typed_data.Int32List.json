{"name":"Int32List","qualifiedName":"dart-typed_data.Int32List","comment":"<p>A fixed-length list of 32-bit signed integers that is viewable as a\n<a>dart-typed_data.TypedData</a>. For long lists, this implementation can be considerably\nmore space- and time-efficient than the default <a>dart-core.List</a> implementation.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-core.List","dart-typed_data.TypedData"],"subclass":[],"variables":{"BYTES_PER_ELEMENT":{"name":"BYTES_PER_ELEMENT","qualifiedName":"dart-typed_data.Int32List.BYTES_PER_ELEMENT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-typed_data.Int32List.Int32List-","comment":"<p>Creates an <a>dart-typed_data.Int32List</a> of the specified length (in elements), all of\nwhose elements are initially zero.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Int32List","inner":[]}],"parameters":{"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromList":{"name":"fromList","qualifiedName":"dart-typed_data.Int32List.Int32List-fromList","comment":"<p>Creates a <a>dart-typed_data.Int32List</a> with the same size as the <a>dart-typed_data.Int32List.Int32List-fromList.elements</a> list\nand copies over the elements.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Int32List","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"view":{"name":"view","qualifiedName":"dart-typed_data.Int32List.Int32List-view","comment":"<p>Creates an <a>dart-typed_data.Int32List</a> <em>view</em> of the specified region in the specified\nbyte buffer. Changes in the <a>dart-typed_data.Int32List</a> will be visible in the byte\nbuffer and vice versa. If the <a>dart-typed_data.Int32List.Int32List-view.offsetInBytes</a> index of the region is not\nspecified, it defaults to zero (the first byte in the byte buffer).\nIf the length is not specified, it defaults to null, which indicates\nthat the view extends to the end of the byte buffer.</p>\n<p>Throws <a>dart-core.RangeError</a> if <a>dart-typed_data.Int32List.Int32List-view.offsetInBytes</a> or <a>dart-typed_data.Int32List.Int32List-view.length</a> are negative, or\nif <a>dart-typed_data.Int32List.Int32List-view.offsetInBytes</a> + (<a>dart-typed_data.Int32List.Int32List-view.length</a> * elementSizeInBytes) is greater than\nthe length of <a>dart-typed_data.Int32List.Int32List-view.buffer</a>.</p>\n<p>Throws <a>dart-core.ArgumentError</a> if <a>dart-typed_data.Int32List.Int32List-view.offsetInBytes</a> is not a multiple of\nBYTES<em>PER</em>ELEMENT.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Int32List","inner":[]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.ByteBuffer","inner":[]}],"value":null,"annotations":[]},"offsetInBytes":{"name":"offsetInBytes","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"length=":{"name":"length=","qualifiedName":"dart-typed_data.Int32List.length=","comment":"<p>Changes the length of this list.</p>\n<p>If <a>dart-typed_data.Int32List.length=.newLength</a> is greater than\nthe current length, entries are initialized to <code>null</code>.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if the list is fixed-length.</p>","commentFrom":"","inheritedFrom":"dart-core.List.length=","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newLength":{"name":"newLength","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"buffer":{"name":"buffer","qualifiedName":"dart-typed_data.Int32List.buffer","comment":"<p>Returns the byte buffer associated with this object.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.buffer","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-typed_data.ByteBuffer","inner":[]}],"parameters":{},"annotations":[]},"elementSizeInBytes":{"name":"elementSizeInBytes","qualifiedName":"dart-typed_data.Int32List.elementSizeInBytes","comment":"<p>Returns the number of bytes in the representation of each element in this\nlist.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.elementSizeInBytes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"first":{"name":"first","qualifiedName":"dart-typed_data.Int32List.first","comment":"<p>Returns the first element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>. Otherwise this method is\nequivalent to <code>this.elementAt(0)</code></p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.first","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-typed_data.Int32List.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-typed_data.Int32List.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-typed_data.Int32List.isEmpty","comment":"<p>Returns true if there is no element in this collection.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.isEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-typed_data.Int32List.isNotEmpty","comment":"<p>Returns true if there is at least one element in this collection.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.isNotEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"dart-typed_data.Int32List.iterator","comment":"<p>Returns an Iterator that iterates over this Iterable object.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.iterator","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-typed_data.Int32List.last","comment":"<p>Returns the last element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.last","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-typed_data.Int32List.length","comment":"<p>Returns the number of objects in this list.</p>\n<p>The valid indices for a list are <code>0</code> through <code>length - 1</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.List.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"lengthInBytes":{"name":"lengthInBytes","qualifiedName":"dart-typed_data.Int32List.lengthInBytes","comment":"<p>Returns the length of this view, in bytes.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.lengthInBytes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"offsetInBytes":{"name":"offsetInBytes","qualifiedName":"dart-typed_data.Int32List.offsetInBytes","comment":"<p>Returns the offset in bytes into the underlying byte buffer of this view.</p>","commentFrom":"","inheritedFrom":"dart-typed_data.TypedData.offsetInBytes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"reversed":{"name":"reversed","qualifiedName":"dart-typed_data.Int32List.reversed","comment":"<p>Returns an <a>dart-core.Iterable</a> of the objects in this list in reverse order.</p>","commentFrom":"","inheritedFrom":"dart-core.List.reversed","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-typed_data.Int32List.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-typed_data.Int32List.single","comment":"<p>Returns the single element in <code>this</code>.</p>\n<p>If <code>this</code> is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.single","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-typed_data.Int32List.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-typed_data.Int32List.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-typed_data.Int32List.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"dart-typed_data.Int32List.[]","comment":"<p>Returns the object at the given <a>dart-typed_data.Int32List.[].index</a> in the list\nor throws a <a>dart-core.RangeError</a> if <a>dart-typed_data.Int32List.[].index</a> is out of bounds.</p>","commentFrom":"","inheritedFrom":"dart-core.List.[]","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"dart-typed_data.Int32List.[]=","comment":"<p>Sets the value at the given <a>dart-typed_data.Int32List.[]=.index</a> in the list to <a>dart-typed_data.Int32List.[]=.value</a>\nor throws a <a>dart-core.RangeError</a> if <a>dart-typed_data.Int32List.[]=.index</a> is out of bounds.</p>","commentFrom":"","inheritedFrom":"dart-core.List.[]=","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"dart-typed_data.Int32List.add","comment":"<p>Adds <a>dart-typed_data.Int32List.add.value</a> to the end of this list,\nextending the length by one.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if the list is fixed-length.</p>","commentFrom":"","inheritedFrom":"dart-core.List.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"dart-typed_data.Int32List.addAll","comment":"<p>Appends all objects of <a>dart-typed_data.Int32List.addAll.iterable</a> to the end of this list.</p>\n<p>Extends the length of the list by the number of objects in <a>dart-typed_data.Int32List.addAll.iterable</a>.\nThrows an <a>dart-core.UnsupportedError</a> if this list is fixed-length.</p>","commentFrom":"","inheritedFrom":"dart-core.List.addAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"dart-typed_data.Int32List.any","comment":"<p>Returns true if one element of this collection satisfies the\npredicate <a>dart-typed_data.Int32List.any.test</a>. Returns false otherwise.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.any","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asMap":{"name":"asMap","qualifiedName":"dart-typed_data.Int32List.asMap","comment":"<p>Returns an unmodifiable <a>dart-core.Map</a> view of <code>this</code>.</p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys</code> <a>dart-core.Iterable</a> iterates the indices of this list\nin numerical order.</p>\n<pre><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   // 'feefi';\nmap.keys.toList(); // [0, 1, 2, 3]\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.List.asMap","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"dart-core.List.E","inner":[]}]}],"parameters":{},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-typed_data.Int32List.clear","comment":"<p>Removes all objects from this list;\nthe length of the list becomes zero.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a>, and retains all objects, if this\nis a fixed-length list.</p>","commentFrom":"","inheritedFrom":"dart-core.List.clear","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-typed_data.Int32List.contains","comment":"<p>Returns true if the collection contains an element equal to <a>dart-typed_data.Int32List.contains.element</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.contains","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"dart-typed_data.Int32List.elementAt","comment":"<p>Returns the <a>dart-typed_data.Int32List.elementAt.index</a>th element.</p>\n<p>The <a>dart-typed_data.Int32List.elementAt.index</a> must be non-negative and less than <a>dart-typed_data.Int32List.length</a>.</p>\n<p>Note: if <code>this</code> does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least <a>dart-typed_data.Int32List.elementAt.index</a> elements in <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.elementAt","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"dart-typed_data.Int32List.every","comment":"<p>Returns true if every elements of this collection satisify the\npredicate <a>dart-typed_data.Int32List.every.test</a>. Returns <code>false</code> otherwise.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.every","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"dart-typed_data.Int32List.expand","comment":"<p>Expands each element of this <a>dart-core.Iterable</a> into zero or more elements.</p>\n<p>The resulting Iterable runs through the elements returned\nby <a>dart-typed_data.Int32List.expand.f</a> for each element of this, in order.</p>\n<p>The returned <a>dart-core.Iterable</a> is lazy, and calls <a>dart-typed_data.Int32List.expand.f</a> for each element\nof this every time it's iterated.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.expand","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"fillRange":{"name":"fillRange","qualifiedName":"dart-typed_data.Int32List.fillRange","comment":"<p>Sets the objects in the range <a>dart-typed_data.Int32List.fillRange.start</a> inclusive to <a>dart-typed_data.Int32List.fillRange.end</a> exclusive\nto the given <a>dart-typed_data.Int32List.fillRange.fillValue</a>.</p>\n<p>An error occurs if <a>dart-typed_data.Int32List.fillRange.start</a>..<a>dart-typed_data.Int32List.fillRange.end</a> is not a valid range for <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.List.fillRange","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"fillValue":{"name":"fillValue","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"dart-typed_data.Int32List.firstWhere","comment":"<p>Returns the first element that satisfies the given predicate <a>dart-typed_data.Int32List.firstWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>dart-typed_data.Int32List.firstWhere.orElse</a> function is\nreturned. By default, when <a>dart-typed_data.Int32List.firstWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.firstWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"dart-typed_data.Int32List.fold","comment":"<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.</p>\n<p>Use <a>dart-typed_data.Int32List.fold.initialValue</a> as the initial value, and the function <a>dart-typed_data.Int32List.fold.combine</a> to\ncreate a new value from the previous one and an element.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.Iterable.fold","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-typed_data.Int32List.forEach","comment":"<p>Applies the function <a>dart-typed_data.Int32List.forEach.f</a> to each element of this collection.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.forEach","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"getRange":{"name":"getRange","qualifiedName":"dart-typed_data.Int32List.getRange","comment":"<p>Returns an <a>dart-core.Iterable</a> that iterates over the objects in the range\n<a>dart-typed_data.Int32List.getRange.start</a> inclusive to <a>dart-typed_data.Int32List.getRange.end</a> exclusive.</p>\n<p>An error occurs if <a>dart-typed_data.Int32List.getRange.end</a> is before <a>dart-typed_data.Int32List.getRange.start</a>.</p>\n<p>An error occurs if the <a>dart-typed_data.Int32List.getRange.start</a> and <a>dart-typed_data.Int32List.getRange.end</a> are not valid ranges at the time\nof the call to this method. The returned <a>dart-core.Iterable</a> behaves like\n<code>skip(start).take(end - start)</code>. That is, it does not throw exceptions\nif <code>this</code> changes size.</p>\n<pre><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  // 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  // 'green, blue'\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.List.getRange","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"indexOf":{"name":"indexOf","qualifiedName":"dart-typed_data.Int32List.indexOf","comment":"<p>Returns the first index of <a>dart-typed_data.Int32List.indexOf.element</a> in this list.</p>\n<p>Searches the list from index <a>dart-typed_data.Int32List.indexOf.start</a> to the end of the list.\nThe first time an object <code>o</code> is encountered so that <code>o == element</code>,\nthe index of <code>o</code> is returned.</p>\n<pre><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    // 1\nnotes.indexOf('re', 2); // 3\n</code></pre>\n<p>Returns -1 if <a>dart-typed_data.Int32List.indexOf.element</a> is not found.</p>\n<pre><code>notes.indexOf('fa');    // -1\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.List.indexOf","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"insert":{"name":"insert","qualifiedName":"dart-typed_data.Int32List.insert","comment":"<p>Inserts the object at position <a>dart-typed_data.Int32List.insert.index</a> in this list.</p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.</p>\n<p>An error occurs if the <a>dart-typed_data.Int32List.insert.index</a> is less than 0 or greater than length.\nAn <a>dart-core.UnsupportedError</a> occurs if the list is fixed-length.</p>","commentFrom":"","inheritedFrom":"dart-core.List.insert","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertAll":{"name":"insertAll","qualifiedName":"dart-typed_data.Int32List.insertAll","comment":"<p>Inserts all objects of <a>dart-typed_data.Int32List.insertAll.iterable</a> at position <a>dart-typed_data.Int32List.insertAll.index</a> in this list.</p>\n<p>This increases the length of the list by the length of <a>dart-typed_data.Int32List.insertAll.iterable</a> and\nshifts all later objects towards the end of the list.</p>\n<p>An error occurs if the <a>dart-typed_data.Int32List.insertAll.index</a> is less than 0 or greater than length.\nAn <a>dart-core.UnsupportedError</a> occurs if the list is fixed-length.</p>","commentFrom":"","inheritedFrom":"dart-core.List.insertAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"dart-typed_data.Int32List.join","comment":"<p>Converts each element to a <a>dart-core.String</a> and concatenates the strings.</p>\n<p>Converts each element to a <a>dart-core.String</a> by calling <a>dart-typed_data.Int32List.toString</a> on it.\nThen concatenates the strings, optionally separated by the <a>dart-typed_data.Int32List.join.separator</a>\nstring.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastIndexOf":{"name":"lastIndexOf","qualifiedName":"dart-typed_data.Int32List.lastIndexOf","comment":"<p>Returns the last index of <a>dart-typed_data.Int32List.lastIndexOf.element</a> in this list.</p>\n<p>Searches the list backwards from index <a>dart-typed_data.Int32List.lastIndexOf.start</a> to 0.</p>\n<p>The first time an object <code>o</code> is encountered so that <code>o == element</code>,\nthe index of <code>o</code> is returned.</p>\n<pre><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); // 1\n</code></pre>\n<p>If <a>dart-typed_data.Int32List.lastIndexOf.start</a> is not provided, this method searches from the end of the\nlist./Returns</p>\n<pre><code>notes.lastIndexOf('re');  // 3\n</code></pre>\n<p>Returns -1 if <a>dart-typed_data.Int32List.lastIndexOf.element</a> is not found.</p>\n<pre><code>notes.lastIndexOf('fa');  // -1\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.List.lastIndexOf","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"dart-typed_data.Int32List.lastWhere","comment":"<p>Returns the last element that satisfies the given predicate <a>dart-typed_data.Int32List.lastWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>dart-typed_data.Int32List.lastWhere.orElse</a> function is\nreturned. By default, when <a>dart-typed_data.Int32List.lastWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.lastWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{}}}},"annotations":[]},"map":{"name":"map","qualifiedName":"dart-typed_data.Int32List.map","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> where each element <code>e</code> of <code>this</code> is replaced\nby the result of <code>f(e)</code>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>dart-typed_data.Int32List.map.f</a> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>dart-typed_data.Int32List.map.f</a> multiple times on the same element.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.map","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-typed_data.Int32List.noSuchMethod","comment":"<p><a>dart-typed_data.Int32List.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-typed_data.Int32List.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-typed_data.Int32List.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-typed_data.Int32List.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"dart-typed_data.Int32List.reduce","comment":"<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.reduce((value, element) =&gt; value + element);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.Iterable.reduce","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-typed_data.Int32List.remove","comment":"<p>Removes the first occurence of <a>dart-typed_data.Int32List.remove.value</a> from this list.</p>\n<p>Returns true if <a>dart-typed_data.Int32List.remove.value</a> was in the list, false otherwise.</p>\n<pre><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); // true\nparts.join(', ');     // 'shoulders, knees, toes'\n</code></pre>\n<p>The method has no effect if <a>dart-typed_data.Int32List.remove.value</a> was not in the list.</p>\n<pre><code>// Note: 'head' has already been removed.\nparts.remove('head'); // false\nparts.join(', ');     // 'shoulders, knees, toes'\n</code></pre>\n<p>An <a>dart-core.UnsupportedError</a> occurs if the list is fixed-length.</p>","commentFrom":"","inheritedFrom":"dart-core.List.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAt":{"name":"removeAt","qualifiedName":"dart-typed_data.Int32List.removeAt","comment":"<p>Removes the object at position <a>dart-typed_data.Int32List.removeAt.index</a> from this list.</p>\n<p>This method reduces the length of <code>this</code> by one and moves all later objects\ndown by one position.</p>\n<p>Returns the removed object.</p>\n<p>The <a>dart-typed_data.Int32List.removeAt.index</a> must be in the range <code>0 ≤ index &lt; length</code>.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list. In that case\nthe list is not modified.</p>","commentFrom":"","inheritedFrom":"dart-core.List.removeAt","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeLast":{"name":"removeLast","qualifiedName":"dart-typed_data.Int32List.removeLast","comment":"<p>Pops and returns the last object in this list.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list.</p>","commentFrom":"","inheritedFrom":"dart-core.List.removeLast","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List.E","inner":[]}],"parameters":{},"annotations":[]},"removeRange":{"name":"removeRange","qualifiedName":"dart-typed_data.Int32List.removeRange","comment":"<p>Removes the objects in the range <a>dart-typed_data.Int32List.removeRange.start</a> inclusive to <a>dart-typed_data.Int32List.removeRange.end</a> exclusive.</p>\n<p>The <a>dart-typed_data.Int32List.removeRange.start</a> and <a>dart-typed_data.Int32List.removeRange.end</a> indices must be in the range\n<code>0 ≤ index ≤ length</code>, and <code>start ≤ end</code>.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list. In that case\nthe list is not modified.</p>","commentFrom":"","inheritedFrom":"dart-core.List.removeRange","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeWhere":{"name":"removeWhere","qualifiedName":"dart-typed_data.Int32List.removeWhere","comment":"<p>Removes all objects from this list that satisfy <a>dart-typed_data.Int32List.removeWhere.test</a>.</p>\n<p>An object <code>o</code> satisfies <a>dart-typed_data.Int32List.removeWhere.test</a> if <code>test(o)</code> is true.</p>\n<pre><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); // 'three, four'\n</code></pre>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list.</p>","commentFrom":"","inheritedFrom":"dart-core.List.removeWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"replaceRange":{"name":"replaceRange","qualifiedName":"dart-typed_data.Int32List.replaceRange","comment":"<p>Removes the objects in the range <a>dart-typed_data.Int32List.replaceRange.start</a> inclusive to <a>dart-typed_data.Int32List.replaceRange.end</a> exclusive\nand inserts the contents of <a>dart-typed_data.Int32List.replaceRange.replacement</a> in its place.</p>\n<pre><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); // '1, 6, 7, 5'\n</code></pre>\n<p>An error occurs if <a>dart-typed_data.Int32List.replaceRange.start</a>..<a>dart-typed_data.Int32List.replaceRange.end</a> is not a valid range for <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.List.replaceRange","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"replacement":{"name":"replacement","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainWhere":{"name":"retainWhere","qualifiedName":"dart-typed_data.Int32List.retainWhere","comment":"<p>Removes all objects from this list that fail to satisfy <a>dart-typed_data.Int32List.retainWhere.test</a>.</p>\n<p>An object <code>o</code> satisfies <a>dart-typed_data.Int32List.retainWhere.test</a> if <code>test(o)</code> is true.</p>\n<pre><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); // 'one, two'\n</code></pre>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list.</p>","commentFrom":"","inheritedFrom":"dart-core.List.retainWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"setAll":{"name":"setAll","qualifiedName":"dart-typed_data.Int32List.setAll","comment":"<p>Overwrites objects of <code>this</code> with the objects of <a>dart-typed_data.Int32List.setAll.iterable</a>, starting\nat position <a>dart-typed_data.Int32List.setAll.index</a> in this list.</p>\n<pre><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); // 'a, bee, sea'\n</code></pre>\n<p>This operation does not increase the length of <code>this</code>.</p>\n<p>The <a>dart-typed_data.Int32List.setAll.index</a> must be non-negative and no greater than <a>dart-typed_data.Int32List.length</a>.</p>\n<p>The <a>dart-typed_data.Int32List.setAll.iterable</a> must not have more elements than what can fit from <a>dart-typed_data.Int32List.setAll.index</a>\nto <a>dart-typed_data.Int32List.length</a>.</p>\n<p>If <code>iterable</code> is based on this list, its values may change /during/ the\n<code>setAll</code> operation.</p>","commentFrom":"","inheritedFrom":"dart-core.List.setAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"setRange":{"name":"setRange","qualifiedName":"dart-typed_data.Int32List.setRange","comment":"<p>Copies the objects of <a>dart-typed_data.Int32List.setRange.iterable</a>, skipping <a>dart-typed_data.Int32List.setRange.skipCount</a> objects first,\ninto the range <a>dart-typed_data.Int32List.setRange.start</a>, inclusive, to <a>dart-typed_data.Int32List.setRange.end</a>, exclusive, of the list.</p>\n<pre><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n// Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n// of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); // '1, 8, 9, 4'\n</code></pre>\n<p>The <a>dart-typed_data.Int32List.setRange.start</a> and <a>dart-typed_data.Int32List.setRange.end</a> indices must satisfy <code>0 ≤ start ≤ end ≤ length</code>.\nIf <a>dart-typed_data.Int32List.setRange.start</a> equals <a>dart-typed_data.Int32List.setRange.end</a>, this method has no effect.</p>\n<p>The <a>dart-typed_data.Int32List.setRange.iterable</a> must have enough objects to fill the range from <code>start</code>\nto <code>end</code> after skipping <a>dart-typed_data.Int32List.setRange.skipCount</a> objects.</p>\n<p>If <code>iterable</code> is this list, the operation will copy the elements originally\nin the range from <code>skipCount</code> to <code>skipCount + (end - start)</code> to the\nrange <code>start</code> to <code>end</code>, even if the two ranges overlap.</p>\n<p>If <code>iterable</code> depends on this list in some other way, no guarantees are\nmade.</p>","commentFrom":"","inheritedFrom":"dart-core.List.setRange","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"value":null,"annotations":[]},"skipCount":{"name":"skipCount","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"shuffle":{"name":"shuffle","qualifiedName":"dart-typed_data.Int32List.shuffle","comment":"<p>Shuffles the elements of this list randomly.</p>","commentFrom":"","inheritedFrom":"dart-core.List.shuffle","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"random":{"name":"random","optional":true,"named":false,"default":false,"type":[{"outer":"dart-math.Random","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"dart-typed_data.Int32List.singleWhere","comment":"<p>Returns the single element that satisfies <a>dart-typed_data.Int32List.singleWhere.test</a>. If no or more than one\nelement match then a <a>dart-core.StateError</a> is thrown.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.singleWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable.E","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"dart-typed_data.Int32List.skip","comment":"<p>Returns an Iterable that skips the first <a>dart-typed_data.Int32List.skip.n</a> elements.</p>\n<p>If <code>this</code> has fewer than <a>dart-typed_data.Int32List.skip.n</a> elements, then the resulting Iterable is\nempty.</p>\n<p>It is an error if <a>dart-typed_data.Int32List.skip.n</a> is negative.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.skip","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"dart-typed_data.Int32List.skipWhile","comment":"<p>Returns an Iterable that skips elements while <a>dart-typed_data.Int32List.skipWhile.test</a> is satisfied.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of <code>this</code>.</p>\n<p>As long as the iterator's elements satisfy <a>dart-typed_data.Int32List.skipWhile.test</a> they are\ndiscarded. Once an element does not satisfy the <a>dart-typed_data.Int32List.skipWhile.test</a> the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of <code>this</code> starting from the\nfirst element that does not satisfy <a>dart-typed_data.Int32List.skipWhile.test</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.skipWhile","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"sort":{"name":"sort","qualifiedName":"dart-typed_data.Int32List.sort","comment":"<p>Sorts this list according to the order specified by the <a>dart-typed_data.Int32List.sort.compare</a> function.</p>\n<p>The <a>dart-typed_data.Int32List.sort.compare</a> function must act as a <a>dart-core.Comparator</a>.</p>\n<pre><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\n// Sort from shortest to longest.\nnumbers.sort((x, y) =&gt; x.length.compareTo(y.length));\nnumbers.join(', '); // 'one, two, four, three'\n</code></pre>\n<p>The default List implementations use <a>dart-core.Comparable.compare</a> if\n<a>dart-typed_data.Int32List.sort.compare</a> is omitted.</p>\n<pre><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\n     nums.join(', '); // '-11, 2, 13'\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.List.sort","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"compare":{"name":"compare","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"sublist":{"name":"sublist","qualifiedName":"dart-typed_data.Int32List.sublist","comment":"<p>Returns a new list containing the objects from <a>dart-typed_data.Int32List.sublist.start</a> inclusive to <a>dart-typed_data.Int32List.sublist.end</a>\nexclusive.</p>\n<pre><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\ncolors.sublist(1, 3); // ['green', 'blue']\n</code></pre>\n<p>If <a>dart-typed_data.Int32List.sublist.end</a> is omitted, the <a>dart-typed_data.Int32List.length</a> of <code>this</code> is used.</p>\n<pre><code>colors.sublist(1);  // ['green', 'blue', 'orange', 'pink']\n</code></pre>\n<p>An error occurs if <a>dart-typed_data.Int32List.sublist.start</a> is outside the range <code>0</code> .. <code>length</code> or if\n<a>dart-typed_data.Int32List.sublist.end</a> is outside the range <code>start</code> .. <code>length</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.List.sublist","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.List.E","inner":[]}]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"take":{"name":"take","qualifiedName":"dart-typed_data.Int32List.take","comment":"<p>Returns an <a>dart-core.Iterable</a> with at most <a>dart-typed_data.Int32List.take.n</a> elements.</p>\n<p>The returned <a>dart-core.Iterable</a> may contain fewer than <a>dart-typed_data.Int32List.take.n</a> elements, if <code>this</code>\ncontains fewer than <a>dart-typed_data.Int32List.take.n</a> elements.</p>\n<p>It is an error if <a>dart-typed_data.Int32List.take.n</a> is negative.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.take","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"dart-typed_data.Int32List.takeWhile","comment":"<p>Returns an Iterable that stops once <a>dart-typed_data.Int32List.takeWhile.test</a> is not satisfied anymore.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of <code>this</code>.</p>\n<p>When the iterator encounters an element <code>e</code> that does not satisfy <a>dart-typed_data.Int32List.takeWhile.test</a>,\nit discards <code>e</code> and moves into the finished state. That is, it does not\nget or provide any more elements.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.takeWhile","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"dart-typed_data.Int32List.toList","comment":"<p>Creates a <a>dart-core.List</a> containing the elements of this <a>dart-core.Iterable</a>.</p>\n<p>The elements are in iteration order. The list is fixed-length\nif <a>dart-typed_data.Int32List.toList.growable</a> is false.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.toList","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-typed_data.Int32List.toSet","comment":"<p>Creates a <a>dart-core.Set</a> containing the elements of this <a>dart-core.Iterable</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.toSet","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-typed_data.Int32List.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"where":{"name":"where","qualifiedName":"dart-typed_data.Int32List.where","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> with all elements that satisfy the\npredicate <a>dart-typed_data.Int32List.where.test</a>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>dart-typed_data.Int32List.where.test</a> will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>dart-typed_data.Int32List.where.test</a> multiple times on the same element.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.where","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{}}