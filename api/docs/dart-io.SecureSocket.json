{"name":"SecureSocket","qualifiedName":"dart-io.SecureSocket","comment":"<p>A high-level class for communicating securely over a TCP socket, using\nTLS and SSL. The <a>dart-io.SecureSocket</a> exposes both a <a>dart-async.Stream</a> and an\n<a>dart-io.IOSink</a> interface, making it ideal for using together with\nother <a>dart-async.Stream</a>s.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-io.Socket"],"subclass":[],"variables":{},"inheritedVariables":{"encoding":{"name":"encoding","qualifiedName":"dart-io.IOSink.encoding","comment":"<p>The <a>dart-convert.Encoding</a> used when writing strings. Depending on the\nunderlying consumer this property might be mutable.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"peerCertificate":{"name":"peerCertificate","qualifiedName":"dart-io.SecureSocket.peerCertificate","comment":"<p>Get the peer certificate for a connected SecureSocket.  If this\nSecureSocket is the server end of a secure socket connection,\n<a>dart-io.SecureSocket.peerCertificate</a> will return the client certificate, or null, if no\nclient certificate was received.  If it is the client end,\n<a>dart-io.SecureSocket.peerCertificate</a> will return the server's certificate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.X509Certificate","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"connect":{"name":"connect","qualifiedName":"dart-io.SecureSocket.connect","comment":"<p>Constructs a new secure client socket and connect it to the given\n<a>dart-io.SecureSocket.connect.host</a> on port <a>dart-io.SecureSocket.connect.port</a>. The returned Future will complete with a\n<a>dart-io.SecureSocket</a> that is connected and ready for subscription.</p>\n<p>If <a>dart-io.SecureSocket.connect.sendClientCertificate</a> is set to true, the socket will send a client\ncertificate if one is requested by the server.</p>\n<p>If <a>dart-io.SecureSocket.connect.certificateName</a> is the nickname of a certificate in the certificate\ndatabase, that certificate will be sent.</p>\n<p>If <a>dart-io.SecureSocket.connect.certificateName</a> is null, which is the usual use case, an\nappropriate certificate will be searched for in the database and\nsent automatically, based on what the server says it will accept.</p>\n<p><a>dart-io.SecureSocket.connect.onBadCertificate</a> is an optional handler for unverifiable certificates.\nThe handler receives the <a>dart-io.X509Certificate</a>, and can inspect it and\ndecide (or let the user decide) whether to accept\nthe connection or not.  The handler should return true\nto continue the <a>dart-io.SecureSocket</a> connection.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.SecureSocket","inner":[]}]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"sendClientCertificate":{"name":"sendClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"certificateName":{"name":"certificateName","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"onBadCertificate":{"name":"onBadCertificate","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"certificate":{"name":"certificate","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.X509Certificate","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"initialize":{"name":"initialize","qualifiedName":"dart-io.SecureSocket.initialize","comment":"<p>Initializes the NSS library. If <a>dart-io.SecureSocket.initialize</a> is not called, the library\nis automatically initialized as if <a>dart-io.SecureSocket.initialize</a> were called with no\narguments. If <a>dart-io.SecureSocket.initialize</a> is called more than once, or called after\nautomatic initialization has happened (when a secure connection is made),\nthen a TlsException is thrown.</p>\n<p>The optional argument <a>dart-io.SecureSocket.initialize.database</a> is the path to a certificate database\ndirectory containing root certificates for verifying certificate paths on\nclient connections, and server certificates to provide on server\nconnections. The argument <a>dart-io.SecureSocket.initialize.password</a> should be used when creating\nsecure server sockets, to allow the private key of the server\ncertificate to be fetched. If <a>dart-io.SecureSocket.initialize.useBuiltinRoots</a> is true (the default),\nthen a built-in set of root certificates for trusted certificate\nauthorities is merged with the certificates in the database.\nThe list of built-in root certificates, and documentation about this\ndefault database, is available at\nhttp://www.mozilla.org/projects/security/certs/included/ .</p>\n<p>If the <a>dart-io.SecureSocket.initialize.database</a> argument is omitted, then only the\nbuiltin root certificates are used. If <a>dart-io.SecureSocket.initialize.useBuiltinRoots</a> is also false,\nthen no certificates are available.</p>\n<p>Examples:\n  1) Use only the builtin root certificates:</p>\n<pre><code>SecureSocket.initialize(); or\n</code></pre>\n<p>  2) Use a specified database directory and the builtin roots:</p>\n<pre><code>SecureSocket.initialize(database: 'path/to/my/database',\n                        password: 'my_password');\n</code></pre>\n<p>  3) Use a specified database directory, without builtin roots:</p>\n<pre><code>SecureSocket.initialize(database: 'path/to/my/database',\n                        password: 'my_password'.\n                        useBuiltinRoots: false);\n</code></pre>\n<p>The database should be an NSS certificate database directory\ncontaining a cert9.db file, not a cert8.db file.  This version of\nthe database can be created using the NSS certutil tool with \"sql:\" in\nfront of the absolute path of the database directory, or setting the\nenvironment variable [NSS_DEFAULT_DB_TYPE] to \"sql\".</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"database":{"name":"database","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"password":{"name":"password","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"useBuiltinRoots":{"name":"useBuiltinRoots","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"renegotiate":{"name":"renegotiate","qualifiedName":"dart-io.SecureSocket.renegotiate","comment":"<p>Renegotiate an existing secure connection, renewing the session keys\nand possibly changing the connection properties.</p>\n<p>This repeats the SSL or TLS handshake, with options that allow clearing\nthe session cache and requesting a client certificate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"useSessionCache":{"name":"useSessionCache","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"requestClientCertificate":{"name":"requestClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"requireClientCertificate":{"name":"requireClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"secure":{"name":"secure","qualifiedName":"dart-io.SecureSocket.secure","comment":"<p>Takes an already connected <a>dart-io.SecureSocket.secure.socket</a> and starts client side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a>dart-io.SecureSocket</a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is prepared for TLS handshake.</p>\n<p>If the <a>dart-io.SecureSocket.secure.socket</a> already has a subscription, this subscription\nwill no longer receive and events. In most cases calling\n<code>pause</code> on this subscription before starting TLS handshake is\nthe right thing to do.</p>\n<p>If the <a>dart-io.SecureSocket.secure.host</a> argument is passed it will be used as the host name\nfor the TLS handshake. If <a>dart-io.SecureSocket.secure.host</a> is not passed the host name from\nthe <a>dart-io.SecureSocket.secure.socket</a> will be used. The <a>dart-io.SecureSocket.secure.host</a> can be either a <a>dart-core.String</a> or\nan <a>dart-io.InternetAddress</a>.</p>\n<p>Calling this function will <em>not</em> cause a DNS host lookup. If the\n<a>dart-io.SecureSocket.secure.host</a> passed is a <a>dart-core.String</a> the <a>dart-io.InternetAddress</a> for the\nresulting <a>dart-io.SecureSocket</a> will have the passed in <a>dart-io.SecureSocket.secure.host</a> as its\nhost value and the internet address of the already connected\nsocket as its address value.</p>\n<p>See <a>dart-io.SecureSocket.connect</a> for more information on the arguments.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.SecureSocket","inner":[]}]}],"parameters":{"socket":{"name":"socket","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.Socket","inner":[]}],"value":null,"annotations":[]},"host":{"name":"host","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"sendClientCertificate":{"name":"sendClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"certificateName":{"name":"certificateName","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"onBadCertificate":{"name":"onBadCertificate","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"certificate":{"name":"certificate","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.X509Certificate","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"secureServer":{"name":"secureServer","qualifiedName":"dart-io.SecureSocket.secureServer","comment":"<p>Takes an already connected <a>dart-io.SecureSocket.secureServer.socket</a> and starts server side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a>dart-io.SecureSocket</a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is going to start the TLS handshake.</p>\n<p>If the <a>dart-io.SecureSocket.secureServer.socket</a> already has a subscription, this subscription\nwill no longer receive and events. In most cases calling\n<code>pause</code> on this subscription before starting TLS handshake is\nthe right thing to do.</p>\n<p>If some of the data of the TLS handshake has already been read\nfrom the socket this data can be passed in the <a>dart-io.SecureSocket.secureServer.bufferedData</a>\nparameter. This data will be processed before any other data\navailable on the socket.</p>\n<p>See <a>dart-io.SecureServerSocket.bind</a> for more information on the\narguments.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.SecureSocket","inner":[]}]}],"parameters":{"socket":{"name":"socket","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.Socket","inner":[]}],"value":null,"annotations":[]},"certificateName":{"name":"certificateName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"bufferedData":{"name":"bufferedData","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"requestClientCertificate":{"name":"requestClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"requireClientCertificate":{"name":"requireClientCertificate","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"address":{"name":"address","qualifiedName":"dart-io.SecureSocket.address","comment":"<p>Returns the <a>dart-io.InternetAddress</a> used to connect this socket.</p>","commentFrom":"","inheritedFrom":"dart-io.Socket.address","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"done":{"name":"done","qualifiedName":"dart-io.SecureSocket.done","comment":"<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a>dart-io.SecureSocket.close</a>.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.done","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"first":{"name":"first","qualifiedName":"dart-io.SecureSocket.first","comment":"<p>Returns the first element of the stream.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed\nand cannot be reused after a call to this getter.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>\n<p>Except for the type of the error, this method is equivalent to\n<code>this.elementAt(0)</code>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-io.SecureSocket.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.SecureSocket.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isBroadcast":{"name":"isBroadcast","qualifiedName":"dart-io.SecureSocket.isBroadcast","comment":"<p>Reports whether this stream is a broadcast stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.isBroadcast","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-io.SecureSocket.isEmpty","comment":"<p>Reports whether this stream contains any elements.</p>\n<p>Stops listening to the stream after the first element has been received.</p>\n<p>Internally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this getter.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-io.SecureSocket.last","comment":"<p>Returns the last element of the stream.</p>\n<p>If an error event occurs before the first data event, the resulting future\nis completed with that error.</p>\n<p>If this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-io.SecureSocket.length","comment":"<p>Counts the elements in the stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"port":{"name":"port","qualifiedName":"dart-io.SecureSocket.port","comment":"<p>Returns the port used by this socket.</p>","commentFrom":"","inheritedFrom":"dart-io.Socket.port","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"remoteAddress":{"name":"remoteAddress","qualifiedName":"dart-io.SecureSocket.remoteAddress","comment":"<p>Returns the remote <a>dart-io.InternetAddress</a> connected to by this socket.</p>","commentFrom":"","inheritedFrom":"dart-io.Socket.remoteAddress","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"remotePort":{"name":"remotePort","qualifiedName":"dart-io.SecureSocket.remotePort","comment":"<p>Returns the remote port connected to by this socket.</p>","commentFrom":"","inheritedFrom":"dart-io.Socket.remotePort","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.SecureSocket.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-io.SecureSocket.single","comment":"<p>Returns the single element.</p>\n<p>If an error event occurs before or after the first data event, the\nresulting future is completed with that error.</p>\n<p>If this is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.SecureSocket.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.SecureSocket.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.SecureSocket.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"dart-io.SecureSocket.add","comment":"<p>Adds <a>dart-io.SecureSocket.add.data</a> to the target consumer, ignoring <a>dart-io.IOSink.encoding</a>.</p>\n<p>The <a>dart-io.IOSink.encoding</a> does not apply to this method, and the <code>data</code> list is passed\ndirectly to the target consumer as a stream event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>dart-io.SecureSocket.addStream</a>.</p>\n<p>This operation is non-blocking. See <a>dart-io.SecureSocket.flush</a> or <a>dart-io.SecureSocket.done</a> for how to get any\nerrors generated by this call.</p>\n<p>The data list should not be modified after it has been passed to <code>add</code>.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"addError":{"name":"addError","qualifiedName":"dart-io.SecureSocket.addError","comment":"<p>Passes the error to the target consumer as an error event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>dart-io.SecureSocket.addStream</a>.</p>\n<p>This operation is non-blocking. See <a>dart-io.SecureSocket.flush</a> or <a>dart-io.SecureSocket.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.addError","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addStream":{"name":"addStream","qualifiedName":"dart-io.SecureSocket.addStream","comment":"<p>Adds all elements of the given <a>dart-io.SecureSocket.addStream.stream</a> to <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.addStream","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":null,"annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"dart-io.SecureSocket.any","comment":"<p>Checks whether <a>dart-io.SecureSocket.any.test</a> accepts any element provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.</p>\n<p>If this stream reports an error, the <a>dart-async.Future</a> reports that error.</p>\n<p>Stops listening to the stream after the first matching element has been\nfound.</p>\n<p>Internally the method cancels its subscription after this element. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asBroadcastStream":{"name":"asBroadcastStream","qualifiedName":"dart-io.SecureSocket.asBroadcastStream","comment":"<p>Returns a multi-subscription stream that produces the same events as this.</p>\n<p>If this stream is already a broadcast stream, it is returned unmodified.</p>\n<p>If this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.</p>\n<p>If <a>dart-io.SecureSocket.asBroadcastStream.onListen</a> is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto <a>dart-io.SecureSocket.asBroadcastStream.onListen</a>. It is not possible to change the event handlers, including\nusing <a>dart-async.StreamSubscription.asFuture</a>.</p>\n<p>If <a>dart-io.SecureSocket.asBroadcastStream.onCancel</a> is provided, it is called in a similar way to <a>dart-io.SecureSocket.asBroadcastStream.onListen</a>\nwhen the returned stream stops having listener. If it later gets\na new listener, the <a>dart-io.SecureSocket.asBroadcastStream.onListen</a> function is called again.</p>\n<p>Use the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asBroadcastStream","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onListen":{"name":"onListen","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}},"onCancel":{"name":"onCancel","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"subscription":{"name":"subscription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncExpand":{"name":"asyncExpand","qualifiedName":"dart-io.SecureSocket.asyncExpand","comment":"<p>Creates a new stream with the events of a stream per original event.</p>\n<p>This acts like <a>dart-io.SecureSocket.expand</a>, except that <a>dart-io.SecureSocket.asyncExpand.convert</a> returns a <a>dart-async.Stream</a>\ninstead of an <a>dart-core.Iterable</a>.\nThe events of the returned stream becomes the events of the returned\nstream, in the order they are produced.</p>\n<p>If <a>dart-io.SecureSocket.asyncExpand.convert</a> returns <code>null</code>, no value is put on the output stream,\njust as if it returned an empty stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asyncExpand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asyncMap":{"name":"asyncMap","qualifiedName":"dart-io.SecureSocket.asyncMap","comment":"<p>Creates a new stream with each data event of this stream asynchronously\nmapped to a new event.</p>\n<p>This acts like <a>dart-io.SecureSocket.map</a>, except that <a>dart-io.SecureSocket.asyncMap.convert</a> may return a <a>dart-async.Future</a>,\nand in that case, the stream waits for that future to complete before\ncontinuing with its result.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.asyncMap","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"close":{"name":"close","qualifiedName":"dart-io.SecureSocket.close","comment":"<p>Close the target consumer.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.close","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-io.SecureSocket.contains","comment":"<p>Checks whether <a>dart-io.SecureSocket.contains.needle</a> occurs in the elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"needle":{"name":"needle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"destroy":{"name":"destroy","qualifiedName":"dart-io.SecureSocket.destroy","comment":"<p>Destroy the socket in both directions. Calling <a>dart-io.SecureSocket.destroy</a> will make the\nsend a close event on the stream and will no longer react on data being\npiped to it.</p>\n<p>Call close(inherited from <a>dart-io.IOSink</a>) to only close the <a>dart-io.Socket</a>\nfor sending data.</p>","commentFrom":"","inheritedFrom":"dart-io.Socket.destroy","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"distinct":{"name":"distinct","qualifiedName":"dart-io.SecureSocket.distinct","comment":"<p>Skips data events if they are equal to the previous data event.</p>\n<p>The returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.</p>\n<p>Equality is determined by the provided <a>dart-io.SecureSocket.distinct.equals</a> method. If that is\nomitted, the '==' operator on the last provided data element is used.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.distinct","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"equals":{"name":"equals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"next":{"name":"next","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"drain":{"name":"drain","qualifiedName":"dart-io.SecureSocket.drain","comment":"<p>Discards all data on the stream, but signals when it's done or an error\noccured.</p>\n<p>When subscribing using <a>dart-io.SecureSocket.drain</a>, cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>dart-io.SecureSocket.drain.futureValue</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.drain","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"dart-io.SecureSocket.elementAt","comment":"<p>Returns the value of the <a>dart-io.SecureSocket.elementAt.index</a>th data event of this stream.</p>\n<p>Stops listening to the stream after the <a>dart-io.SecureSocket.elementAt.index</a>th data event has been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>If an error event occurs before the value is found, the future completes\nwith this error.</p>\n<p>If a done event occurs before the value is found, the future completes\nwith a <a>dart-core.RangeError</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"dart-io.SecureSocket.every","comment":"<p>Checks whether <a>dart-io.SecureSocket.every.test</a> accepts all elements provided by this stream.</p>\n<p>Completes the <a>dart-async.Future</a> when the answer is known.\nIf this stream reports an error, the <a>dart-async.Future</a> will report that error.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"dart-io.SecureSocket.expand","comment":"<p>Creates a new stream from this stream that converts each element\ninto zero or more events.</p>\n<p>Each incoming event is converted to an <a>dart-core.Iterable</a> of new events,\nand each of these new events are then sent by the returned stream\nin order.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"dart-io.SecureSocket.firstWhere","comment":"<p>Finds the first element of this stream matching <a>dart-io.SecureSocket.firstWhere.test</a>.</p>\n<p>Returns a future that is filled with the first element of this stream\nthat <a>dart-io.SecureSocket.firstWhere.test</a> returns true for.</p>\n<p>If no such element is found before this stream is done, and a\n<a>dart-io.SecureSocket.firstWhere.defaultValue</a> function is provided, the result of calling <a>dart-io.SecureSocket.firstWhere.defaultValue</a>\nbecomes the value of the future.</p>\n<p>Stops listening to the stream after the first matching element has been\nreceived.</p>\n<p>Internally the method cancels its subscription after the first element that\nmatches the predicate. This means that single-subscription (non-broadcast)\nstreams are closed and cannot be reused after a call to this method.</p>\n<p>If an error occurs, or if this stream ends without finding a match and\nwith no <a>dart-io.SecureSocket.firstWhere.defaultValue</a> function provided, the future will receive an\nerror.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"flush":{"name":"flush","qualifiedName":"dart-io.SecureSocket.flush","comment":"<p>Returns a <a>dart-async.Future</a> that completes once all buffered data is accepted by the\nto underlying <a>dart-async.StreamConsumer</a>.</p>\n<p>It's an error to call this method, while an <a>dart-io.SecureSocket.addStream</a> is incomplete.</p>\n<p>NOTE: This is not necessarily the same as the data being flushed by the\noperating system.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.flush","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"fold":{"name":"fold","qualifiedName":"dart-io.SecureSocket.fold","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-io.SecureSocket.fold.combine</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-io.SecureSocket.forEach","comment":"<p>Executes <a>dart-io.SecureSocket.forEach.action</a> on each data event of the stream.</p>\n<p>Completes the returned <a>dart-async.Future</a> when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if <a>dart-io.SecureSocket.forEach.action</a> throws.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"handleError":{"name":"handleError","qualifiedName":"dart-io.SecureSocket.handleError","comment":"<p>Creates a wrapper Stream that intercepts some errors from this stream.</p>\n<p>If this stream sends an error that matches <a>dart-io.SecureSocket.handleError.test</a>, then it is intercepted\nby the handle function.</p>\n<p>The <a>dart-io.SecureSocket.handleError.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. Depending on the function\ntype the the stream either invokes <a>dart-io.SecureSocket.handleError.onError</a> with or without a stack\ntrace. The stack trace argument might be <code>null</code> if the stream itself\nreceived an error without stack trace.</p>\n<p>An asynchronous error <code>e</code> is matched by a test function if <code>test(e)</code>\nreturns true. If <a>dart-io.SecureSocket.handleError.test</a> is omitted, every error is considered matching.</p>\n<p>If the error is intercepted, the handle function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.</p>\n<p>If you need to transform an error into a data event, use the more generic\n<a>dart-io.SecureSocket.transform</a> to handle the event by writing a data event to\nthe output sink</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.handleError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onError":{"name":"onError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"test":{"name":"test","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"join":{"name":"join","qualifiedName":"dart-io.SecureSocket.join","comment":"<p>Collects string of data events' string representations.</p>\n<p>If <a>dart-io.SecureSocket.join.separator</a> is provided, it is inserted between any two\nelements.</p>\n<p>Any error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"dart-io.SecureSocket.lastWhere","comment":"<p>Finds the last element in this stream matching <a>dart-io.SecureSocket.lastWhere.test</a>.</p>\n<p>As <a>dart-io.SecureSocket.firstWhere</a>, except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"defaultValue":{"name":"defaultValue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"listen":{"name":"listen","qualifiedName":"dart-io.SecureSocket.listen","comment":"<p>Adds a subscription to this stream.</p>\n<p>On each data event from this stream, the subscriber's <a>dart-io.SecureSocket.listen.onData</a> handler\nis called. If <a>dart-io.SecureSocket.listen.onData</a> is null, nothing happens.</p>\n<p>On errors from this stream, the <a>dart-io.SecureSocket.listen.onError</a> handler is given a\nobject describing the error.</p>\n<p>The <a>dart-io.SecureSocket.listen.onError</a> callback must be of type <code>void onError(error)</code> or\n<code>void onError(error, StackTrace stackTrace)</code>. If <a>dart-io.SecureSocket.listen.onError</a> accepts\ntwo arguments it is called with the stack trace (which could be <code>null</code> if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.</p>\n<p>If this stream closes, the <a>dart-io.SecureSocket.listen.onDone</a> handler is called.</p>\n<p>If <a>dart-io.SecureSocket.listen.cancelOnError</a> is true, the subscription is ended when\nthe first error is reported. The default is false.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.listen","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"onData":{"name":"onData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}},"onError":{"name":"onError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"onDone":{"name":"onDone","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"cancelOnError":{"name":"cancelOnError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"dart-io.SecureSocket.map","comment":"<p>Creates a new stream that converts each element of this stream\nto a new value using the <a>dart-io.SecureSocket.map.convert</a> function.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"convert":{"name":"convert","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.SecureSocket.noSuchMethod","comment":"<p><a>dart-io.SecureSocket.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.SecureSocket.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.SecureSocket.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.SecureSocket.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pipe":{"name":"pipe","qualifiedName":"dart-io.SecureSocket.pipe","comment":"<p>Binds this stream as the input of the provided <a>dart-async.StreamConsumer</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.pipe","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"streamConsumer":{"name":"streamConsumer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamConsumer","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"dart-io.SecureSocket.reduce","comment":"<p>Reduces a sequence of values by repeatedly applying <a>dart-io.SecureSocket.reduce.combine</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.Stream.T","inner":[]}],"parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"setOption":{"name":"setOption","qualifiedName":"dart-io.SecureSocket.setOption","comment":"<p>Use <a>dart-io.SecureSocket.setOption</a> to customize the <a>dart-io.RawSocket</a>. See <a>dart-io.SocketOption</a> for\navailable options.</p>\n<p>Returns <code>true</code> if the option was set successfully, false otherwise.</p>","commentFrom":"","inheritedFrom":"dart-io.Socket.setOption","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"option":{"name":"option","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.SocketOption","inner":[]}],"value":null,"annotations":[]},"enabled":{"name":"enabled","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"dart-io.SecureSocket.singleWhere","comment":"<p>Finds the single element in this stream matching <a>dart-io.SecureSocket.singleWhere.test</a>.</p>\n<p>Like lastMatch, except that it is an error if more than one\nmatching element occurs in the stream.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"dart-io.SecureSocket.skip","comment":"<p>Skips the first <a>dart-io.SecureSocket.skip.count</a> data events from this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"dart-io.SecureSocket.skipWhile","comment":"<p>Skip data events from this stream while they are matched by <a>dart-io.SecureSocket.skipWhile.test</a>.</p>\n<p>Error and done events are provided by the returned stream unmodified.</p>\n<p>Starting with the first data event where <a>dart-io.SecureSocket.skipWhile.test</a> returns false for the\nevent data, the returned stream will have the same events as this stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"dart-io.SecureSocket.take","comment":"<p>Provides at most the first n values of this stream.</p>\n<p>Forwards the first n data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.</p>\n<p>If this stream produces fewer than <a>dart-io.SecureSocket.take.count</a> values before it's done,\nso will the returned stream.</p>\n<p>Stops listening to the stream after the first n elements have been\nreceived.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"dart-io.SecureSocket.takeWhile","comment":"<p>Forwards data events while <a>dart-io.SecureSocket.takeWhile.test</a> is successful.</p>\n<p>The returned stream provides the same events as this stream as long\nas <a>dart-io.SecureSocket.takeWhile.test</a> returns <code>true</code> for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that <a>dart-io.SecureSocket.takeWhile.test</a> doesn't accept.</p>\n<p>Stops listening to the stream after the accepted elements.</p>\n<p>Internally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"dart-io.SecureSocket.timeout","comment":"<p>Creates a new stream with the same events as this stream.</p>\n<p>Whenever more than <a>dart-io.SecureSocket.timeout.timeLimit</a> passes between two events from this stream,\nthe <a>dart-io.SecureSocket.timeout.onTimeout</a> function is called.</p>\n<p>The countdown doesn't start until the returned stream is listened to.\nThe countdown is reset every time an event is forwarded from this stream,\nor when the stream is paused and resumed.</p>\n<p>The <a>dart-io.SecureSocket.timeout.onTimeout</a> function is called with one argument: an\n<a>dart-async.EventSink</a> that allows putting events into the returned stream.\nThis <code>EventSink</code> is only valid during the call to <code>onTimeout</code>.</p>\n<p>If <code>onTimeout</code> is omitted, a timeout will just put a <a>dart-async.TimeoutException</a>\ninto the error channel of the returned stream.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.timeout","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"timeLimit":{"name":"timeLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"onTimeout":{"name":"onTimeout","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"dart-io.SecureSocket.toList","comment":"<p>Collects the data of this stream in a <a>dart-core.List</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-io.SecureSocket.toSet","comment":"<p>Collects the data of this stream in a <a>dart-core.Set</a>.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.toSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Set","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.SecureSocket.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"transform":{"name":"transform","qualifiedName":"dart-io.SecureSocket.transform","comment":"<p>Chains this stream as the input of the provided <a>dart-async.StreamTransformer</a>.</p>\n<p>Returns the result of <code>streamTransformer.bind</code> itself.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.transform","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"streamTransformer":{"name":"streamTransformer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamTransformer","inner":[{"outer":"dart-async.Stream.T","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"dart-io.SecureSocket.where","comment":"<p>Creates a new stream from this stream that discards some data events.</p>\n<p>The new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the <a>dart-io.SecureSocket.where.test</a>.</p>\n<p>The returned stream is not a broadcast stream, even if this stream is.</p>","commentFrom":"","inheritedFrom":"dart-async.Stream.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.Stream.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream.T","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"write":{"name":"write","qualifiedName":"dart-io.SecureSocket.write","comment":"<p>Converts <a>dart-io.SecureSocket.write.obj</a> to a String by invoking <a>dart-io.SecureSocket.toString</a> and\n<a>dart-io.SecureSocket.add</a>s the encoding of the result to the target consumer.</p>\n<p>This operation is non-blocking. See <a>dart-io.SecureSocket.flush</a> or <a>dart-io.SecureSocket.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.write","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeAll":{"name":"writeAll","qualifiedName":"dart-io.SecureSocket.writeAll","comment":"<p>Iterates over the given <a>dart-io.SecureSocket.writeAll.objects</a> and <a>dart-io.SecureSocket.write</a>s them in sequence.</p>\n<p>If <a>dart-io.SecureSocket.writeAll.separator</a> is provided, a <code>write</code> with the <code>separator</code> is performed\nbetween any two elements of <code>objects</code>.</p>\n<p>This operation is non-blocking. See <a>dart-io.SecureSocket.flush</a> or <a>dart-io.SecureSocket.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.writeAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"objects":{"name":"objects","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"writeCharCode":{"name":"writeCharCode","qualifiedName":"dart-io.SecureSocket.writeCharCode","comment":"<p>Writes the <a>dart-io.SecureSocket.writeCharCode.charCode</a> to <code>this</code>.</p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))</code>.</p>\n<p>This operation is non-blocking. See <a>dart-io.SecureSocket.flush</a> or <a>dart-io.SecureSocket.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.writeCharCode","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"charCode":{"name":"charCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeln":{"name":"writeln","qualifiedName":"dart-io.SecureSocket.writeln","comment":"<p>Converts <a>dart-io.SecureSocket.writeln.obj</a> to a String by invoking <a>dart-io.SecureSocket.toString</a> and\nwrites the result to <code>this</code>, followed by a newline.</p>\n<p>This operation is non-blocking. See <a>dart-io.SecureSocket.flush</a> or <a>dart-io.SecureSocket.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"dart-io.IOSink.writeln","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}