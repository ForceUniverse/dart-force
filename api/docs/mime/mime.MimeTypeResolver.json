{"name":"MimeTypeResolver","qualifiedName":"mime/mime.MimeTypeResolver","comment":"<p>MIME-type resolver class, used to customize the lookup of mime-types.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"magicNumbersMaxLength":{"name":"magicNumbersMaxLength","qualifiedName":"mime/mime.MimeTypeResolver.magicNumbersMaxLength","comment":"<p>Get the maximum number of bytes required to match all magic numbers, when\nperforming <a>mime/mime.MimeTypeResolver.lookup</a> with headerBytes present.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"mime/mime.MimeTypeResolver.MimeTypeResolver-","comment":"<p>Create a new <a>mime/mime.MimeTypeResolver</a> containing the default scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"empty":{"name":"empty","qualifiedName":"mime/mime.MimeTypeResolver.MimeTypeResolver-empty","comment":"<p>Create a new empty <a>mime/mime.MimeTypeResolver</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"addExtension":{"name":"addExtension","qualifiedName":"mime/mime.MimeTypeResolver.addExtension","comment":"<p>Add a new MIME-type mapping to the <a>mime/mime.MimeTypeResolver</a>. If the <a>mime/mime.MimeTypeResolver.addExtension.extension</a>\nis already present in the <a>mime/mime.MimeTypeResolver</a>, it'll be overwritten.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"extension":{"name":"extension","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mimeType":{"name":"mimeType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addMagicNumber":{"name":"addMagicNumber","qualifiedName":"mime/mime.MimeTypeResolver.addMagicNumber","comment":"<p>Add a new magic-number mapping to the <a>mime/mime.MimeTypeResolver</a>.</p>\n<p>If <a>mime/mime.MimeTypeResolver.addMagicNumber.mask</a> is present,the <a>mime/mime.MimeTypeResolver.addMagicNumber.mask</a> is used to only perform matching on\nselective bits. The <a>mime/mime.MimeTypeResolver.addMagicNumber.mask</a> must have the same length as <a>mime/mime.MimeTypeResolver.addMagicNumber.bytes</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"mimeType":{"name":"mimeType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mask":{"name":"mask","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"lookup":{"name":"lookup","qualifiedName":"mime/mime.MimeTypeResolver.lookup","comment":"<p>Extract the extension from <a>mime/mime.MimeTypeResolver.lookup.path</a> and use that for MIME-type lookup.</p>\n<p>If no matching MIME-type was found, <code>null</code> is returned.</p>\n<p>If <a>mime/mime.MimeTypeResolver.lookup.headerBytes</a> is present, a match for known magic-numbers will be\nperformed first. This allows the correct mime-type to be found, even though\na file have been saved using the wrong file-name extension. If less than\n<a>mime/mime.MimeTypeResolver.magicNumbersMaxLength</a> bytes was provided, some magic-numbers won't\nbe matched against.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"headerBytes":{"name":"headerBytes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"mime/mime.MimeTypeResolver.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>mime/mime.MimeTypeResolver.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"mime/mime.MimeTypeResolver.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"mime/mime.MimeTypeResolver.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>mime/mime.MimeTypeResolver.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>mime/mime.MimeTypeResolver.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"mime/mime.MimeTypeResolver.noSuchMethod","comment":"<p><a>mime/mime.MimeTypeResolver.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>mime/mime.MimeTypeResolver.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>mime/mime.MimeTypeResolver.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>mime/mime.MimeTypeResolver.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"mime/mime.MimeTypeResolver.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}