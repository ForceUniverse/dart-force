{"name":"StreamTransformer","qualifiedName":"mime/mime.StreamTransformer","comment":"<p>The target of a <a>mime/mime.Stream.transform</a> call.</p>\n<p>The <a>mime/mime.Stream.transform</a> call will pass itself to this object and then return\nthe resulting stream.</p>\n<p>It is good practice to write transformers that can be used multiple times.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"mime/mime.StreamTransformer.StreamTransformer-","comment":"<p>Creates a <a>mime/mime.StreamTransformer</a>.</p>\n<p>The returned instance takes responsibility of implementing (<a>mime/mime.StreamTransformer.bind</a>).\nWhen the user invokes <code>bind</code> it returns a new \"bound\" stream. Only when\nthe user starts listening to the bound stream, the <code>listen</code> method\ninvokes the given closure <a>mime/mime.StreamTransformer.StreamTransformer-.transformer</a>.</p>\n<p>The <a>mime/mime.StreamTransformer.StreamTransformer-.transformer</a> closure receives the stream, that was bound, as argument\nand returns a <a>mime/dart-async.StreamSubscription</a>. In almost all cases the closure\nlistens itself to the stream that is given as argument.</p>\n<p>The result of invoking the <a>mime/mime.StreamTransformer.StreamTransformer-.transformer</a> closure is a <a>mime/dart-async.StreamSubscription</a>.\nThe bound stream-transformer (created by the <code>bind</code> method above) then sets\nthe handlers it received as part of the <code>listen</code> call.</p>\n<p>Conceptually this can be summarized as follows:</p><ol><li>\n<p><code>var transformer = new StreamTransformer(transformerClosure);</code>\n  creates a <code>StreamTransformer</code> that supports the <code>bind</code> method.</p></li><li>\n<p><code>var boundStream = stream.transform(transformer);</code> binds the <code>stream</code>\n  and returns a bound stream that has a pointer to <code>stream</code>.</p></li><li>\n<p><code>boundStream.listen(f1, onError: f2, onDone: f3, cancelOnError: b)</code>\n  starts the listening and transformation. This is accomplished\n  in 2 steps: first the <code>boundStream</code> invokes the <code>transformerClosure</code> with\n  the <code>stream</code> it captured: <code>transformerClosure(stream, b)</code>.\n  The result <code>subscription</code>, a <a>mime/dart-async.StreamSubscription</a>, is then\n  updated to receive its handlers: <code>subscription.onData(f1)</code>,\n  <code>subscription.onError(f2)</code>, <code>subscription(f3)</code>. Finally the subscription\n  is returned as result of the <code>listen</code> call.</p></li></ol>\n<p>There are two common ways to create a StreamSubscription:</p><ol><li>\n<p>by creating a new class that implements <a>mime/dart-async.StreamSubscription</a>.\n   Note that the subscription should run callbacks in the <a>mime/dart-async.Zone</a> the\n   stream was listened to.</p></li><li>\n<p>by allocating a <a>mime/dart-async.StreamController</a> and to return the result of\n   listening to its stream.</p></li></ol>\n<p>Example use of a duplicating transformer:</p>\n<pre><code>stringStream.transform(new StreamTransformer&lt;String, String&gt;(\n    (Stream&lt;String&gt; input, bool cancelOnError) {\n      StreamController&lt;String&gt; controller;\n      StreamSubscription&lt;String&gt; subscription;\n      controller = new StreamController&lt;String&gt;(\n        onListen: () {\n          subscription = input.listen((data) {\n              // Duplicate the data.\n              controller.add(data);\n              controller.add(data);\n            },\n            onError: controller.addError,\n            onDone: controller.close,\n            cancelOnError: cancelOnError);\n        },\n        onPause: subscription.pause,\n        onResume: subscription.resume,\n        onCancel: subscription.cancel,\n        sync: true);\n      return controller.stream.listen(null);\n    });\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mime/mime.StreamTransformer","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"mime/mime.MimeMultipart","inner":[]}]}],"parameters":{"transformer":{"name":"transformer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"mime.StreamTransformer.T","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"mime/mime.Stream","inner":[{"outer":"mime.StreamTransformer.S","inner":[]}]}],"value":null,"annotations":[]},"cancelOnError":{"name":"cancelOnError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"fromHandlers":{"name":"fromHandlers","qualifiedName":"mime/mime.StreamTransformer.StreamTransformer-fromHandlers","comment":"<p>Creates a <a>mime/mime.StreamTransformer</a> that delegates events to the given functions.</p>\n<p>Example use of a duplicating transformer:</p>\n<pre><code>stringStream.transform(new StreamTransformer&lt;String, String&gt;.fromHandlers(\n    handleData: (String value, EventSink&lt;String&gt; sink) {\n      sink.add(value);\n      sink.add(value);  // Duplicate the incoming events.\n    }));\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mime/mime.StreamTransformer","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"mime/mime.MimeMultipart","inner":[]}]}],"parameters":{"handleData":{"name":"handleData","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"mime.StreamTransformer.S","inner":[]}],"value":null,"annotations":[]},"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[{"outer":"mime.StreamTransformer.T","inner":[]}]}],"value":null,"annotations":[]}}}},"handleError":{"name":"handleError","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]},"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[{"outer":"mime.StreamTransformer.T","inner":[]}]}],"value":null,"annotations":[]}}}},"handleDone":{"name":"handleDone","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink","inner":[{"outer":"mime.StreamTransformer.T","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"bind":{"name":"bind","qualifiedName":"mime/mime.StreamTransformer.bind","comment":"","commentFrom":"http_server.StreamTransformer.bind","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"mime/mime.Stream","inner":[{"outer":"mime/mime.MimeMultipart","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"mime/mime.Stream","inner":[{"outer":"mime.StreamTransformer.S","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"mime/mime.StreamTransformer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>mime/mime.StreamTransformer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"mime/mime.StreamTransformer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"mime/mime.StreamTransformer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>mime/mime.StreamTransformer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>mime/mime.StreamTransformer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"mime/mime.StreamTransformer.noSuchMethod","comment":"<p><a>mime/mime.StreamTransformer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>mime/mime.StreamTransformer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>mime/mime.StreamTransformer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>mime/mime.StreamTransformer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"mime/mime.StreamTransformer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"S":{"name":"S","type":"dart.core.Object"},"T":{"name":"T","type":"dart.core.Object"}}}