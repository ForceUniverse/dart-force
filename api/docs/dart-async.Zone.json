{"name":"Zone","qualifiedName":"dart-async.Zone","comment":"<p>A Zone represents the asynchronous version of a dynamic extent. Asynchronous\ncallbacks are executed in the zone they have been queued in. For example,\nthe callback of a <code>future.then</code> is executed in the same zone as the one where\nthe <code>then</code> was invoked.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"ROOT":{"name":"ROOT","qualifiedName":"dart-async.Zone.ROOT","comment":"<p>The root zone that is implicitly created.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-async.Zone","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"current":{"name":"current","qualifiedName":"dart-async.Zone.current","comment":"","commentFrom":"dart-async.Zone.current","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Zone","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"dart-async.Zone.parent","comment":"<p>Returns the parent zone.</p>\n<p>Returns <code>null</code> if <code>this</code> is the <a>dart-async.Zone.ROOT</a> zone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Zone","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"[]":{"name":"[]","qualifiedName":"dart-async.Zone.[]","comment":"<p>Retrieves the zone-value associated with <a>dart-async.Zone.[].key</a>.</p>\n<p>If this zone does not contain the value looks up the same key in the\nparent zone. If the <a>dart-async.Zone.[].key</a> is not found returns <code>null</code>.</p>\n<p>Any object can be used as key, as long as it has compatible <code>operator ==</code>\nand <code>hashCode</code> implementations.\nBy controlling access to the key, a zone can grant or deny access to the\nzone value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bindBinaryCallback":{"name":"bindBinaryCallback","qualifiedName":"dart-async.Zone.bindBinaryCallback","comment":"<p>Equivalent to:</p>\n<pre><code> ZoneCallback registered = registerBinaryCallback(f);\n if (runGuarded) {\n   return (arg1, arg2) =&gt; this.runBinaryGuarded(registered, arg);\n }\n return (arg1, arg2) =&gt; thin.runBinary(registered, arg1, arg2);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneBinaryCallback","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"runGuarded":{"name":"runGuarded","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"bindCallback":{"name":"bindCallback","qualifiedName":"dart-async.Zone.bindCallback","comment":"<p>Equivalent to:</p>\n<pre><code> ZoneCallback registered = registerCallback(f);\n if (runGuarded) return () =&gt; this.runGuarded(registered);\n return () =&gt; this.run(registered);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneCallback","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}},"runGuarded":{"name":"runGuarded","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"bindUnaryCallback":{"name":"bindUnaryCallback","qualifiedName":"dart-async.Zone.bindUnaryCallback","comment":"<p>Equivalent to:</p>\n<pre><code> ZoneCallback registered = registerUnaryCallback(f);\n if (runGuarded) return (arg) =&gt; this.runUnaryGuarded(registered, arg);\n return (arg) =&gt; thin.runUnary(registered, arg);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneUnaryCallback","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"runGuarded":{"name":"runGuarded","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"createPeriodicTimer":{"name":"createPeriodicTimer","qualifiedName":"dart-async.Zone.createPeriodicTimer","comment":"<p>Creates a periodic Timer where the callback is executed in this zone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Timer","inner":[]}],"parameters":{"period":{"name":"period","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"timer":{"name":"timer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Timer","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"createTimer":{"name":"createTimer","qualifiedName":"dart-async.Zone.createTimer","comment":"<p>Creates a Timer where the callback is executed in this zone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Timer","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}}},"annotations":[]},"fork":{"name":"fork","qualifiedName":"dart-async.Zone.fork","comment":"<p>Creates a new zone as a child of <code>this</code>.</p>\n<p>The new zone will have behavior like the current zone, except where\noverridden by functions in <a>dart-async.Zone.fork.specification</a>.</p>\n<p>The new zone will have the same stored values (accessed through\n<code>operator []</code>) as this zone, but updated with the keys and values\nin <a>dart-async.Zone.fork.zoneValues</a>. If a key is in both this zone's values and in\n<code>zoneValues</code>, the new zone will use the value from <code>zoneValues</code>`.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Zone","inner":[]}],"parameters":{"specification":{"name":"specification","optional":true,"named":true,"default":false,"type":[{"outer":"dart-async.ZoneSpecification","inner":[]}],"value":null,"annotations":[]},"zoneValues":{"name":"zoneValues","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"handleUncaughtError":{"name":"handleUncaughtError","qualifiedName":"dart-async.Zone.handleUncaughtError","comment":"","commentFrom":"dart-async.Zone.handleUncaughtError","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"inSameErrorZone":{"name":"inSameErrorZone","qualifiedName":"dart-async.Zone.inSameErrorZone","comment":"<p>Returns true if <code>this</code> and <a>dart-async.Zone.inSameErrorZone.otherZone</a> are in the same error zone.</p>\n<p>Two zones are in the same error zone if they share the same\n<a>dart-async.Zone.handleUncaughtError</a> callback.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"otherZone":{"name":"otherZone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"print":{"name":"print","qualifiedName":"dart-async.Zone.print","comment":"<p>Prints the given <a>dart-async.Zone.print.line</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"line":{"name":"line","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"registerBinaryCallback":{"name":"registerBinaryCallback","qualifiedName":"dart-async.Zone.registerBinaryCallback","comment":"<p>Registers the given callback in this zone.</p>\n<p>Similar to <a>dart-async.Zone.registerCallback</a> but with a unary callback.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneBinaryCallback","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"registerCallback":{"name":"registerCallback","qualifiedName":"dart-async.Zone.registerCallback","comment":"<p>Registers the given callback in this zone.</p>\n<p>It is good practice to register asynchronous or delayed callbacks before\ninvoking <a>dart-async.Zone.run</a>. This gives the zone a chance to wrap the callback and\nto store information with the callback. For example, a zone may decide\nto store the stack trace (at the time of the registration) with the\ncallback.</p>\n<p>Returns a potentially new callback that should be used in place of the\ngiven <a>dart-async.Zone.registerCallback.callback</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneCallback","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[]},"registerUnaryCallback":{"name":"registerUnaryCallback","qualifiedName":"dart-async.Zone.registerUnaryCallback","comment":"<p>Registers the given callback in this zone.</p>\n<p>Similar to <a>dart-async.Zone.registerCallback</a> but with a unary callback.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneUnaryCallback","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"run":{"name":"run","qualifiedName":"dart-async.Zone.run","comment":"<p>Executes the given function <a>dart-async.Zone.run.f</a> in this zone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[]},"runBinary":{"name":"runBinary","qualifiedName":"dart-async.Zone.runBinary","comment":"<p>Executes the given callback <a>dart-async.Zone.runBinary.f</a> with argument <a>dart-async.Zone.runBinary.arg1</a> and <a>dart-async.Zone.runBinary.arg2</a> in this\nzone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"runBinaryGuarded":{"name":"runBinaryGuarded","qualifiedName":"dart-async.Zone.runBinaryGuarded","comment":"<p>Executes the given callback <a>dart-async.Zone.runBinaryGuarded.f</a> in this zone.</p>\n<p>Same as <a>dart-async.Zone.runBinary</a> but catches uncaught errors and gives them to\n<a>dart-async.Zone.handleUncaughtError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"runGuarded":{"name":"runGuarded","qualifiedName":"dart-async.Zone.runGuarded","comment":"<p>Executes the given function <a>dart-async.Zone.runGuarded.f</a> in this zone.</p>\n<p>Same as <a>dart-async.Zone.run</a> but catches uncaught errors and gives them to\n<a>dart-async.Zone.handleUncaughtError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[]},"runUnary":{"name":"runUnary","qualifiedName":"dart-async.Zone.runUnary","comment":"<p>Executes the given callback <a>dart-async.Zone.runUnary.f</a> with argument <a>dart-async.Zone.runUnary.arg</a> in this zone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"runUnaryGuarded":{"name":"runUnaryGuarded","qualifiedName":"dart-async.Zone.runUnaryGuarded","comment":"<p>Executes the given callback <a>dart-async.Zone.runUnaryGuarded.f</a> in this zone.</p>\n<p>Same as <a>dart-async.Zone.runUnary</a> but catches uncaught errors and gives them to\n<a>dart-async.Zone.handleUncaughtError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scheduleMicrotask":{"name":"scheduleMicrotask","qualifiedName":"dart-async.Zone.scheduleMicrotask","comment":"<p>Runs <a>dart-async.Zone.scheduleMicrotask.f</a> asynchronously in this zone.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-async.Zone.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-async.Zone.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-async.Zone.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-async.Zone.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-async.Zone.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-async.Zone.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-async.Zone.noSuchMethod","comment":"<p><a>dart-async.Zone.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-async.Zone.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-async.Zone.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-async.Zone.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-async.Zone.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}