{"name":"DirectoryEntry","qualifiedName":"dart-dom-html.DirectoryEntry","comment":"","isAbstract":false,"superclass":"dart-dom-html.Entry","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"filesystem":{"name":"filesystem","qualifiedName":"dart-dom-html.Entry.filesystem","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.FileSystem","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'Entry.filesystem'"]}]},"fullPath":{"name":"fullPath","qualifiedName":"dart-dom-html.Entry.fullPath","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'Entry.fullPath'"]}]},"isDirectory":{"name":"isDirectory","qualifiedName":"dart-dom-html.Entry.isDirectory","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'Entry.isDirectory'"]}]},"isFile":{"name":"isFile","qualifiedName":"dart-dom-html.Entry.isFile","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'Entry.isFile'"]}]},"name":{"name":"name","qualifiedName":"dart-dom-html.Entry.name","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'Entry.name'"]}]}},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"createDirectory":{"name":"createDirectory","qualifiedName":"dart-dom-html.DirectoryEntry.createDirectory","comment":"<p>Create a new directory with the specified <code>path</code>. If <code>exclusive</code> is true,\nthe returned Future will complete with an error if a directory already\nexists with the specified <code>path</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"exclusive":{"name":"exclusive","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"createFile":{"name":"createFile","qualifiedName":"dart-dom-html.DirectoryEntry.createFile","comment":"<p>Create a new file with the specified <code>path</code>. If <code>exclusive</code> is true,\nthe returned Future will complete with an error if a file already\nexists at the specified <code>path</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"exclusive":{"name":"exclusive","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"createReader":{"name":"createReader","qualifiedName":"dart-dom-html.DirectoryEntry.createReader","comment":"","commentFrom":"dart-dom-html.DirectoryEntry.createReader","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.DirectoryReader","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'DirectoryEntry.createReader'"]}]},"getDirectory":{"name":"getDirectory","qualifiedName":"dart-dom-html.DirectoryEntry.getDirectory","comment":"<p>Retrieve an already existing directory entry. The returned future will\nresult in an error if a directory at <code>path</code> does not exist or if the item\nat <code>path</code> is not a directory.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getFile":{"name":"getFile","qualifiedName":"dart-dom-html.DirectoryEntry.getFile","comment":"<p>Retrieve an already existing file entry. The returned future will\nresult in an error if a file at <code>path</code> does not exist or if the item at\n<code>path</code> is not a file.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeRecursively":{"name":"removeRecursively","qualifiedName":"dart-dom-html.DirectoryEntry.removeRecursively","comment":"","commentFrom":"dart-dom-html.DirectoryEntry.removeRecursively","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'DirectoryEntry.removeRecursively'"]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.DirectoryEntry.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.DirectoryEntry.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-dom-html.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.DirectoryEntry.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"dart-dom-html.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.DirectoryEntry.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.DirectoryEntry.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.DirectoryEntry.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-dom-html.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"copyTo":{"name":"copyTo","qualifiedName":"dart-dom-html.DirectoryEntry.copyTo","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.Entry.copyTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.DirectoryEntry","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'Entry.copyTo'"]}]},"getMetadata":{"name":"getMetadata","qualifiedName":"dart-dom-html.DirectoryEntry.getMetadata","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.Entry.getMetadata","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Metadata","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'Entry.getMetadata'"]}]},"getParent":{"name":"getParent","qualifiedName":"dart-dom-html.DirectoryEntry.getParent","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.Entry.getParent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'Entry.getParent'"]}]},"moveTo":{"name":"moveTo","qualifiedName":"dart-dom-html.DirectoryEntry.moveTo","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.Entry.moveTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.DirectoryEntry","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'Entry.moveTo'"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.DirectoryEntry.noSuchMethod","comment":"<p><a>dart-dom-html.DirectoryEntry.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.DirectoryEntry.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.DirectoryEntry.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.DirectoryEntry.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"dart-dom-html.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-dom-html.DirectoryEntry.remove","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.Entry.remove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'Entry.remove'"]}]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.DirectoryEntry.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-dom-html.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toUrl":{"name":"toUrl","qualifiedName":"dart-dom-html.DirectoryEntry.toUrl","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.Entry.toUrl","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'Entry.toURL'"]}]}}},"annotations":[{"name":"metadata.DomName","parameters":["'DirectoryEntry'"]},{"name":"metadata.Experimental","parameters":[]}],"generics":{}}