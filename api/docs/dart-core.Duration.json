{"name":"Duration","qualifiedName":"dart-core.Duration","comment":"<p>A span of time, such as 27 days, 4 hours, 12 minutes, and 3 seconds.</p>\n<p>To create a new Duration object, use this class's single constructor\ngiving the appropriate arguments:</p>\n<pre><code>Duration fastestMarathon = new Duration(hours:2, minutes:3, seconds:2);\n</code></pre>\n<p>The Duration is the sum of all individual parts.\nThis means that individual parts can be larger than the next-bigger unit.\nFor example, minutes can be greater than 59.</p>\n<pre><code>assert(fastestMarathon.inMinutes == 123);\n</code></pre>\n<p>All individual parts are allowed to be negative.</p>\n<p>Use one of the properties, such as <a>dart-core.Duration.inDays</a>,\nto retrieve the integer value of the Duration in the specified time unit.\nNote that the returned value is rounded down.\nFor example,</p>\n<pre><code>Duration aLongWeekend = new Duration(hours:88);\nassert(aLongWeekend.inDays == 3);\n</code></pre>\n<p>This class provides a collection of arithmetic\nand comparison operators,\nplus a set of constants useful for converting time units.</p>\n<p>See <a>dart-core.DateTime</a> to represent a point in time.\nSee <a>dart-core.Stopwatch</a> to measure time-spans.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Comparable"],"subclass":[],"variables":{"HOURS_PER_DAY":{"name":"HOURS_PER_DAY","qualifiedName":"dart-core.Duration.HOURS_PER_DAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MICROSECONDS_PER_DAY":{"name":"MICROSECONDS_PER_DAY","qualifiedName":"dart-core.Duration.MICROSECONDS_PER_DAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MICROSECONDS_PER_HOUR":{"name":"MICROSECONDS_PER_HOUR","qualifiedName":"dart-core.Duration.MICROSECONDS_PER_HOUR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MICROSECONDS_PER_MILLISECOND":{"name":"MICROSECONDS_PER_MILLISECOND","qualifiedName":"dart-core.Duration.MICROSECONDS_PER_MILLISECOND","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MICROSECONDS_PER_MINUTE":{"name":"MICROSECONDS_PER_MINUTE","qualifiedName":"dart-core.Duration.MICROSECONDS_PER_MINUTE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MICROSECONDS_PER_SECOND":{"name":"MICROSECONDS_PER_SECOND","qualifiedName":"dart-core.Duration.MICROSECONDS_PER_SECOND","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MILLISECONDS_PER_DAY":{"name":"MILLISECONDS_PER_DAY","qualifiedName":"dart-core.Duration.MILLISECONDS_PER_DAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MILLISECONDS_PER_HOUR":{"name":"MILLISECONDS_PER_HOUR","qualifiedName":"dart-core.Duration.MILLISECONDS_PER_HOUR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MILLISECONDS_PER_MINUTE":{"name":"MILLISECONDS_PER_MINUTE","qualifiedName":"dart-core.Duration.MILLISECONDS_PER_MINUTE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MILLISECONDS_PER_SECOND":{"name":"MILLISECONDS_PER_SECOND","qualifiedName":"dart-core.Duration.MILLISECONDS_PER_SECOND","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MINUTES_PER_DAY":{"name":"MINUTES_PER_DAY","qualifiedName":"dart-core.Duration.MINUTES_PER_DAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MINUTES_PER_HOUR":{"name":"MINUTES_PER_HOUR","qualifiedName":"dart-core.Duration.MINUTES_PER_HOUR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SECONDS_PER_DAY":{"name":"SECONDS_PER_DAY","qualifiedName":"dart-core.Duration.SECONDS_PER_DAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SECONDS_PER_HOUR":{"name":"SECONDS_PER_HOUR","qualifiedName":"dart-core.Duration.SECONDS_PER_HOUR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SECONDS_PER_MINUTE":{"name":"SECONDS_PER_MINUTE","qualifiedName":"dart-core.Duration.SECONDS_PER_MINUTE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"ZERO":{"name":"ZERO","qualifiedName":"dart-core.Duration.ZERO","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.Duration","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Duration.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Duration.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inDays":{"name":"inDays","qualifiedName":"dart-core.Duration.inDays","comment":"<p>Returns the number of whole days spanned by this Duration.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inHours":{"name":"inHours","qualifiedName":"dart-core.Duration.inHours","comment":"<p>Returns the number of whole hours spanned by this Duration.</p>\n<p>The returned value can be greater than 23.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inMicroseconds":{"name":"inMicroseconds","qualifiedName":"dart-core.Duration.inMicroseconds","comment":"<p>Returns number of whole microseconds spanned by this Duration.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inMilliseconds":{"name":"inMilliseconds","qualifiedName":"dart-core.Duration.inMilliseconds","comment":"<p>Returns number of whole milliseconds spanned by this Duration.</p>\n<p>The returned value can be greater than 999.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inMinutes":{"name":"inMinutes","qualifiedName":"dart-core.Duration.inMinutes","comment":"<p>Returns the number of whole minutes spanned by this Duration.</p>\n<p>The returned value can be greater than 59.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inSeconds":{"name":"inSeconds","qualifiedName":"dart-core.Duration.inSeconds","comment":"<p>Returns the number of whole seconds spanned by this Duration.</p>\n<p>The returned value can be greater than 59.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.Duration.Duration-","comment":"<p>Creates a new Duration object whose value\nis the sum of all individual parts.</p>\n<p>Individual parts can be larger than the next-bigger unit.\nFor example, <a>dart-core.Duration.Duration-.hours</a> can be greater than 23.</p>\n<p>All individual parts are allowed to be negative.\nAll arguments are 0 by default.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"days":{"name":"days","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"hours":{"name":"hours","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"minutes":{"name":"minutes","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"seconds":{"name":"seconds","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"milliseconds":{"name":"milliseconds","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"microseconds":{"name":"microseconds","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}},"operators":{"*":{"name":"*","qualifiedName":"dart-core.Duration.*","comment":"<p>Multiplies this Duration by the given <a>dart-core.Duration.*.factor</a> and returns the result\nas a new Duration object.</p>\n<p>Note that when <a>dart-core.Duration.*.factor</a> is a double, and the duration is greater than\n53 bits, precision is lost because of double-precision arithmetic.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{"factor":{"name":"factor","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"dart-core.Duration.+","comment":"<p>Adds this Duration and <a>dart-core.Duration.+.other</a> and\nreturns the sum as a new Duration object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"dart-core.Duration.-","comment":"<p>Subtracts <a>dart-core.Duration.-.other</a> from this Duration and\nreturns the difference as a new Duration object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<":{"name":"<","qualifiedName":"dart-core.Duration.<","comment":"<p>Returns <code>true</code> if the value of this Duration\nis less than the value of <a>dart-core.Duration.<.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<=":{"name":"<=","qualifiedName":"dart-core.Duration.<=","comment":"<p>Returns <code>true</code> if the value of this Duration\nis less than or equal to the value of <a>dart-core.Duration.<=.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"==":{"name":"==","qualifiedName":"dart-core.Duration.==","comment":"<p>Returns <code>true</code> if this Duration is the same object as <a>dart-core.Duration.==.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">":{"name":">","qualifiedName":"dart-core.Duration.>","comment":"<p>Returns <code>true</code> if the value of this Duration\nis greater than the value of <a>dart-core.Duration.>.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">=":{"name":">=","qualifiedName":"dart-core.Duration.>=","comment":"<p>Returns <code>true</code> if the value of this Duration\nis greater than or equal to the value of <a>dart-core.Duration.>=.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"~/":{"name":"~/","qualifiedName":"dart-core.Duration.~/","comment":"<p>Divides this Duration by the given <a>dart-core.Duration.~/.quotient</a> and returns the truncated\nresult as a new Duration object.</p>\n<p>Throws an <a>dart-core.IntegerDivisionByZeroException</a> if <a>dart-core.Duration.~/.quotient</a> is <code>0</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{"quotient":{"name":"quotient","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"dart-core.Duration.compareTo","comment":"<p>Compares this Duration to <a>dart-core.Duration.compareTo.other</a>,\nreturning zero if the values are equal.</p>\n<p>This function returns a negative integer\nif this Duration is smaller than <a>dart-core.Duration.compareTo.other</a>,\nor a positive integer if it is greater.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Duration.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Duration.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Duration.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Duration.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Duration.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Duration.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Duration.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"dart-core.Duration.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>dart-core.Duration.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>dart-core.Duration.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>dart-core.Duration.compareTo.other</a>,\nand zero if <code>this</code> and <a>dart-core.Duration.compareTo.other</a> are ordered together.</p>\n<p>The <a>dart-core.Duration.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Comparable.compareTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Duration.noSuchMethod","comment":"<p><a>dart-core.Duration.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Duration.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Duration.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Duration.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Duration.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}