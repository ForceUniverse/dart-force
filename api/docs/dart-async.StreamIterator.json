{"name":"StreamIterator","qualifiedName":"dart-async.StreamIterator","comment":"<p>An <a>dart-core.Iterable</a> like interface for the values of a <a>dart-async.Stream</a>.</p>\n<p>This wraps a <a>dart-async.Stream</a> and a subscription on the stream. It listens\non the stream, and completes the future returned by <a>dart-async.StreamIterator.moveNext</a> when the\nnext value becomes available.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"current":{"name":"current","qualifiedName":"dart-async.StreamIterator.current","comment":"<p>The current value of the stream.</p>\n<p>Only valid when the future returned by <a>dart-async.StreamIterator.moveNext</a> completes with <code>true</code>\nas value, and only until the next call to <a>dart-async.StreamIterator.moveNext</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.StreamIterator.T","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-async.StreamIterator.StreamIterator-","comment":"<p>Create a <a>dart-async.StreamIterator</a> on <a>dart-async.StreamIterator.StreamIterator-.stream</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.StreamIterator","inner":[{"outer":"dart-async.StreamIterator.T","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.StreamIterator.T","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"cancel":{"name":"cancel","qualifiedName":"dart-async.StreamIterator.cancel","comment":"<p>Cancels the stream iterator (and the underlying stream subscription) early.</p>\n<p>The stream iterator is automatically canceled if the <a>dart-async.StreamIterator.moveNext</a> future\ncompletes with either <code>false</code> or an error.</p>\n<p>If a <a>dart-async.StreamIterator.moveNext</a> call has been made, it will complete with <code>false</code> as value,\nas will all further calls to <a>dart-async.StreamIterator.moveNext</a>.</p>\n<p>If you need to stop listening for values before the stream iterator is\nautomatically closed, you must call <a>dart-async.StreamIterator.cancel</a> to ensure that the stream\nis properly closed.</p>\n<p>Returns a future if the cancel-operation is not completed synchronously.\nOtherwise returns <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"moveNext":{"name":"moveNext","qualifiedName":"dart-async.StreamIterator.moveNext","comment":"<p>Wait for the next stream value to be available.</p>\n<p>It is not allowed to call this function again until the future has\ncompleted. If the returned future completes with anything except <code>true</code>,\nthe iterator is done, and no new value will ever be available.</p>\n<p>The future may complete with an error, if the stream produces an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-async.StreamIterator.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-async.StreamIterator.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-async.StreamIterator.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-async.StreamIterator.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-async.StreamIterator.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-async.StreamIterator.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-async.StreamIterator.noSuchMethod","comment":"<p><a>dart-async.StreamIterator.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-async.StreamIterator.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-async.StreamIterator.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-async.StreamIterator.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-async.StreamIterator.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}