{"name":"RandomAccessFile","qualifiedName":"dart-io.RandomAccessFile","comment":"<p><a>dart-io.RandomAccessFile</a> provides random access to the data in a\nfile. <a>dart-io.RandomAccessFile</a> objects are obtained by calling the\n<code>open</code> method on a <a>dart-io.File</a> object.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"path":{"name":"path","qualifiedName":"dart-io.RandomAccessFile.path","comment":"<p>Gets the path of the file underlying this RandomAccessFile.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"close":{"name":"close","qualifiedName":"dart-io.RandomAccessFile.close","comment":"<p>Closes the file. Returns a <code>Future&lt;RandomAccessFile&gt;</code> that\ncompletes with this RandomAccessFile when it has been closed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RandomAccessFile","inner":[]}]}],"parameters":{},"annotations":[]},"closeSync":{"name":"closeSync","qualifiedName":"dart-io.RandomAccessFile.closeSync","comment":"<p>Synchronously closes the file.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"flush":{"name":"flush","qualifiedName":"dart-io.RandomAccessFile.flush","comment":"<p>Flushes the contents of the file to disk. Returns a\n<code>Future&lt;RandomAccessFile&gt;</code> that completes with this\nRandomAccessFile when the flush operation completes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RandomAccessFile","inner":[]}]}],"parameters":{},"annotations":[]},"flushSync":{"name":"flushSync","qualifiedName":"dart-io.RandomAccessFile.flushSync","comment":"<p>Synchronously flushes the contents of the file to disk.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-io.RandomAccessFile.length","comment":"<p>Gets the length of the file. Returns a <code>Future&lt;int&gt;</code> that\ncompletes with the length in bytes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"lengthSync":{"name":"lengthSync","qualifiedName":"dart-io.RandomAccessFile.lengthSync","comment":"<p>Synchronously gets the length of the file.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"position":{"name":"position","qualifiedName":"dart-io.RandomAccessFile.position","comment":"<p>Gets the current byte position in the file. Returns a\n<code>Future&lt;int&gt;</code> that completes with the position.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"positionSync":{"name":"positionSync","qualifiedName":"dart-io.RandomAccessFile.positionSync","comment":"<p>Synchronously gets the current byte position in the file.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"read":{"name":"read","qualifiedName":"dart-io.RandomAccessFile.read","comment":"<p>Reads <a>dart-io.RandomAccessFile.read.bytes</a> bytes from a file and returns the result as a list of bytes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readByte":{"name":"readByte","qualifiedName":"dart-io.RandomAccessFile.readByte","comment":"<p>Reads a byte from the file. Returns a <code>Future&lt;int&gt;</code> that\ncompletes with the byte, or with -1 if end-of-file has been reached.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"readByteSync":{"name":"readByteSync","qualifiedName":"dart-io.RandomAccessFile.readByteSync","comment":"<p>Synchronously reads a single byte from the file. If end-of-file\nhas been reached -1 is returned.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readInto":{"name":"readInto","qualifiedName":"dart-io.RandomAccessFile.readInto","comment":"<p>Reads into an existing List&lt;int> from the file. If <a>dart-io.RandomAccessFile.readInto.start</a> is present, the\nbytes will be filled into <a>dart-io.RandomAccessFile.readInto.buffer</a> from at index <a>dart-io.RandomAccessFile.readInto.start</a>, otherwise index\n0. If <a>dart-io.RandomAccessFile.readInto.end</a> is present, the <a>dart-io.RandomAccessFile.readInto.end</a> - <a>dart-io.RandomAccessFile.readInto.start</a> bytes will be read into\n<a>dart-io.RandomAccessFile.readInto.buffer</a>, otherwise up to buffer.length. If <a>dart-io.RandomAccessFile.readInto.end</a> == <a>dart-io.RandomAccessFile.readInto.start</a> nothing\nhappends.</p>\n<p>Returns a <code>Future&lt;int&gt;</code> that completes with the number of bytes read.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readIntoSync":{"name":"readIntoSync","qualifiedName":"dart-io.RandomAccessFile.readIntoSync","comment":"<p>Synchronously reads into an existing List&lt;int> from the file. If <a>dart-io.RandomAccessFile.readIntoSync.start</a> is\npresent, the bytes will be filled into <a>dart-io.RandomAccessFile.readIntoSync.buffer</a> from at index <a>dart-io.RandomAccessFile.readIntoSync.start</a>,\notherwise index 0.  If <a>dart-io.RandomAccessFile.readIntoSync.end</a> is present, the <a>dart-io.RandomAccessFile.readIntoSync.end</a> - <a>dart-io.RandomAccessFile.readIntoSync.start</a> bytes will be\nread into <a>dart-io.RandomAccessFile.readIntoSync.buffer</a>, otherwise up to buffer.length. If <a>dart-io.RandomAccessFile.readIntoSync.end</a> == <a>dart-io.RandomAccessFile.readIntoSync.start</a>\nnothing happends.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readSync":{"name":"readSync","qualifiedName":"dart-io.RandomAccessFile.readSync","comment":"<p>Synchronously reads a maximum of <a>dart-io.RandomAccessFile.readSync.bytes</a> bytes from a file and\nreturns the result in a list of bytes.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setPosition":{"name":"setPosition","qualifiedName":"dart-io.RandomAccessFile.setPosition","comment":"<p>Sets the byte position in the file. Returns a\n<code>Future&lt;RandomAccessFile&gt;</code> that completes with this\nRandomAccessFile when the position has been set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RandomAccessFile","inner":[]}]}],"parameters":{"position":{"name":"position","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setPositionSync":{"name":"setPositionSync","qualifiedName":"dart-io.RandomAccessFile.setPositionSync","comment":"<p>Synchronously sets the byte position in the file.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"position":{"name":"position","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.RandomAccessFile.toString","comment":"<p>Returns a human-readable string for this RandomAccessFile instance.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"truncate":{"name":"truncate","qualifiedName":"dart-io.RandomAccessFile.truncate","comment":"<p>Truncates (or extends) the file to <a>dart-io.RandomAccessFile.truncate.length</a> bytes. Returns a\n<code>Future&lt;RandomAccessFile&gt;</code> that completes with this\nRandomAccessFile when the truncation has been performed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RandomAccessFile","inner":[]}]}],"parameters":{"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"truncateSync":{"name":"truncateSync","qualifiedName":"dart-io.RandomAccessFile.truncateSync","comment":"<p>Synchronously truncates (or extends) the file to <a>dart-io.RandomAccessFile.truncateSync.length</a> bytes.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeByte":{"name":"writeByte","qualifiedName":"dart-io.RandomAccessFile.writeByte","comment":"<p>Writes a single byte to the file. Returns a\n<code>Future&lt;RandomAccessFile&gt;</code> that completes with this\nRandomAccessFile when the write completes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RandomAccessFile","inner":[]}]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeByteSync":{"name":"writeByteSync","qualifiedName":"dart-io.RandomAccessFile.writeByteSync","comment":"<p>Synchronously writes a single byte to the file. Returns the\nnumber of bytes successfully written.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeFrom":{"name":"writeFrom","qualifiedName":"dart-io.RandomAccessFile.writeFrom","comment":"<p>Writes from a <a>dart-core</a>&lt;<a>dart-core</a>> to the file. It will read the buffer from index\n<a>dart-io.RandomAccessFile.writeFrom.start</a> to index <a>dart-io.RandomAccessFile.writeFrom.end</a>. If <a>dart-io.RandomAccessFile.writeFrom.start</a> is omitted, it'll start from index 0.\nIf <a>dart-io.RandomAccessFile.writeFrom.end</a> is omitted, it will write to end of <a>dart-io.RandomAccessFile.writeFrom.buffer</a>.</p>\n<p>Returns a <code>Future&lt;RandomAccessFile&gt;</code> that completes with this\n<a>dart-io.RandomAccessFile</a> when the write completes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RandomAccessFile","inner":[]}]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeFromSync":{"name":"writeFromSync","qualifiedName":"dart-io.RandomAccessFile.writeFromSync","comment":"<p>Synchronously writes from a <a>dart-core</a>&lt;<a>dart-core</a>> to the file. It will read the\nbuffer from index <a>dart-io.RandomAccessFile.writeFromSync.start</a> to index <a>dart-io.RandomAccessFile.writeFromSync.end</a>. If <a>dart-io.RandomAccessFile.writeFromSync.start</a> is omitted, it'll\nstart from index 0. If <a>dart-io.RandomAccessFile.writeFromSync.end</a> is omitted, it will write to the end of\n<a>dart-io.RandomAccessFile.writeFromSync.buffer</a>.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeString":{"name":"writeString","qualifiedName":"dart-io.RandomAccessFile.writeString","comment":"<p>Writes a string to the file using the given <a>dart-convert.Encoding</a>. Returns a\n<code>Future&lt;RandomAccessFile&gt;</code> that completes with this\nRandomAccessFile when the write completes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.RandomAccessFile","inner":[]}]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]},"writeStringSync":{"name":"writeStringSync","qualifiedName":"dart-io.RandomAccessFile.writeStringSync","comment":"<p>Synchronously writes a single string to the file using the given\n<a>dart-convert.Encoding</a>.</p>\n<p>Throws a <a>dart-io.FileSystemException</a> if the operation fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.RandomAccessFile.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.RandomAccessFile.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.RandomAccessFile.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.RandomAccessFile.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.RandomAccessFile.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.RandomAccessFile.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.RandomAccessFile.noSuchMethod","comment":"<p><a>dart-io.RandomAccessFile.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.RandomAccessFile.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.RandomAccessFile.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.RandomAccessFile.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.RandomAccessFile.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}