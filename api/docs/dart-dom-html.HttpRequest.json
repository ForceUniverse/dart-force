{"name":"HttpRequest","qualifiedName":"dart-dom-html.HttpRequest","comment":"<p>A client-side XHR request for getting data from a URL,\nformally known as XMLHttpRequest.</p>\n<p>HttpRequest can be used to obtain data from HTTP and FTP protocols,\nand is useful for AJAX-style page updates.</p>\n<p>The simplest way to get the contents of a text file, such as a\nJSON-formatted file, is with <a>dart-dom-html.HttpRequest.getString</a>.\nFor example, the following code gets the contents of a JSON file\nand prints its length:</p>\n<pre><code>var path = 'myData.json';\nHttpRequest.getString(path)\n    .then((String fileContents) {\n      print(fileContents.length);\n    })\n    .catchError((Error error) {\n      print(error.toString());\n    });\n</code></pre>\n<h2>Fetching data from other servers</h2>\n<p>For security reasons, browsers impose restrictions on requests\nmade by embedded apps.\nWith the default behavior of this class,\nthe code making the request must be served from the same origin\n(domain name, port, and application layer protocol)\nas the requested resource.\nIn the example above, the myData.json file must be co-located with the\napp that uses it.\nYou might be able to\n<a href=\"http://www.dartlang.org/articles/json-web-service/#a-note-on-cors-and-httprequest\">get around this restriction</a>\nby using CORS headers or JSONP.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://www.dartlang.org/docs/tutorials/fetchdata/\">Fetch Data Dynamically</a>,\na tutorial from <em>A Game of Darts</em>,\nshows two different ways to use HttpRequest to get a JSON file.</p></li><li>\n<p><a href=\"https://www.dartlang.org/docs/tutorials/forms/\">Get Input from a Form</a>,\nanother tutorial from <em>A Game of Darts</em>,\nshows using HttpRequest with a custom server.</p></li><li><a href=\"http://www.dartlang.org/articles/json-web-service/#getting-data\">Dart article on using HttpRequests</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest\">JS XMLHttpRequest</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a></li></ul>","isAbstract":false,"superclass":"dart-dom-html.HttpRequestEventTarget","implements":[],"subclass":[],"variables":{"DONE":{"name":"DONE","qualifiedName":"dart-dom-html.HttpRequest.DONE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.DONE'"]}]},"HEADERS_RECEIVED":{"name":"HEADERS_RECEIVED","qualifiedName":"dart-dom-html.HttpRequest.HEADERS_RECEIVED","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.HEADERS_RECEIVED'"]}]},"LOADING":{"name":"LOADING","qualifiedName":"dart-dom-html.HttpRequest.LOADING","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.LOADING'"]}]},"OPENED":{"name":"OPENED","qualifiedName":"dart-dom-html.HttpRequest.OPENED","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.OPENED'"]}]},"UNSENT":{"name":"UNSENT","qualifiedName":"dart-dom-html.HttpRequest.UNSENT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.UNSENT'"]}]},"readyState":{"name":"readyState","qualifiedName":"dart-dom-html.HttpRequest.readyState","comment":"<p>Indicator of the current state of the request:</p><table>\n  <tr>\n    <td>Value</td>\n    <td>State</td>\n    <td>Meaning</td>\n  </tr>\n  <tr>\n    <td>0</td>\n    <td>unsent</td>\n    <td><code>open()</code> has not yet been called</td>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>opened</td>\n    <td><code>send()</code> has not yet been called</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>headers received</td>\n    <td><code>sent()</code> has been called; response headers and <code>status</code> are available</td>\n  </tr>\n  <tr>\n    <td>3</td> <td>loading</td> <td><code>responseText</code> holds some data</td>\n  </tr>\n  <tr>\n    <td>4</td> <td>done</td> <td>request is complete</td>\n  </tr>\n</table>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.readyState'"]}]},"readyStateChangeEvent":{"name":"readyStateChangeEvent","qualifiedName":"dart-dom-html.HttpRequest.readyStateChangeEvent","comment":"<p>Static factory designed to expose <code>readystatechange</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequest</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.readystatechangeEvent'"]}]},"responseText":{"name":"responseText","qualifiedName":"dart-dom-html.HttpRequest.responseText","comment":"<p>The response in String form or empty String on failure.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.responseText'"]}]},"responseType":{"name":"responseType","qualifiedName":"dart-dom-html.HttpRequest.responseType","comment":"<p><a>dart-core.String</a> telling the server the desired response format.</p>\n<p>Default is <code>String</code>.\nOther options are one of 'arraybuffer', 'blob', 'document', 'json',\n'text'. Some newer browsers will throw NS<em>ERROR</em>DOM<em>INVALID</em>ACCESS_ERR if\n<code>responseType</code> is set while performing a synchronous request.</p>\n<p>See also: <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType\">MDN responseType</a></p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.responseType'"]}]},"responseXml":{"name":"responseXml","qualifiedName":"dart-dom-html.HttpRequest.responseXml","comment":"<p>The request response, or null on failure.</p>\n<p>The response is processed as\n<code>text/xml</code> stream, unless responseType = 'document' and the request is\nsynchronous.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Document","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.responseXML'"]}]},"status":{"name":"status","qualifiedName":"dart-dom-html.HttpRequest.status","comment":"<p>The http result code from the request (200, 404, etc).\nSee also: <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">Http Status Codes</a></p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.status'"]}]},"statusText":{"name":"statusText","qualifiedName":"dart-dom-html.HttpRequest.statusText","comment":"<p>The request response string (such as \\\"200 OK\\\").\nSee also: <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">Http Status Codes</a></p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.statusText'"]}]},"timeout":{"name":"timeout","qualifiedName":"dart-dom-html.HttpRequest.timeout","comment":"<p>Length of time before a request is automatically terminated.</p>\n<p>When the time has passed, a TimeoutEvent is dispatched.</p>\n<p>If <a>dart-dom-html.HttpRequest.timeout</a> is set to 0, then the request will not time out.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#timeout\">XMLHttpRequest.timeout</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\">The timeout attribute</a>\nfrom W3C.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.timeout'"]},{"name":"metadata.Experimental","parameters":[]}]},"upload":{"name":"upload","qualifiedName":"dart-dom-html.HttpRequest.upload","comment":"<p><a>dart-dom-html.EventTarget</a> that can hold listeners to track the progress of the request.\nThe events fired will be members of HttpRequestUploadEvents.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.HttpRequestUpload","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.upload'"]},{"name":"metadata.Unstable","parameters":[]}]},"withCredentials":{"name":"withCredentials","qualifiedName":"dart-dom-html.HttpRequest.withCredentials","comment":"<p>True if cross-site requests should use credentials such as cookies\nor authorization headers; false otherwise.</p>\n<p>This value is ignored for same-site requests.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.withCredentials'"]}]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"onReadyStateChange":{"name":"onReadyStateChange","qualifiedName":"dart-dom-html.HttpRequest.onReadyStateChange","comment":"<p>Stream of <code>readystatechange</code> events handled by this <a>dart-dom-html.HttpRequest</a>.</p>\n<p>Event listeners to be notified every time the <a>dart-dom-html.HttpRequest</a>\nobject's <code>readyState</code> changes values.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.onreadystatechange'"]}]},"response":{"name":"response","qualifiedName":"dart-dom-html.HttpRequest.response","comment":"<p>The data received as a reponse from the request.</p>\n<p>The data could be in the\nform of a <a>dart-core.String</a>, <a>dart-typed_data.ByteBuffer</a>, <a>dart-dom-html.Document</a>, <a>dart-dom-html.Blob</a>, or json (also a\n<a>dart-core.String</a>). <code>null</code> indicates request failure.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.response'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]}]},"responseHeaders":{"name":"responseHeaders","qualifiedName":"dart-dom-html.HttpRequest.responseHeaders","comment":"<p>Returns all response headers as a key-value map.</p>\n<p>Multiple values for the same header key can be combined into one,\nseparated by a comma and a space.</p>\n<p>See: http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"supportsCrossOrigin":{"name":"supportsCrossOrigin","qualifiedName":"dart-dom-html.HttpRequest.supportsCrossOrigin","comment":"<p>Checks to see if the current platform supports making cross origin\nrequests.</p>\n<p>Note that even if cross origin requests are supported, they still may fail\nif the destination server does not support CORS requests.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"supportsLoadEndEvent":{"name":"supportsLoadEndEvent","qualifiedName":"dart-dom-html.HttpRequest.supportsLoadEndEvent","comment":"<p>Checks to see if the LoadEnd event is supported on the current platform.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"supportsOverrideMimeType":{"name":"supportsOverrideMimeType","qualifiedName":"dart-dom-html.HttpRequest.supportsOverrideMimeType","comment":"<p>Checks to see if the overrideMimeType method is supported on the current\nplatform.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"supportsProgressEvent":{"name":"supportsProgressEvent","qualifiedName":"dart-dom-html.HttpRequest.supportsProgressEvent","comment":"<p>Checks to see if the Progress event is supported on the current platform.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-dom-html.HttpRequest.HttpRequest-","comment":"<p>General constructor for any type of request (GET, POST, etc).</p>\n<p>This call is used in conjunction with <a>dart-dom-html.HttpRequest.open</a>:</p>\n<pre><code>var request = new HttpRequest();\nrequest.open('GET', 'http://dartlang.org');\nrequest.onLoad.listen((event) =&gt; print(\n    'Request complete ${event.target.reponseText}'));\nrequest.send();\n</code></pre>\n<p>is the (more verbose) equivalent of</p>\n<pre><code>HttpRequest.getString('http://dartlang.org').then(\n    (result) =&gt; print('Request complete: $result'));\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.HttpRequest","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.XMLHttpRequest'"]}]}},"operators":{},"methods":{"abort":{"name":"abort","qualifiedName":"dart-dom-html.HttpRequest.abort","comment":"<p>Stop the current request.</p>\n<p>The request can only be stopped if readyState is <code>HEADERS_RECIEVED</code> or\n<code>LOADING</code>. If this method is not in the process of being sent, the method\nhas no effect.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.abort'"]}]},"getAllResponseHeaders":{"name":"getAllResponseHeaders","qualifiedName":"dart-dom-html.HttpRequest.getAllResponseHeaders","comment":"<p>Retrieve all the response headers from a request.</p>\n<p><code>null</code> if no headers have been received. For multipart requests,\n<code>getAllResponseHeaders</code> will return the response headers for the current\npart of the request.</p>\n<p>See also <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Responses\">HTTP response headers</a>\nfor a list of common response headers.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.getAllResponseHeaders'"]},{"name":"metadata.Unstable","parameters":[]}]},"getResponseHeader":{"name":"getResponseHeader","qualifiedName":"dart-dom-html.HttpRequest.getResponseHeader","comment":"<p>Return the response header named <code>header</code>, or null if not found.</p>\n<p>See also <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Responses\">HTTP response headers</a>\nfor a list of common response headers.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"header":{"name":"header","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.getResponseHeader'"]},{"name":"metadata.Unstable","parameters":[]}]},"getString":{"name":"getString","qualifiedName":"dart-dom-html.HttpRequest.getString","comment":"<p>Creates a GET request for the specified <a>dart-dom-html.HttpRequest.getString.url</a>.</p>\n<p>The server response must be a <code>text/</code> mime type for this request to\nsucceed.</p>\n<p>This is similar to <a>dart-dom-html.HttpRequest.request</a> but specialized for HTTP GET requests which\nreturn text content.</p>\n<p>To add query parameters, append them to the <a>dart-dom-html.HttpRequest.getString.url</a> following a <code>?</code>,\njoining each key to its value with <code>=</code> and separating key-value pairs with\n<code>&amp;</code>.</p>\n<pre><code>var name = Uri.encodeQueryComponent('John');\nvar id = Uri.encodeQueryComponent('42');\nHttpRequest.getString('users.json?name=$name&amp;id=$id')\n  .then((HttpRequest resp) {\n    // Do something with the response.\n});\n</code></pre>\n<p>See also:</p><ul><li><a>dart-dom-html.HttpRequest.request</a></li></ul>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"withCredentials":{"name":"withCredentials","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"onProgress":{"name":"onProgress","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"open":{"name":"open","qualifiedName":"dart-dom-html.HttpRequest.open","comment":"<p>Specify the desired <code>url</code>, and <code>method</code> to use in making the request.</p>\n<p>By default the request is done asyncronously, with no user or password\nauthentication information. If <code>async</code> is false, the request will be send\nsynchronously.</p>\n<p>Calling <code>open</code> again on a currently active request is equivalent to\ncalling <code>abort</code>.</p>\n<p>Note: Most simple HTTP requests can be accomplished using the <a>dart-dom-html.HttpRequest.getString</a>,\n<a>dart-dom-html.HttpRequest.request</a>, <a>dart-dom-html.HttpRequest.requestCrossOrigin</a>, or <a>dart-dom-html.HttpRequest.postFormData</a> methods. Use of this\n<code>open</code> method is intended only for more complext HTTP requests where\nfiner-grained control is needed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"async":{"name":"async","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"user":{"name":"user","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"password":{"name":"password","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.open'"]}]},"overrideMimeType":{"name":"overrideMimeType","qualifiedName":"dart-dom-html.HttpRequest.overrideMimeType","comment":"<p>Specify a particular MIME type (such as <code>text/xml</code>) desired for the\nresponse.</p>\n<p>This value must be set before the request has been sent. See also the list\nof <a href=\"http://en.wikipedia.org/wiki/Internet_media_type#List_of_common_media_types\">common MIME types</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"override":{"name":"override","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.overrideMimeType'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]}]},"postFormData":{"name":"postFormData","qualifiedName":"dart-dom-html.HttpRequest.postFormData","comment":"<p>Makes a server POST request with the specified data encoded as form data.</p>\n<p>This is roughly the POST equivalent of getString. This method is similar\nto sending a FormData object with broader browser support but limited to\nString values.</p>\n<p>If <a>dart-dom-html.HttpRequest.postFormData.data</a> is supplied, the key/value pairs are URI encoded with\n<a>dart-core.Uri.encodeQueryComponent</a> and converted into an HTTP query string.</p>\n<p>Unless otherwise specified, this method appends the following header:</p>\n<pre><code>Content-Type: application/x-www-form-urlencoded; charset=UTF-8\n</code></pre>\n<p>Here's an example of using this method:</p>\n<pre><code>var data = { 'firstName' : 'John', 'lastName' : 'Doe' };\nHttpRequest.postFormData('/send', data).then((HttpRequest resp) {\n  // Do something with the response.\n});\n</code></pre>\n<p>See also:</p><ul><li><a>dart-dom-html.HttpRequest.request</a></li></ul>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.HttpRequest","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"withCredentials":{"name":"withCredentials","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"responseType":{"name":"responseType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"requestHeaders":{"name":"requestHeaders","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"onProgress":{"name":"onProgress","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"request":{"name":"request","qualifiedName":"dart-dom-html.HttpRequest.request","comment":"<p>Creates and sends a URL request for the specified <a>dart-dom-html.HttpRequest.request.url</a>.</p>\n<p>By default <code>request</code> will perform an HTTP GET request, but a different\nmethod (<code>POST</code>, <code>PUT</code>, <code>DELETE</code>, etc) can be used by specifying the\n<a>dart-dom-html.HttpRequest.request.method</a> parameter.</p>\n<p>The Future is completed when the response is available.</p>\n<p>If specified, <code>sendData</code> will send data in the form of a <a>dart-typed_data.ByteBuffer</a>,\n<a>dart-dom-html.Blob</a>, <a>dart-dom-html.Document</a>, <a>dart-core.String</a>, or <a>dart-dom-html.FormData</a> along with the HttpRequest.</p>\n<p>The <a>dart-dom-html.HttpRequest.request.withCredentials</a> parameter specified that credentials such as a cookie\n(already) set in the header or\n<a href=\"http://tools.ietf.org/html/rfc1945#section-10.2\">authorization headers</a>\nshould be specified for the request. Details to keep in mind when using\ncredentials:</p><ul><li>Using credentials is only useful for cross-origin requests.</li><li>The <code>Access-Control-Allow-Origin</code> header of <code>url</code> cannot contain a wildcard (*).</li><li>The <code>Access-Control-Allow-Credentials</code> header of <code>url</code> must be set to true.</li><li>If <code>Access-Control-Expose-Headers</code> has not been set to true, only a subset of all the response headers will be returned when calling getAllRequestHeaders.</li></ul>\n<p>The following is equivalent to the <a>dart-dom-html.HttpRequest.getString</a> sample above:</p>\n<pre><code>var name = Uri.encodeQueryComponent('John');\nvar id = Uri.encodeQueryComponent('42');\nHttpRequest.request('users.json?name=$name&amp;id=$id')\n  .then((HttpRequest resp) {\n    // Do something with the response.\n});\n</code></pre>\n<p>Here's an example of submitting an entire form with <a>dart-dom-html.FormData</a>.</p>\n<pre><code>var myForm = querySelector('form#myForm');\nvar data = new FormData(myForm);\nHttpRequest.request('/submit', method: 'POST', sendData: data)\n  .then((HttpRequest resp) {\n    // Do something with the response.\n});\n</code></pre>\n<p>Note that requests for file:// URIs are only supported by Chrome extensions\nwith appropriate permissions in their manifest. Requests to file:// URIs\nwill also never fail- the Future will always complete successfully, even\nwhen the file cannot be found.</p>\n<p>See also: <a href=\"http://en.wikipedia.org/wiki/Basic_access_authentication\">authorization headers</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.HttpRequest","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"method":{"name":"method","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"withCredentials":{"name":"withCredentials","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"responseType":{"name":"responseType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mimeType":{"name":"mimeType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"requestHeaders":{"name":"requestHeaders","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"sendData":{"name":"sendData","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"onProgress":{"name":"onProgress","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"requestCrossOrigin":{"name":"requestCrossOrigin","qualifiedName":"dart-dom-html.HttpRequest.requestCrossOrigin","comment":"<p>Makes a cross-origin request to the specified URL.</p>\n<p>This API provides a subset of <a>dart-dom-html.HttpRequest.request</a> which works on IE9. If IE9\ncross-origin support is not required then <a>dart-dom-html.HttpRequest.request</a> should be used instead.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"method":{"name":"method","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"sendData":{"name":"sendData","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.Experimental","parameters":[]}]},"send":{"name":"send","qualifiedName":"dart-dom-html.HttpRequest.send","comment":"<p>Send the request with any given <code>data</code>.</p>\n<p>Note: Most simple HTTP requests can be accomplished using the <a>dart-dom-html.HttpRequest.getString</a>,\n<a>dart-dom-html.HttpRequest.request</a>, <a>dart-dom-html.HttpRequest.requestCrossOrigin</a>, or <a>dart-dom-html.HttpRequest.postFormData</a> methods. Use of this\n<code>send</code> method is intended only for more complext HTTP requests where\nfiner-grained control is needed.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#send%28%29\">XMLHttpRequest.send</a>\nfrom MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.send'"]}]},"setRequestHeader":{"name":"setRequestHeader","qualifiedName":"dart-dom-html.HttpRequest.setRequestHeader","comment":"<p>Sets the value of an HTTP requst header.</p>\n<p>This method should be called after the request is opened, but before\nthe request is sent.</p>\n<p>Multiple calls with the same header will combine all their values into a\nsingle header.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#send%28%29\">XMLHttpRequest.setRequestHeader</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader(\">The setRequestHeader() method</a>-method) from\nW3C.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"header":{"name":"header","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest.setRequestHeader'"]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.HttpRequest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.HttpRequest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-dom-html.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"dart-dom-html.HttpRequest.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"onAbort":{"name":"onAbort","qualifiedName":"dart-dom-html.HttpRequest.onAbort","comment":"<p>Stream of <code>abort</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.HttpRequestEventTarget.onAbort","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onabort'"]},{"name":"metadata.Experimental","parameters":[]}]},"onError":{"name":"onError","qualifiedName":"dart-dom-html.HttpRequest.onError","comment":"<p>Stream of <code>error</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.HttpRequestEventTarget.onError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onerror'"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoad":{"name":"onLoad","qualifiedName":"dart-dom-html.HttpRequest.onLoad","comment":"<p>Stream of <code>load</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.HttpRequestEventTarget.onLoad","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onload'"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoadEnd":{"name":"onLoadEnd","qualifiedName":"dart-dom-html.HttpRequest.onLoadEnd","comment":"<p>Stream of <code>loadend</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.HttpRequestEventTarget.onLoadEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onloadend'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoadStart":{"name":"onLoadStart","qualifiedName":"dart-dom-html.HttpRequest.onLoadStart","comment":"<p>Stream of <code>loadstart</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.HttpRequestEventTarget.onLoadStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onloadstart'"]},{"name":"metadata.Experimental","parameters":[]}]},"onProgress":{"name":"onProgress","qualifiedName":"dart-dom-html.HttpRequest.onProgress","comment":"<p>Stream of <code>progress</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.HttpRequestEventTarget.onProgress","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onprogress'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]},{"name":"metadata.Experimental","parameters":[]}]},"onTimeout":{"name":"onTimeout","qualifiedName":"dart-dom-html.HttpRequest.onTimeout","comment":"<p>Stream of <code>timeout</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.HttpRequestEventTarget.onTimeout","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.ontimeout'"]},{"name":"metadata.Experimental","parameters":[]}]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.HttpRequest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"dart-dom-html.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.HttpRequest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.HttpRequest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.HttpRequest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-dom-html.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addEventListener":{"name":"addEventListener","qualifiedName":"dart-dom-html.HttpRequest.addEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.addEventListener'"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"dart-dom-html.HttpRequest.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.dispatchEvent'"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.HttpRequest.noSuchMethod","comment":"<p><a>dart-dom-html.HttpRequest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.HttpRequest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.HttpRequest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.HttpRequest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"dart-dom-html.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"dart-dom-html.HttpRequest.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.removeEventListener'"]}]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.HttpRequest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-dom-html.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequest'"]}],"generics":{}}