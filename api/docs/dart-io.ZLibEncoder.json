{"name":"ZLibEncoder","qualifiedName":"dart-io.ZLibEncoder","comment":"<p>The <a>dart-io.ZLibEncoder</a> encoder is used by <a>dart-io.ZLibCodec</a> and <a>dart-io.GZipCodec</a> to compress\ndata.</p>","isAbstract":false,"superclass":"dart-convert.Converter","implements":[],"subclass":[],"variables":{"dictionary":{"name":"dictionary","qualifiedName":"dart-io.ZLibEncoder.dictionary","comment":"<p>Initial compression dictionary.</p>\n<p>It should consist of strings (byte sequences) that are likely to be\nencountered later in the data to be compressed, with the most commonly used\nstrings preferably put towards the end of the dictionary. Using a\ndictionary is most useful when the data to be compressed is short and can\nbe predicted with good accuracy; the data can then be compressed better\nthan with the default empty dictionary.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"gzip":{"name":"gzip","qualifiedName":"dart-io.ZLibEncoder.gzip","comment":"<p>When true, <code>GZip</code> frames will be added to the compressed data.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"level":{"name":"level","qualifiedName":"dart-io.ZLibEncoder.level","comment":"<p>The compression-<a>dart-io.ZLibEncoder.level</a> can be set in the range of <code>-1..9</code>, with <code>6</code> being\nthe default compression level. Levels above <code>6</code> will have higher\ncompression rates at the cost of more CPU and memory usage. Levels below\n<code>6</code> will use less CPU and memory at the cost of lower compression rates.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"memLevel":{"name":"memLevel","qualifiedName":"dart-io.ZLibEncoder.memLevel","comment":"<p>Specifies how much memory should be allocated for the internal compression\nstate. <code>1</code> uses minimum memory but is slow and reduces compression ratio;\n<code>9</code> uses maximum memory for optimal speed. The default value is <code>8</code>.</p>\n<p>The memory requirements for deflate are (in bytes):</p>\n<pre><code>(1 &lt;&lt; (windowBits + 2)) +  (1 &lt;&lt; (memLevel + 9))\n</code></pre>\n<p>that is: 128K for windowBits = 15 + 128K for memLevel = 8 (default values)</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"raw":{"name":"raw","qualifiedName":"dart-io.ZLibEncoder.raw","comment":"<p>When true, deflate generates raw data with no zlib header or trailer, and\nwill not compute an adler32 check value</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"strategy":{"name":"strategy","qualifiedName":"dart-io.ZLibEncoder.strategy","comment":"<p>Tunes the compression algorithm. Use the value\n<a>dart-io.ZLibOption.STRATEGY_DEFAULT</a> for normal data,\n<a>dart-io.ZLibOption.STRATEGY_FILTERED</a> for data produced by a filter\n(or predictor), [ZLibOption.STRATEGY_HUFFMAN_ONLY] to force Huffman\nencoding only (no string match), or <a>dart-io.ZLibOption.STRATEGY_RLE</a> to limit\nmatch distances to one (run-length encoding).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"windowBits":{"name":"windowBits","qualifiedName":"dart-io.ZLibEncoder.windowBits","comment":"<p>Base two logarithm of the window size (the size of the history buffer). It\nshould be in the range <code>8..15</code>. Larger values result in better compression\nat the expense of memory usage. The default value is <code>15</code></p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-io.ZLibEncoder.ZLibEncoder-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"gzip":{"name":"gzip","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"level":{"name":"level","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"6","annotations":[]},"windowBits":{"name":"windowBits","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"15","annotations":[]},"memLevel":{"name":"memLevel","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"8","annotations":[]},"strategy":{"name":"strategy","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"dictionary":{"name":"dictionary","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"raw":{"name":"raw","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"convert":{"name":"convert","qualifiedName":"dart-io.ZLibEncoder.convert","comment":"<p>Convert a list of bytes using the options given to the ZLibEncoder\nconstructor.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"dart-io.ZLibEncoder.startChunkedConversion","comment":"<p>Start a chunked conversion using the options given to the <a>dart-io.ZLibEncoder</a>\nconstructor. While it accepts any <a>dart-core.Sink</a> taking <a>dart-core</a>&lt;<a>dart-core</a>>'s,\nthe optimal sink to be passed as <a>dart-io.ZLibEncoder.startChunkedConversion.sink</a> is a <a>dart-convert.ByteConversionSink</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ByteConversionSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Sink","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.ZLibEncoder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.ZLibEncoder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.ZLibEncoder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.ZLibEncoder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.ZLibEncoder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.ZLibEncoder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bind":{"name":"bind","qualifiedName":"dart-io.ZLibEncoder.bind","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Converter.bind","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"convert":{"name":"convert","qualifiedName":"dart-io.ZLibEncoder.convert","comment":"<p>Converts <a>dart-io.ZLibEncoder.convert.input</a> and returns the result of the conversion.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.convert","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Converter.S","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"dart-io.ZLibEncoder.fuse","comment":"<p>Fuses <code>this</code> with <a>dart-io.ZLibEncoder.fuse.other</a>.</p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this</code> before converting with <code>other</code>.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.fuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Converter","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.ZLibEncoder.noSuchMethod","comment":"<p><a>dart-io.ZLibEncoder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.ZLibEncoder.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.ZLibEncoder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.ZLibEncoder.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"dart-io.ZLibEncoder.startChunkedConversion","comment":"<p>Starts a chunked conversion.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.startChunkedConversion","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ChunkedConversionSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Sink","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.ZLibEncoder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}