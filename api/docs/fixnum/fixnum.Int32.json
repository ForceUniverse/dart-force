{"name":"Int32","qualifiedName":"fixnum/fixnum.Int32","comment":"<p>An immutable 32-bit signed integer, in the range -2^31, 2^31 - 1.\nArithmetic operations may overflow in order to maintain this range.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["fixnum/fixnum.IntX"],"subclass":[],"variables":{"MAX_VALUE":{"name":"MAX_VALUE","qualifiedName":"fixnum/fixnum.Int32.MAX_VALUE","comment":"<p>The maximum positive value attainable by an <a>fixnum/fixnum.Int32</a>, namely\n2147483647.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"annotations":[]},"MIN_VALUE":{"name":"MIN_VALUE","qualifiedName":"fixnum/fixnum.Int32.MIN_VALUE","comment":"<p>The minimum positive value attainable by an <a>fixnum/fixnum.Int32</a>, namely\n-2147483648.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"annotations":[]},"ONE":{"name":"ONE","qualifiedName":"fixnum/fixnum.Int32.ONE","comment":"<p>An <a>fixnum/fixnum.Int32</a> constant equal to 1.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"annotations":[]},"TWO":{"name":"TWO","qualifiedName":"fixnum/fixnum.Int32.TWO","comment":"<p>An <a>fixnum/fixnum.Int32</a> constant equal to 2.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"annotations":[]},"ZERO":{"name":"ZERO","qualifiedName":"fixnum/fixnum.Int32.ZERO","comment":"<p>An <a>fixnum/fixnum.Int32</a> constant equal to 0.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"bitLength":{"name":"bitLength","qualifiedName":"fixnum/fixnum.Int32.bitLength","comment":"<p>Returns the minimum number of bits required to store this integer.</p>\n<p>The number of bits excludes the sign bit, which gives the natural length\nfor non-negative (unsigned) values.  Negative values are complemented to\nreturn the bit position of the first bit that differs from the sign bit.</p>\n<p>To find the the number of bits needed to store the value as a signed value,\nadd one, i.e. use <code>x.bitLength + 1</code>.</p>","commentFrom":"fixnum.IntX.bitLength","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"fixnum/fixnum.Int32.hashCode","comment":"","commentFrom":"fixnum.IntX.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEven":{"name":"isEven","qualifiedName":"fixnum/fixnum.Int32.isEven","comment":"<p>Returns <code>true</code> if and only if this integer is even.</p>","commentFrom":"fixnum.IntX.isEven","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isMaxValue":{"name":"isMaxValue","qualifiedName":"fixnum/fixnum.Int32.isMaxValue","comment":"<p>Returns <code>true</code> if and only if this integer is the maximum signed value\nthat can be represented within its bit size.</p>","commentFrom":"fixnum.IntX.isMaxValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isMinValue":{"name":"isMinValue","qualifiedName":"fixnum/fixnum.Int32.isMinValue","comment":"<p>Returns <code>true</code> if and only if this integer is the minimum signed value\nthat can be represented within its bit size.</p>","commentFrom":"fixnum.IntX.isMinValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNegative":{"name":"isNegative","qualifiedName":"fixnum/fixnum.Int32.isNegative","comment":"<p>Returns <code>true</code> if and only if this integer is less than zero.</p>","commentFrom":"fixnum.IntX.isNegative","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isOdd":{"name":"isOdd","qualifiedName":"fixnum/fixnum.Int32.isOdd","comment":"<p>Returns <code>true</code> if and only if this integer is odd.</p>","commentFrom":"fixnum.IntX.isOdd","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isZero":{"name":"isZero","qualifiedName":"fixnum/fixnum.Int32.isZero","comment":"<p>Returns <code>true</code> if and only if this integer is zero.</p>","commentFrom":"fixnum.IntX.isZero","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"fixnum/fixnum.Int32.Int32-","comment":"<p>Constructs an <a>fixnum/fixnum.Int32</a> from an <a>dart-core.int</a>.  Only the low 32 bits of the input\nare used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}},"operators":{"%":{"name":"%","qualifiedName":"fixnum/fixnum.Int32.%","comment":"<p>Euclidean modulo operator.</p>\n<p>Returns the remainder of the euclidean division. The euclidean division\nof two integers <code>a</code> and <code>b</code> yields two integers <code>q</code> and <code>r</code> such that\n<code>a == b * q + r</code> and <code>0 &lt;= r &lt; a.abs()</code>.</p>","commentFrom":"fixnum.IntX.%","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"&":{"name":"&","qualifiedName":"fixnum/fixnum.Int32.&","comment":"<p>Bitwise and operator.</p>","commentFrom":"fixnum.IntX.&","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"*":{"name":"*","qualifiedName":"fixnum/fixnum.Int32.*","comment":"<p>Multiplication operator.</p>","commentFrom":"fixnum.IntX.*","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"fixnum/fixnum.Int32.+","comment":"<p>Addition operator.</p>","commentFrom":"fixnum.IntX.+","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"fixnum/fixnum.Int32.-","comment":"<p>Subtraction operator.</p>","commentFrom":"fixnum.IntX.-","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<":{"name":"<","qualifiedName":"fixnum/fixnum.Int32.<","comment":"<p>Relational less than operator.</p>","commentFrom":"fixnum.IntX.<","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<<":{"name":"<<","qualifiedName":"fixnum/fixnum.Int32.<<","comment":"<p>Left bit-shift operator.</p>\n<p>Returns the result of shifting the bits of this integer by shiftAmount\nbits to the left. Low-order bits are filled with zeros.</p>","commentFrom":"fixnum.IntX.<<","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<=":{"name":"<=","qualifiedName":"fixnum/fixnum.Int32.<=","comment":"<p>Relational less than or equal to operator.</p>","commentFrom":"fixnum.IntX.<=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"==":{"name":"==","qualifiedName":"fixnum/fixnum.Int32.==","comment":"<p>Returns true if this <a>fixnum/fixnum.Int32</a> has the same numeric value as the\ngiven object.  The argument may be an <a>dart-core.int</a> or an <a>fixnum/fixnum.IntX</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">":{"name":">","qualifiedName":"fixnum/fixnum.Int32.>","comment":"<p>Relational greater than operator.</p>","commentFrom":"fixnum.IntX.>","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">=":{"name":">=","qualifiedName":"fixnum/fixnum.Int32.>=","comment":"<p>Relational greater than or equal to operator.</p>","commentFrom":"fixnum.IntX.>=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">>":{"name":">>","qualifiedName":"fixnum/fixnum.Int32.>>","comment":"<p>Right bit-shift operator.</p>\n<p>Returns the result of shifting the bits of this integer by shiftAmount\nbits to the right. High-order bits are filled with zero in the case where\nthis integer is positive, or one in the case where it is negative.</p>","commentFrom":"fixnum.IntX.>>","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"^":{"name":"^","qualifiedName":"fixnum/fixnum.Int32.^","comment":"<p>Bitwise xor operator.</p>","commentFrom":"fixnum.IntX.^","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"fixnum/fixnum.Int32.unary-","comment":"<p>Negate operator.</p>\n<p>Note that <code>-MIN_VALUE</code> is equal to <code>MIN_VALUE</code> due to overflow.</p>","commentFrom":"fixnum.IntX.unary-","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{},"annotations":[]},"|":{"name":"|","qualifiedName":"fixnum/fixnum.Int32.|","comment":"<p>Bitwise or operator.</p>","commentFrom":"fixnum.IntX.|","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"~":{"name":"~","qualifiedName":"fixnum/fixnum.Int32.~","comment":"<p>Bitwise negate operator.</p>","commentFrom":"fixnum.IntX.~","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{},"annotations":[]},"~/":{"name":"~/","qualifiedName":"fixnum/fixnum.Int32.~/","comment":"<p>Truncating division operator.</p>","commentFrom":"fixnum.IntX.~/","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"abs":{"name":"abs","qualifiedName":"fixnum/fixnum.Int32.abs","comment":"<p>Returns the absolute value of this integer.</p>","commentFrom":"fixnum.IntX.abs","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{},"annotations":[]},"clamp":{"name":"clamp","qualifiedName":"fixnum/fixnum.Int32.clamp","comment":"<p>Clamps this integer to be in the range <a>fixnum/fixnum.Int32.clamp.lowerLimit</a> - <a>fixnum/fixnum.Int32.clamp.upperLimit</a>.</p>","commentFrom":"fixnum.IntX.clamp","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"lowerLimit":{"name":"lowerLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"upperLimit":{"name":"upperLimit","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"fixnum/fixnum.Int32.compareTo","comment":"","commentFrom":"fixnum.IntX.compareTo","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"numberOfLeadingZeros":{"name":"numberOfLeadingZeros","qualifiedName":"fixnum/fixnum.Int32.numberOfLeadingZeros","comment":"<p>Returns the number of high-order zeros in this integer's bit\nrepresentation.</p>","commentFrom":"fixnum.IntX.numberOfLeadingZeros","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"numberOfTrailingZeros":{"name":"numberOfTrailingZeros","qualifiedName":"fixnum/fixnum.Int32.numberOfTrailingZeros","comment":"<p>Returns the number of low-order zeros in this integer's bit representation.</p>","commentFrom":"fixnum.IntX.numberOfTrailingZeros","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parseHex":{"name":"parseHex","qualifiedName":"fixnum/fixnum.Int32.parseHex","comment":"<p>Parses a hexadecimal <a>dart-core.String</a> and returns an <a>fixnum/fixnum.Int32</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"s":{"name":"s","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseInt":{"name":"parseInt","qualifiedName":"fixnum/fixnum.Int32.parseInt","comment":"<p>Parses a decimal <a>dart-core.String</a> and returns an <a>fixnum/fixnum.Int32</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"s":{"name":"s","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseRadix":{"name":"parseRadix","qualifiedName":"fixnum/fixnum.Int32.parseRadix","comment":"<p>Parses a <a>dart-core.String</a> in a given <a>fixnum/fixnum.Int32.parseRadix.radix</a> between 2 and 16 and returns an\n<a>fixnum/fixnum.Int32</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"s":{"name":"s","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"radix":{"name":"radix","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remainder":{"name":"remainder","qualifiedName":"fixnum/fixnum.Int32.remainder","comment":"<p>Returns the remainder of the truncating division of this integer by\n<a>fixnum/fixnum.Int32.remainder.other</a>.</p>","commentFrom":"fixnum.IntX.remainder","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"shiftRightUnsigned":{"name":"shiftRightUnsigned","qualifiedName":"fixnum/fixnum.Int32.shiftRightUnsigned","comment":"<p>Unsigned right-shift operator.</p>\n<p>Returns the result of shifting the bits of this integer by shiftAmount\nbits to the right. High-order bits are filled with zeros.</p>","commentFrom":"fixnum.IntX.shiftRightUnsigned","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toBytes":{"name":"toBytes","qualifiedName":"fixnum/fixnum.Int32.toBytes","comment":"<p>Returns a byte-sequence representation of this integer.</p>\n<p>Returns a list of int, starting with the least significant byte.</p>","commentFrom":"fixnum.IntX.toBytes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"toDouble":{"name":"toDouble","qualifiedName":"fixnum/fixnum.Int32.toDouble","comment":"<p>Returns the double representation of this integer.</p>\n<p>On some platforms, inputs with large absolute values (i.e., > 2^52) may\nlose some of their low-order bits.</p>","commentFrom":"fixnum.IntX.toDouble","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"toHexString":{"name":"toHexString","qualifiedName":"fixnum/fixnum.Int32.toHexString","comment":"<p>Returns a string representing the value of this integer in hexadecimal\nnotation; example: <code>'0xd'</code>.</p>","commentFrom":"fixnum.IntX.toHexString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toInt":{"name":"toInt","qualifiedName":"fixnum/fixnum.Int32.toInt","comment":"<p>Returns the int representation of this integer.</p>\n<p>On some platforms, inputs with large absolute values (i.e., > 2^52) may\nlose some of their low-order bits.</p>","commentFrom":"fixnum.IntX.toInt","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"toInt32":{"name":"toInt32","qualifiedName":"fixnum/fixnum.Int32.toInt32","comment":"<p>Returns an Int32 representation of this integer.</p>\n<p>Narrower values are sign-extended and wider values have their high bits\ntruncated.</p>","commentFrom":"fixnum.IntX.toInt32","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{},"annotations":[]},"toInt64":{"name":"toInt64","qualifiedName":"fixnum/fixnum.Int32.toInt64","comment":"<p>Returns an Int64 representation of this integer.</p>","commentFrom":"fixnum.IntX.toInt64","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int64","inner":[]}],"parameters":{},"annotations":[]},"toRadixString":{"name":"toRadixString","qualifiedName":"fixnum/fixnum.Int32.toRadixString","comment":"<p>Returns a string representing the value of this integer in the given radix.</p>\n<p><a>fixnum/fixnum.Int32.toRadixString.radix</a> must be an integer in the range 2 .. 16, inclusive.</p>","commentFrom":"fixnum.IntX.toRadixString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"radix":{"name":"radix","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toSigned":{"name":"toSigned","qualifiedName":"fixnum/fixnum.Int32.toSigned","comment":"<p>Returns the least significant <a>fixnum/fixnum.Int32.toSigned.width</a> bits of this integer, extending the\nhighest retained bit to the sign.  This is the same as truncating the value\nto fit in <a>fixnum/fixnum.Int32.toSigned.width</a> bits using an signed 2-s complement representation.  The\nreturned value has the same bit value in all positions higher than <a>fixnum/fixnum.Int32.toSigned.width</a>.</p>\n<p>If the input value fits in <a>fixnum/fixnum.Int32.toSigned.width</a> bits without truncation, the result is\nthe same as the input.  The minimum width needed to avoid truncation of <code>x</code>\nis <code>x.bitLength + 1</code>, i.e.</p>\n<pre><code>x == x.toSigned(x.bitLength + 1);\n</code></pre>","commentFrom":"fixnum.IntX.toSigned","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"fixnum/fixnum.Int32.toString","comment":"<p>Returns a string representing the value of this integer in decimal\nnotation; example: <code>'13'</code>.</p>","commentFrom":"fixnum.IntX.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toUnsigned":{"name":"toUnsigned","qualifiedName":"fixnum/fixnum.Int32.toUnsigned","comment":"<p>Returns the least significant <a>fixnum/fixnum.Int32.toUnsigned.width</a> bits of this integer as a\nnon-negative number (i.e. unsigned representation).  The returned value has\nzeros in all bit positions higher than <a>fixnum/fixnum.Int32.toUnsigned.width</a>.</p>\n<p>If the input fits in <a>fixnum/fixnum.Int32.toUnsigned.width</a> bits without truncation, the result is the\nsame as the input.  The minimum width needed to avoid truncation of <code>x</code> is\ngiven by <code>x.bitLength</code>, i.e.</p>\n<pre><code>x == x.toUnsigned(x.bitLength);\n</code></pre>","commentFrom":"fixnum.IntX.toUnsigned","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"bitLength":{"name":"bitLength","qualifiedName":"fixnum/fixnum.Int32.bitLength","comment":"<p>Returns the minimum number of bits required to store this integer.</p>\n<p>The number of bits excludes the sign bit, which gives the natural length\nfor non-negative (unsigned) values.  Negative values are complemented to\nreturn the bit position of the first bit that differs from the sign bit.</p>\n<p>To find the the number of bits needed to store the value as a signed value,\nadd one, i.e. use <code>x.bitLength + 1</code>.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.bitLength","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"fixnum/fixnum.Int32.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>fixnum/fixnum.Int32.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"fixnum.IntX.hashCode","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEven":{"name":"isEven","qualifiedName":"fixnum/fixnum.Int32.isEven","comment":"<p>Returns <code>true</code> if and only if this integer is even.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.isEven","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isMaxValue":{"name":"isMaxValue","qualifiedName":"fixnum/fixnum.Int32.isMaxValue","comment":"<p>Returns <code>true</code> if and only if this integer is the maximum signed value\nthat can be represented within its bit size.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.isMaxValue","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isMinValue":{"name":"isMinValue","qualifiedName":"fixnum/fixnum.Int32.isMinValue","comment":"<p>Returns <code>true</code> if and only if this integer is the minimum signed value\nthat can be represented within its bit size.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.isMinValue","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNegative":{"name":"isNegative","qualifiedName":"fixnum/fixnum.Int32.isNegative","comment":"<p>Returns <code>true</code> if and only if this integer is less than zero.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.isNegative","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isOdd":{"name":"isOdd","qualifiedName":"fixnum/fixnum.Int32.isOdd","comment":"<p>Returns <code>true</code> if and only if this integer is odd.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.isOdd","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isZero":{"name":"isZero","qualifiedName":"fixnum/fixnum.Int32.isZero","comment":"<p>Returns <code>true</code> if and only if this integer is zero.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.isZero","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"fixnum/fixnum.Int32.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"%":{"name":"%","qualifiedName":"fixnum/fixnum.Int32.%","comment":"<p>Euclidean modulo operator.</p>\n<p>Returns the remainder of the euclidean division. The euclidean division\nof two integers <code>a</code> and <code>b</code> yields two integers <code>q</code> and <code>r</code> such that\n<code>a == b * q + r</code> and <code>0 &lt;= r &lt; a.abs()</code>.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.%","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"&":{"name":"&","qualifiedName":"fixnum/fixnum.Int32.&","comment":"<p>Bitwise and operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.&","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"*":{"name":"*","qualifiedName":"fixnum/fixnum.Int32.*","comment":"<p>Multiplication operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.*","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"fixnum/fixnum.Int32.+","comment":"<p>Addition operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.+","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"fixnum/fixnum.Int32.-","comment":"<p>Subtraction operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.-","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<":{"name":"<","qualifiedName":"fixnum/fixnum.Int32.<","comment":"<p>Relational less than operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.<","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<<":{"name":"<<","qualifiedName":"fixnum/fixnum.Int32.<<","comment":"<p>Left bit-shift operator.</p>\n<p>Returns the result of shifting the bits of this integer by <a>fixnum/fixnum.Int32.<<.shiftAmount</a>\nbits to the left. Low-order bits are filled with zeros.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.<<","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"shiftAmount":{"name":"shiftAmount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<=":{"name":"<=","qualifiedName":"fixnum/fixnum.Int32.<=","comment":"<p>Relational less than or equal to operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.<=","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"==":{"name":"==","qualifiedName":"fixnum/fixnum.Int32.==","comment":"<p>Returns <code>true</code> if and only if <a>fixnum/fixnum.Int32.==.other</a> is an int or IntX equal in\nvalue to this integer.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.==","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">":{"name":">","qualifiedName":"fixnum/fixnum.Int32.>","comment":"<p>Relational greater than operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.>","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">=":{"name":">=","qualifiedName":"fixnum/fixnum.Int32.>=","comment":"<p>Relational greater than or equal to operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.>=","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">>":{"name":">>","qualifiedName":"fixnum/fixnum.Int32.>>","comment":"<p>Right bit-shift operator.</p>\n<p>Returns the result of shifting the bits of this integer by <a>fixnum/fixnum.Int32.>>.shiftAmount</a>\nbits to the right. High-order bits are filled with zero in the case where\nthis integer is positive, or one in the case where it is negative.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.>>","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"shiftAmount":{"name":"shiftAmount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"^":{"name":"^","qualifiedName":"fixnum/fixnum.Int32.^","comment":"<p>Bitwise xor operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.^","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"fixnum/fixnum.Int32.unary-","comment":"<p>Negate operator.</p>\n<p>Note that <code>-MIN_VALUE</code> is equal to <code>MIN_VALUE</code> due to overflow.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.unary-","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{},"annotations":[]},"|":{"name":"|","qualifiedName":"fixnum/fixnum.Int32.|","comment":"<p>Bitwise or operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.|","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"~":{"name":"~","qualifiedName":"fixnum/fixnum.Int32.~","comment":"<p>Bitwise negate operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.~","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{},"annotations":[]},"~/":{"name":"~/","qualifiedName":"fixnum/fixnum.Int32.~/","comment":"<p>Truncating division operator.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.~/","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"abs":{"name":"abs","qualifiedName":"fixnum/fixnum.Int32.abs","comment":"<p>Returns the absolute value of this integer.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.abs","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{},"annotations":[]},"clamp":{"name":"clamp","qualifiedName":"fixnum/fixnum.Int32.clamp","comment":"<p>Clamps this integer to be in the range <a>fixnum/fixnum.Int32.clamp.lowerLimit</a> - <a>fixnum/fixnum.Int32.clamp.upperLimit</a>.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.clamp","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"lowerLimit":{"name":"lowerLimit","optional":false,"named":false,"default":false,"type":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"value":null,"annotations":[]},"upperLimit":{"name":"upperLimit","optional":false,"named":false,"default":false,"type":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"fixnum/fixnum.Int32.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>fixnum/fixnum.Int32.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>fixnum/fixnum.Int32.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>fixnum/fixnum.Int32.compareTo.other</a>,\nand zero if <code>this</code> and <a>fixnum/fixnum.Int32.compareTo.other</a> are ordered together.</p>\n<p>The <a>fixnum/fixnum.Int32.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"dart-core.Comparable.compareTo","inheritedFrom":"fixnum.IntX.compareTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"fixnum/fixnum.Int32.noSuchMethod","comment":"<p><a>fixnum/fixnum.Int32.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>fixnum/fixnum.Int32.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>fixnum/fixnum.Int32.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>fixnum/fixnum.Int32.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"numberOfLeadingZeros":{"name":"numberOfLeadingZeros","qualifiedName":"fixnum/fixnum.Int32.numberOfLeadingZeros","comment":"<p>Returns the number of high-order zeros in this integer's bit\nrepresentation.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.numberOfLeadingZeros","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"numberOfTrailingZeros":{"name":"numberOfTrailingZeros","qualifiedName":"fixnum/fixnum.Int32.numberOfTrailingZeros","comment":"<p>Returns the number of low-order zeros in this integer's bit representation.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.numberOfTrailingZeros","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"remainder":{"name":"remainder","qualifiedName":"fixnum/fixnum.Int32.remainder","comment":"<p>Returns the remainder of the truncating division of this integer by\n<a>fixnum/fixnum.Int32.remainder.other</a>.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.remainder","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"shiftRightUnsigned":{"name":"shiftRightUnsigned","qualifiedName":"fixnum/fixnum.Int32.shiftRightUnsigned","comment":"<p>Unsigned right-shift operator.</p>\n<p>Returns the result of shifting the bits of this integer by <a>fixnum/fixnum.Int32.shiftRightUnsigned.shiftAmount</a>\nbits to the right. High-order bits are filled with zeros.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.shiftRightUnsigned","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"shiftAmount":{"name":"shiftAmount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toBytes":{"name":"toBytes","qualifiedName":"fixnum/fixnum.Int32.toBytes","comment":"<p>Returns a byte-sequence representation of this integer.</p>\n<p>Returns a list of int, starting with the least significant byte.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toBytes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"toDouble":{"name":"toDouble","qualifiedName":"fixnum/fixnum.Int32.toDouble","comment":"<p>Returns the double representation of this integer.</p>\n<p>On some platforms, inputs with large absolute values (i.e., > 2^52) may\nlose some of their low-order bits.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toDouble","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"toHexString":{"name":"toHexString","qualifiedName":"fixnum/fixnum.Int32.toHexString","comment":"<p>Returns a string representing the value of this integer in hexadecimal\nnotation; example: <code>'0xd'</code>.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toHexString","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toInt":{"name":"toInt","qualifiedName":"fixnum/fixnum.Int32.toInt","comment":"<p>Returns the int representation of this integer.</p>\n<p>On some platforms, inputs with large absolute values (i.e., > 2^52) may\nlose some of their low-order bits.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toInt","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"toInt32":{"name":"toInt32","qualifiedName":"fixnum/fixnum.Int32.toInt32","comment":"<p>Returns an Int32 representation of this integer.</p>\n<p>Narrower values are sign-extended and wider values have their high bits\ntruncated.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toInt32","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.Int32","inner":[]}],"parameters":{},"annotations":[]},"toInt64":{"name":"toInt64","qualifiedName":"fixnum/fixnum.Int32.toInt64","comment":"<p>Returns an Int64 representation of this integer.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toInt64","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.Int64","inner":[]}],"parameters":{},"annotations":[]},"toRadixString":{"name":"toRadixString","qualifiedName":"fixnum/fixnum.Int32.toRadixString","comment":"<p>Returns a string representing the value of this integer in the given radix.</p>\n<p><a>fixnum/fixnum.Int32.toRadixString.radix</a> must be an integer in the range 2 .. 16, inclusive.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toRadixString","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"radix":{"name":"radix","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toSigned":{"name":"toSigned","qualifiedName":"fixnum/fixnum.Int32.toSigned","comment":"<p>Returns the least significant <a>fixnum/fixnum.Int32.toSigned.width</a> bits of this integer, extending the\nhighest retained bit to the sign.  This is the same as truncating the value\nto fit in <a>fixnum/fixnum.Int32.toSigned.width</a> bits using an signed 2-s complement representation.  The\nreturned value has the same bit value in all positions higher than <a>fixnum/fixnum.Int32.toSigned.width</a>.</p>\n<p>If the input value fits in <a>fixnum/fixnum.Int32.toSigned.width</a> bits without truncation, the result is\nthe same as the input.  The minimum width needed to avoid truncation of <code>x</code>\nis <code>x.bitLength + 1</code>, i.e.</p>\n<pre><code>x == x.toSigned(x.bitLength + 1);\n</code></pre>","commentFrom":"","inheritedFrom":"fixnum.IntX.toSigned","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"fixnum/fixnum.Int32.toString","comment":"<p>Returns a string representing the value of this integer in decimal\nnotation; example: <code>'13'</code>.</p>","commentFrom":"","inheritedFrom":"fixnum.IntX.toString","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toUnsigned":{"name":"toUnsigned","qualifiedName":"fixnum/fixnum.Int32.toUnsigned","comment":"<p>Returns the least significant <a>fixnum/fixnum.Int32.toUnsigned.width</a> bits of this integer as a\nnon-negative number (i.e. unsigned representation).  The returned value has\nzeros in all bit positions higher than <a>fixnum/fixnum.Int32.toUnsigned.width</a>.</p>\n<p>If the input fits in <a>fixnum/fixnum.Int32.toUnsigned.width</a> bits without truncation, the result is the\nsame as the input.  The minimum width needed to avoid truncation of <code>x</code> is\ngiven by <code>x.bitLength</code>, i.e.</p>\n<pre><code>x == x.toUnsigned(x.bitLength);\n</code></pre>","commentFrom":"","inheritedFrom":"fixnum.IntX.toUnsigned","static":false,"abstract":true,"constant":false,"return":[{"outer":"fixnum/fixnum.IntX","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}