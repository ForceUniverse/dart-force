{"name":"StringBuffer","qualifiedName":"dart-core.StringBuffer","comment":"<p>A class for concatenating strings efficiently.</p>\n<p>Allows for the incremental building of a string using write*() methods.\nThe strings are concatenated to a single string only when <a>dart-core.StringBuffer.toString</a> is\ncalled.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.StringSink"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isEmpty":{"name":"isEmpty","qualifiedName":"dart-core.StringBuffer.isEmpty","comment":"<p>Returns whether the buffer is empty. This is a constant-time operation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-core.StringBuffer.isNotEmpty","comment":"<p>Returns whether the buffer is not empty. This is a constant-time\noperation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-core.StringBuffer.length","comment":"<p>Returns the length of the content that has been accumulated so far.\nThis is a constant-time operation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.StringBuffer.StringBuffer-","comment":"<p>Creates the string buffer with an initial content.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"content":{"name":"content","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"clear":{"name":"clear","qualifiedName":"dart-core.StringBuffer.clear","comment":"<p>Clears the string buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.StringBuffer.toString","comment":"<p>Returns the contents of buffer as a concatenated string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"write":{"name":"write","qualifiedName":"dart-core.StringBuffer.write","comment":"<p>Adds the contents of <a>dart-core.StringBuffer.write.obj</a>, converted to a string, to the buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeAll":{"name":"writeAll","qualifiedName":"dart-core.StringBuffer.writeAll","comment":"<p>Iterates over the given <a>dart-core.StringBuffer.writeAll.objects</a> and <a>dart-core.StringBuffer.write</a>s them in sequence.</p>","commentFrom":"dart-core.StringSink.writeAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"objects":{"name":"objects","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"writeCharCode":{"name":"writeCharCode","qualifiedName":"dart-core.StringBuffer.writeCharCode","comment":"<p>Adds the string representation of <a>dart-core.StringBuffer.writeCharCode.charCode</a> to the buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"charCode":{"name":"charCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeln":{"name":"writeln","qualifiedName":"dart-core.StringBuffer.writeln","comment":"<p>Converts <a>dart-core.StringBuffer.writeln.obj</a> to a String by invoking <a>dart-core.StringBuffer.toString</a> and \nadds the result to <code>this</code>, followed by a newline.</p>","commentFrom":"dart-core.StringSink.writeln","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.StringBuffer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.StringBuffer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.StringBuffer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.StringBuffer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.StringBuffer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.StringBuffer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.StringBuffer.noSuchMethod","comment":"<p><a>dart-core.StringBuffer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.StringBuffer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.StringBuffer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.StringBuffer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.StringBuffer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"write":{"name":"write","qualifiedName":"dart-core.StringBuffer.write","comment":"<p>Converts <a>dart-core.StringBuffer.write.obj</a> to a String by invoking <a>dart-core.StringBuffer.toString</a> and \nadds the result to <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.write","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeAll":{"name":"writeAll","qualifiedName":"dart-core.StringBuffer.writeAll","comment":"<p>Iterates over the given <a>dart-core.StringBuffer.writeAll.objects</a> and <a>dart-core.StringBuffer.write</a>s them in sequence.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.writeAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"objects":{"name":"objects","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"writeCharCode":{"name":"writeCharCode","qualifiedName":"dart-core.StringBuffer.writeCharCode","comment":"<p>Writes the <a>dart-core.StringBuffer.writeCharCode.charCode</a> to <code>this</code>.</p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.writeCharCode","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"charCode":{"name":"charCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeln":{"name":"writeln","qualifiedName":"dart-core.StringBuffer.writeln","comment":"<p>Converts <a>dart-core.StringBuffer.writeln.obj</a> to a String by invoking <a>dart-core.StringBuffer.toString</a> and \nadds the result to <code>this</code>, followed by a newline.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.writeln","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}