{"name":"MirrorSystem","qualifiedName":"dart-mirrors.MirrorSystem","comment":"<p>A <a>dart-mirrors.MirrorSystem</a> is the main interface used to reflect on a set of\nassociated libraries.</p>\n<p>At runtime each running isolate has a distinct <a>dart-mirrors.MirrorSystem</a>.</p>\n<p>It is also possible to have a <a>dart-mirrors.MirrorSystem</a> which represents a set\nof libraries which are not running -- perhaps at compile-time.  In\nthis case, all available reflective functionality would be\nsupported, but runtime functionality (such as invoking a function\nor inspecting the contents of a variable) would fail dynamically.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"dynamicType":{"name":"dynamicType","qualifiedName":"dart-mirrors.MirrorSystem.dynamicType","comment":"<p>A mirror on the <code>dynamic</code> type.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.TypeMirror","inner":[]}],"parameters":{},"annotations":[]},"isolate":{"name":"isolate","qualifiedName":"dart-mirrors.MirrorSystem.isolate","comment":"<p>A mirror on the isolate associated with this <a>dart-mirrors.MirrorSystem</a>.\nThis may be null if this mirror system is not running.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.IsolateMirror","inner":[]}],"parameters":{},"annotations":[]},"libraries":{"name":"libraries","qualifiedName":"dart-mirrors.MirrorSystem.libraries","comment":"<p>Returns an immutable map from URIs to mirrors for all\nlibraries known to this mirror system.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Uri","inner":[]},{"outer":"dart-mirrors.LibraryMirror","inner":[]}]}],"parameters":{},"annotations":[]},"voidType":{"name":"voidType","qualifiedName":"dart-mirrors.MirrorSystem.voidType","comment":"<p>A mirror on the <code>void</code> type.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-mirrors.TypeMirror","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"findLibrary":{"name":"findLibrary","qualifiedName":"dart-mirrors.MirrorSystem.findLibrary","comment":"<p>Returns the unique library named <a>dart-mirrors.MirrorSystem.findLibrary.libraryName</a> if it exists.</p>\n<p>If no unique library exists, an error is thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-mirrors.LibraryMirror","inner":[]}],"parameters":{"libraryName":{"name":"libraryName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getName":{"name":"getName","qualifiedName":"dart-mirrors.MirrorSystem.getName","comment":"<p>Returns the name of <a>dart-mirrors.MirrorSystem.getName.symbol</a>.</p>\n<p>The following text is non-normative:</p>\n<p>Using this method may result in larger output.  If possible, use\n<a>dart-mirrors.MirrorsUsed</a> to specify which symbols must be retained in clear text.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"symbol":{"name":"symbol","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getSymbol":{"name":"getSymbol","qualifiedName":"dart-mirrors.MirrorSystem.getSymbol","comment":"<p>Returns a symbol for <a>dart-mirrors.MirrorSystem.getSymbol.name</a>. If <a>dart-mirrors.MirrorSystem.getSymbol.library</a> is not a <a>dart-mirrors.LibraryMirror</a> or if\n<a>dart-mirrors.MirrorSystem.getSymbol.name</a> is a private identifier and <a>dart-mirrors.MirrorSystem.getSymbol.library</a> is <code>null</code>, throws an\n<a>dart-core.ArgumentError</a>. If <a>dart-mirrors.MirrorSystem.getSymbol.name</a> is a private identifier, the symbol returned is\nwith respect to <a>dart-mirrors.MirrorSystem.getSymbol.library</a>.</p>\n<p>The following text is non-normative:</p>\n<p>Using this method may result in larger output.  If possible, use\nthe const constructor of Symbol or symbol literals.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Symbol","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"library":{"name":"library","optional":true,"named":false,"default":false,"type":[{"outer":"dart-mirrors.LibraryMirror","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-mirrors.MirrorSystem.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-mirrors.MirrorSystem.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-mirrors.MirrorSystem.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-mirrors.MirrorSystem.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-mirrors.MirrorSystem.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-mirrors.MirrorSystem.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-mirrors.MirrorSystem.noSuchMethod","comment":"<p><a>dart-mirrors.MirrorSystem.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-mirrors.MirrorSystem.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-mirrors.MirrorSystem.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-mirrors.MirrorSystem.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-mirrors.MirrorSystem.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}