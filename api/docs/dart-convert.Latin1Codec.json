{"name":"Latin1Codec","qualifiedName":"dart-convert.Latin1Codec","comment":"<p>A LatinCodec encodes strings to ISO Latin-1 (aka ISO-8859-1) bytes\nand decodes Latin-1 bytes to strings.</p>","isAbstract":false,"superclass":"dart-convert.Encoding","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"decoder":{"name":"decoder","qualifiedName":"dart-convert.Latin1Codec.decoder","comment":"<p>Returns the decoder of <code>this</code>, converting from <a>dart-convert.Codec.T</a> to <a>dart-convert.Codec.S</a>.</p>\n<p>It may be stateful an should not be reused.</p>","commentFrom":"dart-convert.Codec.decoder","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"encoder":{"name":"encoder","qualifiedName":"dart-convert.Latin1Codec.encoder","comment":"<p>Returns the encoder from <a>dart-convert.Codec.S</a> to <a>dart-convert.Codec.T</a>.</p>\n<p>It may be stateful and should not be reused.</p>","commentFrom":"dart-convert.Codec.encoder","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"dart-convert.Latin1Codec.name","comment":"<p>Name of the encoding.</p>\n<p>If the encoding is standardized, this is the lower-case version of one of\nthe IANA official names for the character set (see\nhttp://www.iana.org/assignments/character-sets/character-sets.xml)</p>","commentFrom":"dart-convert.Encoding.name","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-convert.Latin1Codec.Latin1Codec-","comment":"<p>Instantiates a new <a>dart-convert.Latin1Codec</a>.</p>\n<p>If <a>dart-convert.Latin1Codec.Latin1Codec-.allowInvalid</a> is true, the <a>dart-convert.Latin1Codec.decode</a> method and the converter\nreturned by <a>dart-convert.Latin1Codec.decoder</a> will default to allowing invalid values. Invalid\nvalues are decoded into the Unicode Replacement character (U+FFFD).\nCalls to the <a>dart-convert.Latin1Codec.decode</a> method can override this default.</p>\n<p>Encoders will not accept invalid (non Latin-1) characters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"allowInvalid":{"name":"allowInvalid","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"decode":{"name":"decode","qualifiedName":"dart-convert.Latin1Codec.decode","comment":"<p>Decodes the Latin-1 <a>dart-convert.Latin1Codec.decode.bytes</a> (a list of unsigned 8-bit integers) to the\ncorresponding string.</p>\n<p>If <a>dart-convert.Latin1Codec.decode.bytes</a> contains values that are not in the range 0 .. 255, the decoder\nwill eventually throw a <a>dart-core.FormatException</a>.</p>\n<p>If <a>dart-convert.Latin1Codec.decode.allowInvalid</a> is not provided, it defaults to the value used to create\nthis <a>dart-convert.Latin1Codec</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"allowInvalid":{"name":"allowInvalid","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"decoder":{"name":"decoder","qualifiedName":"dart-convert.Latin1Codec.decoder","comment":"<p>Returns the decoder of <code>this</code>, converting from <a>dart-convert.Codec.T</a> to <a>dart-convert.Codec.S</a>.</p>\n<p>It may be stateful an should not be reused.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.decoder","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"encoder":{"name":"encoder","qualifiedName":"dart-convert.Latin1Codec.encoder","comment":"<p>Returns the encoder from <a>dart-convert.Codec.S</a> to <a>dart-convert.Codec.T</a>.</p>\n<p>It may be stateful and should not be reused.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.encoder","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-convert.Latin1Codec.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-convert.Latin1Codec.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inverted":{"name":"inverted","qualifiedName":"dart-convert.Latin1Codec.inverted","comment":"<p>Inverts <code>this</code>.</p>\n<p>The <a>dart-convert.Latin1Codec.encoder</a> and <a>dart-convert.Latin1Codec.decoder</a> of the resulting codec are swapped.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.inverted","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Codec","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"dart-convert.Latin1Codec.name","comment":"<p>Name of the encoding.</p>\n<p>If the encoding is standardized, this is the lower-case version of one of\nthe IANA official names for the character set (see\nhttp://www.iana.org/assignments/character-sets/character-sets.xml)</p>","commentFrom":"","inheritedFrom":"dart-convert.Encoding.name","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-convert.Latin1Codec.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-convert.Latin1Codec.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-convert.Latin1Codec.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-convert.Latin1Codec.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"decode":{"name":"decode","qualifiedName":"dart-convert.Latin1Codec.decode","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Codec.decode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"encoded":{"name":"encoded","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeStream":{"name":"decodeStream","qualifiedName":"dart-convert.Latin1Codec.decodeStream","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Encoding.decodeStream","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"byteStream":{"name":"byteStream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":null,"annotations":[]}},"annotations":[]},"encode":{"name":"encode","qualifiedName":"dart-convert.Latin1Codec.encode","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Codec.encode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec.S","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"dart-convert.Latin1Codec.fuse","comment":"<p>Fuses <code>this</code> with <code>other</code>.</p>\n<p>When encoding, the resulting codec encodes with <code>this</code> before\nencoding with <a>dart-convert.Latin1Codec.fuse.other</a>.</p>\n<p>When decoding, the resulting codec decodes with <a>dart-convert.Latin1Codec.fuse.other</a> before decoding\nwith <code>this</code>.</p>\n<p>In some cases one needs to use the <a>dart-convert.Latin1Codec.inverted</a> codecs to be able to fuse\nthem correctly. That is, the output type of <code>this</code> (<a>dart-convert.Codec.T</a>) must match the\ninput type of the second codec <a>dart-convert.Latin1Codec.fuse.other</a>.</p>\n<p>Examples:</p>\n<pre><code>final JSON_TO_BYTES = JSON.fuse(UTF8);\nList&lt;int&gt; bytes = JSON_TO_BYTES.encode([\"json-object\"]);\nvar decoded = JSON_TO_BYTES.decode(bytes);\nassert(decoded is List &amp;&amp; decoded[0] == \"json-object\");\n\nvar inverted = JSON.inverted;\nvar jsonIdentity = JSON.fuse(inverted);\nvar jsonObject = jsonIdentity.encode([\"1\", 2]);\nassert(jsonObject is List &amp;&amp; jsonObject[0] == \"1\" &amp;&amp; jsonObject[1] == 2);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-convert.Codec.fuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Codec","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-convert.Latin1Codec.noSuchMethod","comment":"<p><a>dart-convert.Latin1Codec.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-convert.Latin1Codec.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-convert.Latin1Codec.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-convert.Latin1Codec.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-convert.Latin1Codec.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}