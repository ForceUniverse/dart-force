{"name":"InternetAddress","qualifiedName":"dart-io.InternetAddress","comment":"<p>An internet address.</p>\n<p>This object holds an internet address. If this internet address\nis the result of a DNS lookup, the address also holds the hostname\nused to make the lookup.\nAn Internet address combined with a port number represents an\nendpoint to which a socket can connect or a listening socket can\nbind.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"type":{"name":"type","qualifiedName":"dart-io.InternetAddress.type","comment":"<p>The <a>dart-io.InternetAddress.type</a> of the <a>dart-io.InternetAddress</a> specified what IP protocol.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-io.InternetAddressType","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"ANY_IP_V4":{"name":"ANY_IP_V4","qualifiedName":"dart-io.InternetAddress.ANY_IP_V4","comment":"<p>IP version 4 any address. Use this address when listening on\nall adapters IP addresses using IP version 4 (IPv4).</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"ANY_IP_V6":{"name":"ANY_IP_V6","qualifiedName":"dart-io.InternetAddress.ANY_IP_V6","comment":"<p>IP version 6 any address. Use this address when listening on\nall adapters IP addresses using IP version 6 (IPv6).</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"LOOPBACK_IP_V4":{"name":"LOOPBACK_IP_V4","qualifiedName":"dart-io.InternetAddress.LOOPBACK_IP_V4","comment":"<p>IP version 4 loopback address. Use this address when listening on\nor connecting to the loopback adapter using IP version 4 (IPv4).</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"LOOPBACK_IP_V6":{"name":"LOOPBACK_IP_V6","qualifiedName":"dart-io.InternetAddress.LOOPBACK_IP_V6","comment":"<p>IP version 6 loopback address. Use this address when listening on\nor connecting to the loopback adapter using IP version 6 (IPv6).</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{},"annotations":[]},"address":{"name":"address","qualifiedName":"dart-io.InternetAddress.address","comment":"<p>The numeric address of the host. For IPv4 addresses this is using\nthe dotted-decimal notation. For IPv6 it is using the\nhexadecimal representation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"host":{"name":"host","qualifiedName":"dart-io.InternetAddress.host","comment":"<p>The host used to lookup the address. If there is no host\nassociated with the address this returns the numeric address.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"isLinkLocal":{"name":"isLinkLocal","qualifiedName":"dart-io.InternetAddress.isLinkLocal","comment":"<p>Returns true if the <a>dart-io.InternetAddress</a>s scope is a link-local.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isLoopback":{"name":"isLoopback","qualifiedName":"dart-io.InternetAddress.isLoopback","comment":"<p>Returns true if the <a>dart-io.InternetAddress</a> is a loopback address.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isMulticast":{"name":"isMulticast","qualifiedName":"dart-io.InternetAddress.isMulticast","comment":"<p>Returns true if the <a>dart-io.InternetAddress</a>s scope is multicast.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"rawAddress":{"name":"rawAddress","qualifiedName":"dart-io.InternetAddress.rawAddress","comment":"<p>Get the raw address of this <a>dart-io.InternetAddress</a>. The result is either a\n4 or 16 byte long list. The returned list is a copy, making it possible\nto change the list without modifying the <a>dart-io.InternetAddress</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-io.InternetAddress.InternetAddress-","comment":"<p>Creates a new <a>dart-io.InternetAddress</a> from a numeric address.</p>\n<p>If the address in <a>dart-io.InternetAddress.InternetAddress-.address</a> is not a numeric IPv4\n(dotted-decimal notation) or IPv6 (hexadecimal representation).\naddress <a>dart-core.ArgumentError</a> is thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.InternetAddress","inner":[]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"lookup":{"name":"lookup","qualifiedName":"dart-io.InternetAddress.lookup","comment":"<p>Lookup a host, returning a Future of a list of\n<a>dart-io.InternetAddress</a>s. If <a>dart-io.InternetAddress.lookup.type</a> is <a>dart-io.InternetAddressType.ANY</a>, it\nwill lookup both IP version 4 (IPv4) and IP version 6 (IPv6)\naddresses. If <a>dart-io.InternetAddress.lookup.type</a> is either <a>dart-io.InternetAddressType.IP_V4</a> or\n<a>dart-io.InternetAddressType.IP_V6</a> it will only lookup addresses of the\nspecified type. The order of the list can, and most likely will,\nchange over time.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-io.InternetAddress","inner":[]}]}]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":true,"named":true,"default":true,"type":[{"outer":"dart-io.InternetAddressType","inner":[]}],"value":"ConstructedConstant(InternetAddressType(\"_value\"=Instance of 'IntConstant'))","annotations":[]}},"annotations":[]},"reverse":{"name":"reverse","qualifiedName":"dart-io.InternetAddress.reverse","comment":"<p>Perform a reverse dns lookup on the <a>dart-io.InternetAddress.address</a>, creating a new\n<a>dart-io.InternetAddress</a> where the host field set to the result.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.InternetAddress","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.InternetAddress.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.InternetAddress.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.InternetAddress.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.InternetAddress.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.InternetAddress.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.InternetAddress.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.InternetAddress.noSuchMethod","comment":"<p><a>dart-io.InternetAddress.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.InternetAddress.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.InternetAddress.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.InternetAddress.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.InternetAddress.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}