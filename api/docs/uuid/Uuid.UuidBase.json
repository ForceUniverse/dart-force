{"name":"UuidBase","qualifiedName":"uuid/Uuid.UuidBase","comment":"<p>uuid for Dart</p>\n<p> Copyright (c) 2012 Yulian Kuncheff</p>\n<p> Released under MIT License.</p>\n<p> Based on node-uuid by Robert Kieffer.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"NAMESPACE_DNS":{"name":"NAMESPACE_DNS","qualifiedName":"uuid/Uuid.UuidBase.NAMESPACE_DNS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NAMESPACE_NIL":{"name":"NAMESPACE_NIL","qualifiedName":"uuid/Uuid.UuidBase.NAMESPACE_NIL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NAMESPACE_OID":{"name":"NAMESPACE_OID","qualifiedName":"uuid/Uuid.UuidBase.NAMESPACE_OID","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NAMESPACE_URL":{"name":"NAMESPACE_URL","qualifiedName":"uuid/Uuid.UuidBase.NAMESPACE_URL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NAMESPACE_X500":{"name":"NAMESPACE_X500","qualifiedName":"uuid/Uuid.UuidBase.NAMESPACE_X500","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"TAU":{"name":"TAU","qualifiedName":"uuid/Uuid.UuidBase.TAU","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"uuid/Uuid.UuidBase.UuidBase-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"cryptoRNG":{"name":"cryptoRNG","qualifiedName":"uuid/Uuid.UuidBase.cryptoRNG","comment":"<p>AES-based RNG. All platforms, unknown speed, cryptographically strong (theoretically)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[]}],"parameters":{},"annotations":[]},"initCipher":{"name":"initCipher","qualifiedName":"uuid/Uuid.UuidBase.initCipher","comment":"","commentFrom":"Uuid.UuidBase.initCipher","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"initCipher":{"name":"initCipher","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"mathRNG":{"name":"mathRNG","qualifiedName":"uuid/Uuid.UuidBase.mathRNG","comment":"<p>Math.Random()-based RNG. All platforms, fast, not cryptographically strong.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[]}],"parameters":{},"annotations":[]},"parse":{"name":"parse","qualifiedName":"uuid/Uuid.UuidBase.parse","comment":"<p>Parses the provided <a>uuid/Uuid.UuidBase.parse.uuid</a> into a list of byte values.\nCan optionally be provided a <a>uuid/Uuid.UuidBase.parse.buffer</a> to write into and\n a positional <a>uuid/Uuid.UuidBase.parse.offset</a> for where to start inputting into the buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[]}],"parameters":{"uuid":{"name":"uuid","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"buffer":{"name":"buffer","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"unparse":{"name":"unparse","qualifiedName":"uuid/Uuid.UuidBase.unparse","comment":"<p>Unparses a <a>uuid/Uuid.UuidBase.unparse.buffer</a> of bytes and outputs a proper UUID string.\nAn optional <a>uuid/Uuid.UuidBase.unparse.offset</a> is allowed if you want to start at a different point\n in the buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"v1":{"name":"v1","qualifiedName":"uuid/Uuid.UuidBase.v1","comment":"<p>v1() Generates a time-based version 1 UUID</p>\n<p>By default it will generate a string based off current time, and will\nreturn a string.</p>\n<p>If an optional <a>uuid/Uuid.UuidBase.v1.buffer</a> list is provided, it will put the byte data into\nthat buffer and return a buffer.</p>\n<p>Optionally an <a>uuid/Uuid.UuidBase.v1.offset</a> can be provided with a start position in the buffer.</p>\n<p>The first argument is an options map that takes various configuration\noptions detailed in the readme.</p>\n<p>http://tools.ietf.org/html/rfc4122.html#section-4.2.2</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"options":{"name":"options","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]},"buffer":{"name":"buffer","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"v4":{"name":"v4","qualifiedName":"uuid/Uuid.UuidBase.v4","comment":"<p>v4() Generates a time-based version 4 UUID</p>\n<p>By default it will generate a string based AES-based RNG, and will return\na string.</p>\n<p>If an optional <a>uuid/Uuid.UuidBase.v4.buffer</a> list is provided, it will put the byte data into\nthat buffer and return a buffer.</p>\n<p>Optionally an <a>uuid/Uuid.UuidBase.v4.offset</a> can be provided with a start position in the buffer.</p>\n<p>The first argument is an options map that takes various configuration\noptions detailed in the readme.</p>\n<p>http://tools.ietf.org/html/rfc4122.html#section-4.4</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"options":{"name":"options","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]},"buffer":{"name":"buffer","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"v5":{"name":"v5","qualifiedName":"uuid/Uuid.UuidBase.v5","comment":"<p>v5() Generates a namspace &amp; name-based version 5 UUID</p>\n<p>By default it will generate a string based on a provided uuid namespace and\nname, and will return a string.</p>\n<p>If an optional <a>uuid/Uuid.UuidBase.v5.buffer</a> list is provided, it will put the byte data into\nthat buffer and return a buffer.</p>\n<p>Optionally an <a>uuid/Uuid.UuidBase.v5.offset</a> can be provided with a start position in the buffer.</p>\n<p>The first argument is an options map that takes various configuration\noptions detailed in the readme.</p>\n<p>http://tools.ietf.org/html/rfc4122.html#section-4.4</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"namespace":{"name":"namespace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"options":{"name":"options","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]},"buffer":{"name":"buffer","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"uuid/Uuid.UuidBase.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>uuid/Uuid.UuidBase.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"uuid/Uuid.UuidBase.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"uuid/Uuid.UuidBase.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>uuid/Uuid.UuidBase.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>uuid/Uuid.UuidBase.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"uuid/Uuid.UuidBase.noSuchMethod","comment":"<p><a>uuid/Uuid.UuidBase.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>uuid/Uuid.UuidBase.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>uuid/Uuid.UuidBase.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>uuid/Uuid.UuidBase.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"uuid/Uuid.UuidBase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}