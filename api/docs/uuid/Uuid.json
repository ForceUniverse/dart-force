{"name":"Uuid","qualifiedName":"uuid/Uuid","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"UuidBase","qualifiedName":"uuid/Uuid.UuidBase","preview":"<p>uuid for Dart</p>"}],"typedef":{},"error":[]},"packageName":"uuid","packageIntro":"<p><a href=\"https://drone.io/daegalus/dart-uuid/latest\"><a href=\"https://drone.io/daegalus/dart-uuid/status.png\"><img src=\"https://drone.io/daegalus/dart-uuid/status.png\"></img></a></a></p>\n<h2>v0.3.0 is a big breaking change. Please make sure if you update to this version you are aware of the changes.</h2>\n<h1>dart-uuid</h1>\n<p>Simple, fast generation of <a href=\"http://www.ietf.org/rfc/rfc4122.txt\">RFC4122</a> UUIDs.</p>\n<p>Heavily based on node-uuid by Robert Kieffer (I even copied this readme over and modified it.) \nPrimarily becaue it works, well written, and so on.</p>\n<p>Features:</p><ul><li>Generate RFC4122 version 1, version 4, or version 5 UUIDs</li><li>Runs in dartvm and hopefully browsers too.</li><li>Cryptographically strong random # generation on all platforms</li><li><a href=\"http://daegalus.github.com/annotated/dart-uuid/Uuid/Uuid.html\">Annotated source code</a></li></ul>\n<h2>Getting Started</h2>\n<h3>Instructions</h3><ol><li>Install and configure pub (http://www.dartlang.org/docs/pub-package-manager/#installing-and-configuring-pub)</li><li>Open a command line and cd to your projects root folder</li><li>In your pubspec, add an entry for dart-uuid to your dependencies (example below)</li><li>pub install</li><li>If you wish to run tests, go into packages/dart-uuid/ and run 'dart test/uuid_test.dart'</li></ol>\n<h3>Pubspec</h3>\n<p>There are 2 options. Directly from git, or from pub.dartlang.org</p>\n<p>pub.dartlang.org: (you can use 'any' instead of a version if you just want the latest always)</p>\n<pre class=\"yaml\"><code>dependencies:\n  uuid: 0.3.2\n</code></pre>\n<pre class=\"dart\"><code>import 'package:uuid/uuid_server.dart'; // or uuid/uuid_client.dart for the browser\n\nvar uuid = new Uuid();\n</code></pre>\n<p>Then create some ids ...</p>\n<pre class=\"dart\"><code>// Generate a v1 (time-based) id\nuuid.v1(); // -&gt; '6c84fb90-12c4-11e1-840d-7b25c5ee775a'\n\n// Generate a v4 (random) id\nuuid.v4(); // -&gt; '110ec58a-a0f2-4ac4-8393-c866d813b8d1'\n\n// Generate a v5 (namespace-name-sha1-based) id\nuuid.v5(uuid.NAMESPACE_URL, 'www.google.com'); // -&gt; 'c74a196f-f19d-5ea9-bffd-a2742432fc9c'\n</code></pre>\n<h2>API</h2>\n<h3>uuid.v1({Map options: null, List buffer: null, int offset: 0})</h3>\n<p>Generate and return a RFC4122 v1 (timestamp-based) UUID.</p><ul><li>\n<p><code>options</code> - (Map) Optional uuid state to apply. Properties may include:</p></li><li>\n<p><code>node</code> - (List) Node id as List of 6 bytes (per 4.1.6). Default: Randomnly generated ID.</p></li><li><code>clockseq</code> - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.</li><li><code>msecs</code> - (Number) Time in milliseconds since unix Epoch.  Default: The current time is used.</li><li>\n<p><code>nsecs</code> - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if <code>msecs</code> is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.</p></li><li>\n<p><code>buffer</code> - (List) Array or buffer where UUID bytes are to be written.</p></li><li><code>offset</code> - (Int) Starting index in <code>buffer</code> at which to begin writing.</li></ul>\n<p>Returns <code>buffer</code>, if specified, otherwise the string form of the UUID</p>\n<p>Example: Generate string UUID with fully-specified options</p>\n<pre class=\"dart\"><code>uuid.v1(options: {\n    'node': [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n    'clockSeq': 0x1234,\n    'mSecs': new Date(2011,11,01).millisecondsSinceEpoch,\n    'nSecs': 5678\n})   // -&gt; \"1d6a6e2e-0457-11e1-9234-0123456789ab\"\n</code></pre>\n<p>Example: In-place generation of two binary IDs</p>\n<pre class=\"dart\"><code>// Generate two ids in an array\nvar myBuffer = new List(32); // -&gt; []\nuuid.v1(buffer: myBuffer);   \n// -&gt; [115, 189, 5, 128, 201, 91, 17, 225, 146, 52, 109, 0, 9, 0, 52, 128, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]\nuuid.v1(buffer: myBuffer, offset: 16);  \n// -&gt; [115, 189, 5, 128, 201, 91, 17, 225, 146, 52, 109, 0, 9, 0, 52, 128, 115, 189, 5, 129, 201, 91, 17, 225, 146, 52, 109, 0, 9, 0, 52, 128]\n\n// Optionally use uuid.unparse() to get stringify the ids\nuuid.unparse(buffer: myBuffer);    // -&gt; '73bd0580-c95b-11e1-9234-6d0009003480'\nuuid.unparse(buffer: myBuffer, offset: 16) // -&gt; '73bd0581-c95b-11e1-9234-6d0009003480'\n</code></pre>\n<h3>uuid.v4({Map options: null, List buffer: null, int offset: 0})</h3>\n<p>Generate and return a RFC4122 v4 UUID.</p><ul><li>\n<p><code>options</code> - (Map) Optional uuid state to apply. Properties may include:</p></li><li>\n<p><code>random</code> - (Number16) List of 16 numbers (0-255) to use in place of randomly generated values</p></li><li>\n<p><code>rng</code> - (Function) Random # generator to use. A Custom function that returns an list16 of byte values or 1 of 2 provided.</p></li><li>\n<p><code>buffer</code> - (List) Array or buffer where UUID bytes are to be written.</p></li><li><code>offset</code> - (Number) Starting index in <code>buffer</code> at which to begin writing.</li></ul>\n<p>Returns <code>buffer</code>, if specified, otherwise the string form of the UUID</p>\n<p>Example: Generate string UUID with fully-specified options</p>\n<pre class=\"dart\"><code>uuid.v4(options: {\n  'random': [\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\n  ]\n});\n// -&gt; \"109156be-c4fb-41ea-b1b4-efe1671c5836\"\n</code></pre>\n<p>Example: Generate two IDs in a single buffer</p>\n<pre class=\"dart\"><code>var myBuffer = new List(32);\nuuid.v4(buffer: myBuffer);\nuuid.v4(buffer: myBuffer, offset: 16);\n</code></pre>\n<h3>uuid.v5(String namespace, String name, {Map options: null, List buffer: null, int offset: 0})</h3>\n<p>Generate and return a RFC4122 v5 UUID.</p><ul><li>\n<p><code>options</code> - (Map) Optional uuid state to apply. Properties may include:</p></li><li>\n<p><code>randomNamespace</code> - (Boolean) Default True. Returns if you want a v4 generated namespace (true) or NAMESPACE_NIL (false)</p></li><li>\n<p><code>buffer</code> - (List) Array or buffer where UUID bytes are to be written.</p></li><li><code>offset</code> - (Number) Starting index in <code>buffer</code> at which to begin writing.</li></ul>\n<p>Returns <code>buffer</code>, if specified, otherwise the string form of the UUID</p>\n<p>Example: Generate string UUID with fully-specified options</p>\n<pre class=\"dart\"><code>uuid.v5(uuid.NAMESPACE_URL, 'www.google.com');\n// -&gt; \"c74a196f-f19d-5ea9-bffd-a2742432fc9c\"\n</code></pre>\n<p>Example: Generate two IDs in a single buffer</p>\n<pre class=\"dart\"><code>var myBuffer = new List(32);\nuuid.v5(uuid.NAMESPACE_URL, 'www.google.com', buffer: myBuffer);\nuuid.v5(uuid.NAMESPACE_URL, 'www.google.com', buffer: myBuffer, offset: 16);\n</code></pre>\n<h3>uuid.parse(String uuid, {List buffer: null, int offset: 0})</h3>\n<h3>uuid.unparse(List buffer, {int offset: 0})</h3>\n<p>Parse and unparse UUIDs</p><ul><li><code>id</code> - (String) UUID(-like) string</li><li><code>buffer</code> - (List) Array or buffer where UUID bytes are to be written. Default: A new Array or Buffer is used</li><li><code>offset</code> - (Int | Number) Starting index in <code>buffer</code> at which to begin writing. Default: 0</li></ul>\n<p>Example parsing and unparsing a UUID string</p>\n<pre class=\"dart\"><code>var bytes = uuid.parse('797ff043-11eb-11e1-80d6-510998755d10'); // -&gt; [121, 127, 240, 67, 17, 235, 17, 225, 128, 214, 81, 9, 152, 117, 93, 16]\nvar string = uuid.unparse(bytes); // -&gt; '797ff043-11eb-11e1-80d6-510998755d10'\n</code></pre>\n<h2>Testing</h2>\n<p>In dartvm</p>\n<pre><code>dart test\\uuid_test.dart\n</code></pre>\n<p>In Browser</p>\n<p>N/A as I have not used or tested this in the browser. But there are users of this library that do, and reported that it does infact work.</p>\n<h3>Benchmarking</h3>\n<p>Its pretty quick, but no official benchmarking.</p>\n<h2>Release notes</h2>\n<p>See CHANGELOG</p>"}