{"name":"HttpRequestEventTarget","qualifiedName":"dart-dom-html.HttpRequestEventTarget","comment":"","isAbstract":false,"superclass":"dart-dom-html.EventTarget","implements":[],"subclass":["dart-dom-html.HttpRequest","dart-dom-html.HttpRequestUpload"],"variables":{"abortEvent":{"name":"abortEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.abortEvent","comment":"<p>Static factory designed to expose <code>abort</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequestEventTarget</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.abortEvent'"]},{"name":"metadata.Experimental","parameters":[]}]},"errorEvent":{"name":"errorEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.errorEvent","comment":"<p>Static factory designed to expose <code>error</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequestEventTarget</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.errorEvent'"]},{"name":"metadata.Experimental","parameters":[]}]},"loadEndEvent":{"name":"loadEndEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.loadEndEvent","comment":"<p>Static factory designed to expose <code>loadend</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequestEventTarget</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.loadendEvent'"]},{"name":"metadata.Experimental","parameters":[]}]},"loadEvent":{"name":"loadEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.loadEvent","comment":"<p>Static factory designed to expose <code>load</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequestEventTarget</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.loadEvent'"]},{"name":"metadata.Experimental","parameters":[]}]},"loadStartEvent":{"name":"loadStartEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.loadStartEvent","comment":"<p>Static factory designed to expose <code>loadstart</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequestEventTarget</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.loadstartEvent'"]},{"name":"metadata.Experimental","parameters":[]}]},"progressEvent":{"name":"progressEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.progressEvent","comment":"<p>Static factory designed to expose <code>progress</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequestEventTarget</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.progressEvent'"]},{"name":"metadata.Experimental","parameters":[]}]},"timeoutEvent":{"name":"timeoutEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.timeoutEvent","comment":"<p>Static factory designed to expose <code>timeout</code> events to event\nhandlers that are not necessarily instances of <a>dart-dom-html.HttpRequestEventTarget</a>.</p>\n<p>See <a>dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.timeoutEvent'"]},{"name":"metadata.Experimental","parameters":[]}]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"onAbort":{"name":"onAbort","qualifiedName":"dart-dom-html.HttpRequestEventTarget.onAbort","comment":"<p>Stream of <code>abort</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onabort'"]},{"name":"metadata.Experimental","parameters":[]}]},"onError":{"name":"onError","qualifiedName":"dart-dom-html.HttpRequestEventTarget.onError","comment":"<p>Stream of <code>error</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onerror'"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoad":{"name":"onLoad","qualifiedName":"dart-dom-html.HttpRequestEventTarget.onLoad","comment":"<p>Stream of <code>load</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onload'"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoadEnd":{"name":"onLoadEnd","qualifiedName":"dart-dom-html.HttpRequestEventTarget.onLoadEnd","comment":"<p>Stream of <code>loadend</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onloadend'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoadStart":{"name":"onLoadStart","qualifiedName":"dart-dom-html.HttpRequestEventTarget.onLoadStart","comment":"<p>Stream of <code>loadstart</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onloadstart'"]},{"name":"metadata.Experimental","parameters":[]}]},"onProgress":{"name":"onProgress","qualifiedName":"dart-dom-html.HttpRequestEventTarget.onProgress","comment":"<p>Stream of <code>progress</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.onprogress'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]},{"name":"metadata.Experimental","parameters":[]}]},"onTimeout":{"name":"onTimeout","qualifiedName":"dart-dom-html.HttpRequestEventTarget.onTimeout","comment":"<p>Stream of <code>timeout</code> events handled by this <a>dart-dom-html.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget.ontimeout'"]},{"name":"metadata.Experimental","parameters":[]}]}},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-dom-html.HttpRequestEventTarget.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-dom-html.HttpRequestEventTarget.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-dom-html.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"dart-dom-html.HttpRequestEventTarget.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-dom-html.HttpRequestEventTarget.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"dart-dom-html.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-dom-html.HttpRequestEventTarget.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-dom-html.HttpRequestEventTarget.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-dom-html.HttpRequestEventTarget.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-dom-html.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addEventListener":{"name":"addEventListener","qualifiedName":"dart-dom-html.HttpRequestEventTarget.addEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.addEventListener'"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"dart-dom-html.HttpRequestEventTarget.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.dispatchEvent'"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-dom-html.HttpRequestEventTarget.noSuchMethod","comment":"<p><a>dart-dom-html.HttpRequestEventTarget.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-dom-html.HttpRequestEventTarget.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-dom-html.HttpRequestEventTarget.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-dom-html.HttpRequestEventTarget.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"dart-dom-html.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"dart-dom-html.HttpRequestEventTarget.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"dart-dom-html.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'EventTarget.removeEventListener'"]}]},"toString":{"name":"toString","qualifiedName":"dart-dom-html.HttpRequestEventTarget.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-dom-html.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["'XMLHttpRequestEventTarget'"]},{"name":"metadata.Experimental","parameters":[]}],"generics":{}}