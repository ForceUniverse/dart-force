{"name":"Maps","qualifiedName":"dart-collection.Maps","comment":"<p>Helper class which implements complex <a>dart-core.Map</a> operations\nin term of basic ones (<a>dart-core.Map.keys</a>, Map.operator ,\nMap.operator = and <a>dart-core.Map.remove</a>.)  Not all methods are\nnecessary to implement each particular operation.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"clear":{"name":"clear","qualifiedName":"dart-collection.Maps.clear","comment":"","commentFrom":"dart-collection.Maps.clear","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsKey":{"name":"containsKey","qualifiedName":"dart-collection.Maps.containsKey","comment":"","commentFrom":"dart-collection.Maps.containsKey","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsValue":{"name":"containsValue","qualifiedName":"dart-collection.Maps.containsValue","comment":"","commentFrom":"dart-collection.Maps.containsValue","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-collection.Maps.forEach","comment":"","commentFrom":"dart-collection.Maps.forEach","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"getValues":{"name":"getValues","qualifiedName":"dart-collection.Maps.getValues","comment":"","commentFrom":"dart-collection.Maps.getValues","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-collection.Maps.isEmpty","comment":"","commentFrom":"dart-collection.Maps.isEmpty","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-collection.Maps.isNotEmpty","comment":"","commentFrom":"dart-collection.Maps.isNotEmpty","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-collection.Maps.length","comment":"","commentFrom":"dart-collection.Maps.length","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"mapToString":{"name":"mapToString","qualifiedName":"dart-collection.Maps.mapToString","comment":"<p>Returns a string representing the specified map. The returned string\nlooks like this: <code>'{key0: value0, key1: value1, ... keyN: valueN}'</code>.\nThe value returned by its <a>dart-collection.Maps.toString</a> method is used to represent each\nkey or value.</p>\n<p>If the map collection contains a reference to itself, either\ndirectly as a key or value, or indirectly through other collections\nor maps, the contained reference is rendered as <code>'{...}'</code>. This\nprevents the infinite regress that would otherwise occur. So, for example,\ncalling this method on a map whose sole entry maps the string key 'me'\nto a reference to the map would return <code>'{me: {...}}'</code>.</p>\n<p>A typical implementation of a map's <a>dart-collection.Maps.toString</a> method will\nsimply return the results of this method applied to the collection.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"m":{"name":"m","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"putIfAbsent":{"name":"putIfAbsent","qualifiedName":"dart-collection.Maps.putIfAbsent","comment":"","commentFrom":"dart-collection.Maps.putIfAbsent","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"ifAbsent":{"name":"ifAbsent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-collection.Maps.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-collection.Maps.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-collection.Maps.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-collection.Maps.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-collection.Maps.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-collection.Maps.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-collection.Maps.noSuchMethod","comment":"<p><a>dart-collection.Maps.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-collection.Maps.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-collection.Maps.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-collection.Maps.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-collection.Maps.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}