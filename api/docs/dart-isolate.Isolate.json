{"name":"Isolate","qualifiedName":"dart-isolate.Isolate","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"AS_EVENT":{"name":"AS_EVENT","qualifiedName":"dart-isolate.Isolate.AS_EVENT","comment":"<p>Argument to <code>ping</code> and <code>kill</code>: Ask for action after normal events.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"BEFORE_NEXT_EVENT":{"name":"BEFORE_NEXT_EVENT","qualifiedName":"dart-isolate.Isolate.BEFORE_NEXT_EVENT","comment":"<p>Argument to <code>ping</code> and <code>kill</code>: Ask for action before the next event.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"IMMEDIATE":{"name":"IMMEDIATE","qualifiedName":"dart-isolate.Isolate.IMMEDIATE","comment":"<p>Argument to <code>ping</code> and <code>kill</code>: Ask for immediate action.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"controlPort":{"name":"controlPort","qualifiedName":"dart-isolate.Isolate.controlPort","comment":"<p>Control port used to send control messages to the isolate.</p>\n<p>This class provides helper functions that sends control messages\nto the control port.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-isolate.SendPort","inner":[]}],"annotations":[]},"pauseCapability":{"name":"pauseCapability","qualifiedName":"dart-isolate.Isolate.pauseCapability","comment":"<p>Capability granting the ability to pause the isolate.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-isolate.Capability","inner":[]}],"annotations":[]},"terminateCapability":{"name":"terminateCapability","qualifiedName":"dart-isolate.Isolate.terminateCapability","comment":"<p>Capability granting the ability to terminate the isolate.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-isolate.Capability","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-isolate.Isolate.Isolate-","comment":"<p>Create a new <a>dart-isolate.Isolate</a> object with a restricted set of capabilities.</p>\n<p>The port should be a control port for an isolate, as taken from\nanother <code>Isolate</code> object.</p>\n<p>The capabilities should be the subset of the capabilities that are\navailable to the original isolate.\nCapabilities of an isolate are locked to that isolate, and have no effect\nanywhere else, so the capabilities should come from the same isolate as\nthe control port.</p>\n<p>If all the available capabilities are included,\nthere is no reason to create a new object,\nsince the behavior is defined entirely\nby the control port and capabilities.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"controlPort":{"name":"controlPort","optional":false,"named":false,"default":false,"type":[{"outer":"dart-isolate.SendPort","inner":[]}],"value":null,"annotations":[]},"pauseCapability":{"name":"pauseCapability","optional":true,"named":true,"default":false,"type":[{"outer":"dart-isolate.Capability","inner":[]}],"value":null,"annotations":[]},"terminateCapability":{"name":"terminateCapability","optional":true,"named":true,"default":false,"type":[{"outer":"dart-isolate.Capability","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addOnExitListener":{"name":"addOnExitListener","qualifiedName":"dart-isolate.Isolate.addOnExitListener","comment":"<p>Asks the isolate to send a message on <a>dart-isolate.Isolate.addOnExitListener.responsePort</a> when it terminates.</p>\n<p>WARNING: This method is experimental and not handled on every platform yet.</p>\n<p>The isolate will send a <code>null</code> message on <a>dart-isolate.Isolate.addOnExitListener.responsePort</a> as the last\nthing before it terminates. It will run no further code after the message\nhas been sent.</p>\n<p>If the isolate is already dead, no message will be sent.\nTODO(lrn): Can we do better? Can the system recognize this message and\nsend a reply if the receiving isolate is dead?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"responsePort":{"name":"responsePort","optional":false,"named":false,"default":false,"type":[{"outer":"dart-isolate.SendPort","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"kill":{"name":"kill","qualifiedName":"dart-isolate.Isolate.kill","comment":"<p>Requests the isolate to shut down.</p>\n<p>WARNING: This method is experimental and not handled on every platform yet.</p>\n<p>The isolate is requested to terminate itself.\nThe <a>dart-isolate.Isolate.kill.priority</a> argument specifies when this must happen.</p>\n<p>The <a>dart-isolate.Isolate.kill.priority</a> must be one of <a>dart-isolate.Isolate.IMMEDIATE</a>, [BEFORE_NEXT_EVENT] or\n<a>dart-isolate.Isolate.AS_EVENT</a>.\nThe shutdown is performed at different times depending on the priority:</p><ul><li>\n<p><code>IMMEDIATE</code>: The the isolate shuts down as soon as possible.\nControl messages are handled in order, so all previously sent control\nevents from this isolate will all have been processed.\nThe shutdown should happen no later than if sent with\n<code>BEFORE_NEXT_EVENT</code>.\nIt may happen earlier if the system has a way to shut down cleanly\nat an earlier time, even during the execution of another event.</p></li><li>\n<p><code>BEFORE_NEXT_EVENT</code>: The shutdown is scheduled for the next time\ncontrol returns to the event loop of the receiving isolate.\nIf more than one such event are scheduled, they are executed in\nthe order their control messages were received.</p></li><li>\n<p><code>AS_EVENT</code>: The shutdown does not happen until all prevously sent\nnon-control messages from the current isolate to the receiving isolate\nhave been processed.\nThe kill operation effectively puts the shutdown into the normal event\nqueue after previously sent messages, and it is affected by any control\nmessages that affect normal events, including <code>pause</code>.\nThis can be used to wait for a another event to be processed.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"priority":{"name":"priority","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"pause":{"name":"pause","qualifiedName":"dart-isolate.Isolate.pause","comment":"<p>Requests the isolate to pause.</p>\n<p>WARNING: This method is experimental and not handled on every platform yet.</p>\n<p>The isolate should stop handling events by pausing its event queue.\nThe request will eventually make the isolate stop doing anything.\nIt will be handled before any other messages that are later sent to the\nisolate from the current isolate, but no other guarantees are provided.</p>\n<p>The event loop may be paused before previously sent, but not yet exeuted,\nmessages have been reached.</p>\n<p>If <a>dart-isolate.Isolate.pause.resumeCapability</a> is provided, it is used to identity the pause,\nand must be used again to end the pause using <a>dart-isolate.Isolate.resume</a>.\nOtherwise a new resume capability is created and returned.</p>\n<p>If an isolate is paused more than once using the same capability,\nonly one resume with that capability is needed to end the pause.</p>\n<p>If an isolate is paused using more than one capability,\nthey must all be individully ended before the isolate resumes.</p>\n<p>Returns the capability that must be used to resume end the pause.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-isolate.Capability","inner":[]}],"parameters":{"resumeCapability":{"name":"resumeCapability","optional":true,"named":false,"default":false,"type":[{"outer":"dart-isolate.Capability","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ping":{"name":"ping","qualifiedName":"dart-isolate.Isolate.ping","comment":"<p>Request that the isolate send a response on the <a>dart-isolate.Isolate.ping.responsePort</a>.</p>\n<p>WARNING: This method is experimental and not handled on every platform yet.</p>\n<p>If the isolate is alive, it will eventually send a <code>null</code> response on\nthe response port.</p>\n<p>The <a>dart-isolate.Isolate.ping.pingType</a> must be one of <a>dart-isolate.Isolate.IMMEDIATE</a>, [BEFORE_NEXT_EVENT] or\n<a>dart-isolate.Isolate.AS_EVENT</a>.\nThe response is sent at different times depending on the ping type:</p><ul><li>\n<p><code>IMMEDIATE</code>: The the isolate responds as soon as it receives the\ncontrol message.</p></li><li>\n<p><code>BEFORE_NEXT_EVENT</code>: The response is scheduled for the next time\ncontrol returns to the event loop of the receiving isolate.\nIf more than one such event are scheduled, they are executed in\nthe order their control messages were received.</p></li><li>\n<p><code>AS_EVENT</code>: The response is not sent until all prevously sent\nnon-control messages from the current isolate to the receiving isolate\nhave been processed.\nThe ping effectively puts the response into the normal event queue\nafter previously sent messages, and it is affected by any control\nmessages that affect normal events, including <code>pause</code>.\nThis can be used to wait for a another event to be processed.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"responsePort":{"name":"responsePort","optional":false,"named":false,"default":false,"type":[{"outer":"dart-isolate.SendPort","inner":[]}],"value":null,"annotations":[]},"pingType":{"name":"pingType","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"removeOnExitListener":{"name":"removeOnExitListener","qualifiedName":"dart-isolate.Isolate.removeOnExitListener","comment":"<p>Stop listening on exit messages from the isolate.</p>\n<p>WARNING: This method is experimental and not handled on every platform yet.</p>\n<p>If a call has previously been made to <a>dart-isolate.Isolate.addOnExitListener</a> with the same\nsend-port, this will unregister the port, and it will no longer receive\na message when the isolate terminates.\nA response may still be sent until this operation is fully processed by\nthe isolate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"responsePort":{"name":"responsePort","optional":false,"named":false,"default":false,"type":[{"outer":"dart-isolate.SendPort","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"resume":{"name":"resume","qualifiedName":"dart-isolate.Isolate.resume","comment":"<p>Resumes a paused isolate.</p>\n<p>WARNING: This method is experimental and not handled on every platform yet.</p>\n<p>Sends a message to an isolate requesting that it ends a pause\nthat was requested using the <a>dart-isolate.Isolate.resume.resumeCapability</a>.</p>\n<p>When all active pause requests have been cancelled, the isolate\nwill continue handling normal messages.</p>\n<p>The capability must be one returned by a call to <a>dart-isolate.Isolate.pause</a> on this\nisolate, otherwise the resume call does nothing.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"resumeCapability":{"name":"resumeCapability","optional":false,"named":false,"default":false,"type":[{"outer":"dart-isolate.Capability","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setErrorsFatal":{"name":"setErrorsFatal","qualifiedName":"dart-isolate.Isolate.setErrorsFatal","comment":"<p>Set whether uncaught errors will terminate the isolate.</p>\n<p>WARNING: This method is experimental and not handled on every platform yet.</p>\n<p>If errors are fatal, any uncaught error will terminate the isolate\nevent loop and shut down the isolate.</p>\n<p>This call requires the <a>dart-isolate.Isolate.terminateCapability</a> for the isolate.\nIf the capability is not correct, no change is made.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"errorsAreFatal":{"name":"errorsAreFatal","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"spawn":{"name":"spawn","qualifiedName":"dart-isolate.Isolate.spawn","comment":"<p>Creates and spawns an isolate that shares the same code as the current\nisolate.</p>\n<p>The argument <a>dart-isolate.Isolate.spawn.entryPoint</a> specifies the entry point of the spawned\nisolate. It must be a top-level function or a static method that\ntakes one argument - that is, one-parameter functions that can be\ncompile-time constant function values.\nIt is not allowed to pass the value of function expressions or an instance\nmethod extracted from an object.</p>\n<p>The entry-point function is invoked with the initial <a>dart-isolate.Isolate.spawn.message</a>.\nUsually the initial <a>dart-isolate.Isolate.spawn.message</a> contains a <a>dart-isolate.SendPort</a> so\nthat the spawner and spawnee can communicate with each other.</p>\n<p>Returns a future that will complete with an <a>dart-isolate.Isolate</a> instance if the\nspawning succeeded. It will complete with an error otherwise.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-isolate.Isolate","inner":[]}]}],"parameters":{"entryPoint":{"name":"entryPoint","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"paused":{"name":"paused","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"spawnUri":{"name":"spawnUri","qualifiedName":"dart-isolate.Isolate.spawnUri","comment":"<p>Creates and spawns an isolate that runs the code from the library with\nthe specified URI.</p>\n<p>The isolate starts executing the top-level <code>main</code> function of the library\nwith the given URI.</p>\n<p>The target <code>main</code> must be a subtype of one of these three signatures:</p><ul><li><code>main()</code></li><li><code>main(args)</code></li><li><code>main(args, message)</code></li></ul>\n<p>When present, the parameter <code>args</code> is set to the provided <a>dart-isolate.Isolate.spawnUri.args</a> list.\nWhen present, the parameter <code>message</code> is set to the initial <a>dart-isolate.Isolate.spawnUri.message</a>.</p>\n<p>Returns a future that will complete with an <a>dart-isolate.Isolate</a> instance if the\nspawning succeeded. It will complete with an error otherwise.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-isolate.Isolate","inner":[]}]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"paused":{"name":"paused","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-isolate.Isolate.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-isolate.Isolate.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-isolate.Isolate.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-isolate.Isolate.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-isolate.Isolate.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-isolate.Isolate.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-isolate.Isolate.noSuchMethod","comment":"<p><a>dart-isolate.Isolate.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-isolate.Isolate.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-isolate.Isolate.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-isolate.Isolate.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-isolate.Isolate.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}