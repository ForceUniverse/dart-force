{"name":"WebSocketTransformer","qualifiedName":"dart-io.WebSocketTransformer","comment":"<p>The <a>dart-io.WebSocketTransformer</a> provides the ability to upgrade a\n<a>dart-io.HttpRequest</a> to a <a>dart-io.WebSocket</a> connection. It supports both\nupgrading a single <a>dart-io.HttpRequest</a> and upgrading a stream of\n<a>dart-io.HttpRequest</a>s.</p>\n<p>To upgrade a single <a>dart-io.HttpRequest</a> use the static <a>dart-io.WebSocketTransformer.upgrade</a> method.</p>\n<pre><code>HttpServer server;\nserver.listen((request) {\n  if (...) {\n    WebSocketTransformer.upgrade(request).then((websocket) {\n      ...\n    });\n  } else {\n    // Do normal HTTP request processing.\n  }\n});\n</code></pre>\n<p>To transform a stream of <a>dart-io.HttpRequest</a> events as it implements a\nstream transformer that transforms a stream of HttpRequest into a\nstream of WebSockets by upgrading each HttpRequest from the HTTP or\nHTTPS server, to the WebSocket protocol.</p>\n<pre><code>server.transform(new WebSocketTransformer()).listen((webSocket) =&gt; ...);\n</code></pre>\n<p>This transformer strives to implement web sockets as specified by RFC6455.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-async.StreamTransformer"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-io.WebSocketTransformer.WebSocketTransformer-","comment":"<p>Create a new <a>dart-io.WebSocketTransformer</a>.</p>\n<p>If <a>dart-io.WebSocketTransformer.WebSocketTransformer-.protocolSelector</a> is provided, <a>dart-io.WebSocketTransformer.WebSocketTransformer-.protocolSelector</a> will be called to\nselect what protocol to use, if any were provided by the client.\n<a>dart-io.WebSocketTransformer.WebSocketTransformer-.protocolSelector</a> is should return either a <a>dart-core.String</a> or a <a>dart-async.Future</a>\ncompleting with a <a>dart-core.String</a>. The <a>dart-core.String</a> must exist in the list of\nprotocols.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.WebSocketTransformer","inner":[]}],"parameters":{"protocolSelector":{"name":"protocolSelector","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"protocols":{"name":"protocols","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"isUpgradeRequest":{"name":"isUpgradeRequest","qualifiedName":"dart-io.WebSocketTransformer.isUpgradeRequest","comment":"<p>Checks whether the request is a valid WebSocket upgrade request.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"upgrade":{"name":"upgrade","qualifiedName":"dart-io.WebSocketTransformer.upgrade","comment":"<p>Upgrades a <a>dart-io.HttpRequest</a> to a <a>dart-io.WebSocket</a> connection. If the\nrequest is not a valid web socket upgrade request a HTTP response\nwith status code 500 will be returned. Otherwise the returned\nfuture will complete with the <a>dart-io.WebSocket</a> when the upgrade pocess\nis complete.</p>\n<p>If <a>dart-io.WebSocketTransformer.upgrade.protocolSelector</a> is provided, <a>dart-io.WebSocketTransformer.upgrade.protocolSelector</a> will be called to\nselect what protocol to use, if any were provided by the client.\n<a>dart-io.WebSocketTransformer.upgrade.protocolSelector</a> is should return either a <a>dart-core.String</a> or a <a>dart-async.Future</a>\ncompleting with a <a>dart-core.String</a>. The <a>dart-core.String</a> must exist in the list of\nprotocols.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.WebSocket","inner":[]}]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]},"protocolSelector":{"name":"protocolSelector","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"protocols":{"name":"protocols","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.WebSocketTransformer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.WebSocketTransformer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.WebSocketTransformer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.WebSocketTransformer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.WebSocketTransformer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.WebSocketTransformer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bind":{"name":"bind","qualifiedName":"dart-io.WebSocketTransformer.bind","comment":"","commentFrom":"","inheritedFrom":"dart-async.StreamTransformer.bind","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.StreamTransformer.T","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.StreamTransformer.S","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.WebSocketTransformer.noSuchMethod","comment":"<p><a>dart-io.WebSocketTransformer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.WebSocketTransformer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.WebSocketTransformer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.WebSocketTransformer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.WebSocketTransformer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}