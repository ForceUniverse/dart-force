{"name":"Level","qualifiedName":"logging/logging.Level","comment":"<p><a>logging/logging.Level</a>s to control logging output. Logging can be enabled to include all\nlevels above certain <a>logging/logging.Level</a>. <a>logging/logging.Level</a>s are ordered using an integer\nvalue <a>logging/logging.Level.value</a>. The predefined <a>logging/logging.Level</a> constants below are sorted as\nfollows (in descending order): <a>logging/logging.Level.SHOUT</a>, <a>logging/logging.Level.SEVERE</a>,\n<a>logging/logging.Level.WARNING</a>, <a>logging/logging.Level.INFO</a>, <a>logging/logging.Level.CONFIG</a>, <a>logging/logging.Level.FINE</a>, <a>logging/logging.Level.FINER</a>,\n<a>logging/logging.Level.FINEST</a>, and <a>logging/logging.Level.ALL</a>.</p>\n<p>We recommend using one of the predefined logging levels. If you define your\nown level, make sure you use a value between those used in <a>logging/logging.Level.ALL</a> and\n<a>logging/logging.Level.OFF</a>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Comparable"],"subclass":[],"variables":{"ALL":{"name":"ALL","qualifiedName":"logging/logging.Level.ALL","comment":"<p>Special key to turn on logging for all levels (<a>logging/logging.Level.value</a> = 0).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"CONFIG":{"name":"CONFIG","qualifiedName":"logging/logging.Level.CONFIG","comment":"<p>Key for static configuration messages (<a>logging/logging.Level.value</a> = 700).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"FINE":{"name":"FINE","qualifiedName":"logging/logging.Level.FINE","comment":"<p>Key for tracing information (<a>logging/logging.Level.value</a> = 500).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"FINER":{"name":"FINER","qualifiedName":"logging/logging.Level.FINER","comment":"<p>Key for fairly detailed tracing (<a>logging/logging.Level.value</a> = 400).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"FINEST":{"name":"FINEST","qualifiedName":"logging/logging.Level.FINEST","comment":"<p>Key for highly detailed tracing (<a>logging/logging.Level.value</a> = 300).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"INFO":{"name":"INFO","qualifiedName":"logging/logging.Level.INFO","comment":"<p>Key for informational messages (<a>logging/logging.Level.value</a> = 800).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"LEVELS":{"name":"LEVELS","qualifiedName":"logging/logging.Level.LEVELS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"logging/logging.Level","inner":[]}]}],"annotations":[]},"OFF":{"name":"OFF","qualifiedName":"logging/logging.Level.OFF","comment":"<p>Special key to turn off all logging (<a>logging/logging.Level.value</a> = 2000).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"SEVERE":{"name":"SEVERE","qualifiedName":"logging/logging.Level.SEVERE","comment":"<p>Key for serious failures (<a>logging/logging.Level.value</a> = 1000).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"SHOUT":{"name":"SHOUT","qualifiedName":"logging/logging.Level.SHOUT","comment":"<p>Key for extra debugging loudness (<a>logging/logging.Level.value</a> = 1200).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"WARNING":{"name":"WARNING","qualifiedName":"logging/logging.Level.WARNING","comment":"<p>Key for potential problems (<a>logging/logging.Level.value</a> = 900).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"logging/logging.Level","inner":[]}],"annotations":[]},"name":{"name":"name","qualifiedName":"logging/logging.Level.name","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"value":{"name":"value","qualifiedName":"logging/logging.Level.value","comment":"<p>Unique value for this level. Used to order levels, so filtering can exclude\nmessages whose level is under certain value.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"logging/logging.Level.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>logging/logging.Level.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"logging/logging.Level.Level-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"<":{"name":"<","qualifiedName":"logging/logging.Level.<","comment":"","commentFrom":"logging.Level.<","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"<=":{"name":"<=","qualifiedName":"logging/logging.Level.<=","comment":"","commentFrom":"logging.Level.<=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"==":{"name":"==","qualifiedName":"logging/logging.Level.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>logging/logging.Level.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>logging/logging.Level.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">":{"name":">","qualifiedName":"logging/logging.Level.>","comment":"","commentFrom":"logging.Level.>","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},">=":{"name":">=","qualifiedName":"logging/logging.Level.>=","comment":"","commentFrom":"logging.Level.>=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"logging/logging.Level.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>logging/logging.Level.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>logging/logging.Level.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>logging/logging.Level.compareTo.other</a>,\nand zero if <code>this</code> and <a>logging/logging.Level.compareTo.other</a> are ordered together.</p>\n<p>The <a>logging/logging.Level.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"dart-core.Comparable.compareTo","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"logging/logging.Level.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"logging/logging.Level.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>logging/logging.Level.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"logging/logging.Level.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"logging/logging.Level.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>logging/logging.Level.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>logging/logging.Level.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"logging/logging.Level.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>logging/logging.Level.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>logging/logging.Level.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>logging/logging.Level.compareTo.other</a>,\nand zero if <code>this</code> and <a>logging/logging.Level.compareTo.other</a> are ordered together.</p>\n<p>The <a>logging/logging.Level.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Comparable.compareTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"logging/logging.Level.noSuchMethod","comment":"<p><a>logging/logging.Level.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>logging/logging.Level.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>logging/logging.Level.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>logging/logging.Level.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"logging/logging.Level.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}