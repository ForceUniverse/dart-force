{"name":"Logger","qualifiedName":"logging/logging.Logger","comment":"<p>Use a <a>logging/logging.Logger</a> to log debug messages. <a>logging/logging.Logger</a>s are named using a\nhierarchical dot-separated name convention.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"children":{"name":"children","qualifiedName":"logging/logging.Logger.children","comment":"<p>Children in the hierarchy of loggers, indexed by their simple names.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"logging/logging.Logger","inner":[]}]}],"annotations":[]},"name":{"name":"name","qualifiedName":"logging/logging.Logger.name","comment":"<p>Simple name of this logger.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"parent":{"name":"parent","qualifiedName":"logging/logging.Logger.parent","comment":"<p>Parent of this logger in the hierarchy of loggers.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"logging/logging.Logger","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"level=":{"name":"level=","qualifiedName":"logging/logging.Logger.level=","comment":"<p>Override the level for this particular <a>logging/logging.Logger</a> and its children.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"fullName":{"name":"fullName","qualifiedName":"logging/logging.Logger.fullName","comment":"<p>The full name of this logger, which includes the parent's full name.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"level":{"name":"level","qualifiedName":"logging/logging.Logger.level","comment":"<p>Effective level considering the levels established in this logger's parents\n(when <a>logging/logging.hierarchicalLoggingEnabled</a> is true).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"logging/logging.Level","inner":[]}],"parameters":{},"annotations":[]},"onRecord":{"name":"onRecord","qualifiedName":"logging/logging.Logger.onRecord","comment":"<p>Returns an stream of messages added to this <a>logging/logging.Logger</a>. You can listen for\nmessages using the standard stream APIs, for instance:\n   logger.onRecord.listen((record) { ... });</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"logging/logging.LogRecord","inner":[]}]}],"parameters":{},"annotations":[]},"root":{"name":"root","qualifiedName":"logging/logging.Logger.root","comment":"<p>Top-level root <a>logging/logging.Logger</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"logging/logging.Logger","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"logging/logging.Logger.Logger-","comment":"<p>Singleton constructor. Calling <code>new Logger(name)</code> will return the same\nactual instance whenever it is called with the same string name.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"logging/logging.Logger","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"clearListeners":{"name":"clearListeners","qualifiedName":"logging/logging.Logger.clearListeners","comment":"","commentFrom":"logging.Logger.clearListeners","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"config":{"name":"config","qualifiedName":"logging/logging.Logger.config","comment":"<p>Log message at level <a>logging/logging.Level.CONFIG</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fine":{"name":"fine","qualifiedName":"logging/logging.Logger.fine","comment":"<p>Log message at level <a>logging/logging.Level.FINE</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"finer":{"name":"finer","qualifiedName":"logging/logging.Logger.finer","comment":"<p>Log message at level <a>logging/logging.Level.FINER</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"finest":{"name":"finest","qualifiedName":"logging/logging.Logger.finest","comment":"<p>Log message at level <a>logging/logging.Level.FINEST</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"info":{"name":"info","qualifiedName":"logging/logging.Logger.info","comment":"<p>Log message at level <a>logging/logging.Level.INFO</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isLoggable":{"name":"isLoggable","qualifiedName":"logging/logging.Logger.isLoggable","comment":"<p>Whether a message for <a>logging/logging.Logger.isLoggable.value</a>'s level is loggable in this logger.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"log":{"name":"log","qualifiedName":"logging/logging.Logger.log","comment":"<p>Adds a log record for a <a>logging/logging.Logger.log.message</a> at a particular <a>logging/logging.Logger.log.logLevel</a> if\n<code>isLoggable(logLevel)</code> is true.</p>\n<p>Use this method to create log entries for user-defined levels. To record a\nmessage at a predefined level (e.g. <a>logging/logging.Level.INFO</a>, <a>logging/logging.Level.WARNING</a>, etc) you\ncan use their specialized methods instead (e.g. <a>logging/logging.Logger.info</a>, <a>logging/logging.Logger.warning</a>, etc).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"logLevel":{"name":"logLevel","optional":false,"named":false,"default":false,"type":[{"outer":"logging/logging.Level","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"severe":{"name":"severe","qualifiedName":"logging/logging.Logger.severe","comment":"<p>Log message at level <a>logging/logging.Level.SEVERE</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"shout":{"name":"shout","qualifiedName":"logging/logging.Logger.shout","comment":"<p>Log message at level <a>logging/logging.Level.SHOUT</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"warning":{"name":"warning","qualifiedName":"logging/logging.Logger.warning","comment":"<p>Log message at level <a>logging/logging.Level.WARNING</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"logging/logging.Logger.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>logging/logging.Logger.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"logging/logging.Logger.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"logging/logging.Logger.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>logging/logging.Logger.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>logging/logging.Logger.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"logging/logging.Logger.noSuchMethod","comment":"<p><a>logging/logging.Logger.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>logging/logging.Logger.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>logging/logging.Logger.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>logging/logging.Logger.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"logging/logging.Logger.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}