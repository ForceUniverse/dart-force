{"name":"JsonEncoder","qualifiedName":"dart-convert.JsonEncoder","comment":"<p>This class converts JSON objects to strings.</p>","isAbstract":false,"superclass":"dart-convert.Converter","implements":[],"subclass":[],"variables":{"indent":{"name":"indent","qualifiedName":"dart-convert.JsonEncoder.indent","comment":"<p>The string used for indention.</p>\n<p>When generating multi-line output, this string is inserted once at the\nbeginning of each indented line for each level of indentation.</p>\n<p>If <code>null</code>, the output is encoded as a single line.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-convert.JsonEncoder.JsonEncoder-","comment":"<p>Creates a JSON encoder.</p>\n<p>The JSON encoder handles numbers, strings, booleans, null, lists and\nmaps directly.</p>\n<p>Any other object is attempted converted by <a>dart-convert.JsonEncoder.JsonEncoder-.toEncodable</a> to an\nobject that is of one of the convertible types.</p>\n<p>If <a>dart-convert.JsonEncoder.JsonEncoder-.toEncodable</a> is omitted, it defaults to calling <code>.toJson()</code> on\nthe object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"toEncodable":{"name":"toEncodable","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"nonSerializable":{"name":"nonSerializable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"withIndent":{"name":"withIndent","qualifiedName":"dart-convert.JsonEncoder.JsonEncoder-withIndent","comment":"<p>Creates a JSON encoder that creates multi-line JSON.</p>\n<p>The encoding of elements of lists and maps are indented and put on separate\nlines. The <a>dart-convert.JsonEncoder.JsonEncoder-withIndent.indent</a> string is prepended to these elements, once for each\nlevel of indentation.</p>\n<p>If <a>dart-convert.JsonEncoder.JsonEncoder-withIndent.indent</a> is <code>null</code>, the output is encoded as a single line.</p>\n<p>The JSON encoder handles numbers, strings, booleans, null, lists and\nmaps directly.</p>\n<p>Any other object is attempted converted by <a>dart-convert.JsonEncoder.JsonEncoder-withIndent.toEncodable</a> to an\nobject that is of one of the convertible types.</p>\n<p>If <a>dart-convert.JsonEncoder.JsonEncoder-withIndent.toEncodable</a> is omitted, it defaults to calling <code>.toJson()</code> on\nthe object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"indent":{"name":"indent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"toEncodable":{"name":"toEncodable","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"nonSerializable":{"name":"nonSerializable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"bind":{"name":"bind","qualifiedName":"dart-convert.JsonEncoder.bind","comment":"","commentFrom":"dart-convert.Converter.bind","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"convert":{"name":"convert","qualifiedName":"dart-convert.JsonEncoder.convert","comment":"<p>Converts <a>dart-convert.JsonEncoder.convert.object</a> to a JSON <a>dart-core.String</a>.</p>\n<p>Directly serializable values are <a>dart-core.num</a>, <a>dart-core.String</a>, <a>dart-core.bool</a>, and <a>dart-core.Null</a>, as\nwell as some <a>dart-core.List</a> and <a>dart-core.Map</a> values.\nFor <a>dart-core.List</a>, the elements must all be serializable.\nFor <a>dart-core.Map</a>, the keys must be <a>dart-core.String</a> and the values must be serializable.</p>\n<p>If a value is any other type is attempted serialized, the conversion\nfunction provided in the constructor is invoked with the object as argument\nand the result, which must be a directly serializable value,\nis serialized instead of the original value.</p>\n<p>If the conversion throws, or returns a value that is not directly\nserializable, a <a>dart-convert.JsonUnsupportedObjectError</a> exception is thrown.\nIf the call throws, the error is caught and stored in the\n<a>dart-convert.JsonUnsupportedObjectError</a>'s <code>cause</code> field.</p>\n<p>If a <a>dart-core.List</a> or <a>dart-core.Map</a> contains a reference to itself, directly or through\nother lists or maps, it cannot be serialized and a <a>dart-convert.JsonCyclicError</a> is\nthrown.</p>\n<p><a>dart-convert.JsonEncoder.convert.object</a> should not change during serialization.</p>\n<p>If an object is serialized more than once, <a>dart-convert.JsonEncoder.convert</a> may cache the text\nfor it. In other words, if the content of an object changes after it is\nfirst serialized, the new values may not be reflected in the result.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"dart-convert.JsonEncoder.startChunkedConversion","comment":"<p>Starts a chunked conversion.</p>\n<p>The converter works more efficiently if the given <a>dart-convert.JsonEncoder.startChunkedConversion.sink</a> is a\n<a>dart-convert.StringConversionSink</a>.</p>\n<p>Returns a chunked-conversion sink that accepts at most one object. It is\nan error to invoke <code>add</code> more than once on the returned sink.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ChunkedConversionSink","inner":[{"outer":"dart-core.Object","inner":[]}]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Sink","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-convert.JsonEncoder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-convert.JsonEncoder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-convert.JsonEncoder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-convert.JsonEncoder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-convert.JsonEncoder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-convert.JsonEncoder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bind":{"name":"bind","qualifiedName":"dart-convert.JsonEncoder.bind","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Converter.bind","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"convert":{"name":"convert","qualifiedName":"dart-convert.JsonEncoder.convert","comment":"<p>Converts <a>dart-convert.JsonEncoder.convert.input</a> and returns the result of the conversion.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.convert","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Converter.S","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"dart-convert.JsonEncoder.fuse","comment":"<p>Fuses <code>this</code> with <a>dart-convert.JsonEncoder.fuse.other</a>.</p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this</code> before converting with <code>other</code>.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.fuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Converter","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-convert.JsonEncoder.noSuchMethod","comment":"<p><a>dart-convert.JsonEncoder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-convert.JsonEncoder.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-convert.JsonEncoder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-convert.JsonEncoder.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"dart-convert.JsonEncoder.startChunkedConversion","comment":"<p>Starts a chunked conversion.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.startChunkedConversion","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ChunkedConversionSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Sink","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-convert.JsonEncoder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}