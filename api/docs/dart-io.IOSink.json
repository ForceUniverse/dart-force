{"name":"IOSink","qualifiedName":"dart-io.IOSink","comment":"<p>Helper class to wrap a StreamConsumer&lt;<a>dart-core</a>&lt;<a>dart-core</a>>> and provide\nutility functions for writing to the StreamConsumer directly. The\n<a>dart-io.IOSink</a> buffers the input given by all <a>dart-core.StringSink</a> methods and will delay\nan <a>dart-io.IOSink.addStream</a> until the buffer is flushed.</p>\n<p>When the <a>dart-io.IOSink</a> is bound to a stream (through <a>dart-io.IOSink.addStream</a>) any call\nto the <a>dart-io.IOSink</a> will throw a <a>dart-core.StateError</a>. When the <a>dart-io.IOSink.addStream</a> completes,\nthe <a>dart-io.IOSink</a> will again be open for all calls.</p>\n<p>If data is added to the <a>dart-io.IOSink</a> after the sink is closed, the data will be\nignored. Use the <a>dart-io.IOSink.done</a> future to be notified when the <a>dart-io.IOSink</a> is closed.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-core.StringSink","dart-async.StreamSink"],"subclass":["dart-io.Stdout"],"variables":{"encoding":{"name":"encoding","qualifiedName":"dart-io.IOSink.encoding","comment":"<p>The <a>dart-convert.Encoding</a> used when writing strings. Depending on the\nunderlying consumer this property might be mutable.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"done":{"name":"done","qualifiedName":"dart-io.IOSink.done","comment":"<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a>dart-io.IOSink.close</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-io.IOSink.IOSink-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.IOSink","inner":[]}],"parameters":{"target":{"name":"target","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamConsumer","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(\"_allowMalformed\"=Instance of 'FalseConstant'))","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"dart-io.IOSink.add","comment":"<p>Adds <a>dart-io.IOSink.add.data</a> to the target consumer, ignoring <a>dart-io.IOSink.encoding</a>.</p>\n<p>The <a>dart-io.IOSink.encoding</a> does not apply to this method, and the <code>data</code> list is passed\ndirectly to the target consumer as a stream event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>dart-io.IOSink.addStream</a>.</p>\n<p>This operation is non-blocking. See <a>dart-io.IOSink.flush</a> or <a>dart-io.IOSink.done</a> for how to get any\nerrors generated by this call.</p>\n<p>The data list should not be modified after it has been passed to <code>add</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"addError":{"name":"addError","qualifiedName":"dart-io.IOSink.addError","comment":"<p>Passes the error to the target consumer as an error event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>dart-io.IOSink.addStream</a>.</p>\n<p>This operation is non-blocking. See <a>dart-io.IOSink.flush</a> or <a>dart-io.IOSink.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addStream":{"name":"addStream","qualifiedName":"dart-io.IOSink.addStream","comment":"<p>Adds all elements of the given <a>dart-io.IOSink.addStream.stream</a> to <code>this</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":null,"annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"dart-io.IOSink.close","comment":"<p>Close the target consumer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"flush":{"name":"flush","qualifiedName":"dart-io.IOSink.flush","comment":"<p>Returns a <a>dart-async.Future</a> that completes once all buffered data is accepted by the\nto underlying <a>dart-async.StreamConsumer</a>.</p>\n<p>It's an error to call this method, while an <a>dart-io.IOSink.addStream</a> is incomplete.</p>\n<p>NOTE: This is not necessarily the same as the data being flushed by the\noperating system.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"write":{"name":"write","qualifiedName":"dart-io.IOSink.write","comment":"<p>Converts <a>dart-io.IOSink.write.obj</a> to a String by invoking <a>dart-io.IOSink.toString</a> and\n<a>dart-io.IOSink.add</a>s the encoding of the result to the target consumer.</p>\n<p>This operation is non-blocking. See <a>dart-io.IOSink.flush</a> or <a>dart-io.IOSink.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeAll":{"name":"writeAll","qualifiedName":"dart-io.IOSink.writeAll","comment":"<p>Iterates over the given <a>dart-io.IOSink.writeAll.objects</a> and <a>dart-io.IOSink.write</a>s them in sequence.</p>\n<p>If <a>dart-io.IOSink.writeAll.separator</a> is provided, a <code>write</code> with the <code>separator</code> is performed\nbetween any two elements of <code>objects</code>.</p>\n<p>This operation is non-blocking. See <a>dart-io.IOSink.flush</a> or <a>dart-io.IOSink.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"objects":{"name":"objects","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"writeCharCode":{"name":"writeCharCode","qualifiedName":"dart-io.IOSink.writeCharCode","comment":"<p>Writes the <a>dart-io.IOSink.writeCharCode.charCode</a> to <code>this</code>.</p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))</code>.</p>\n<p>This operation is non-blocking. See <a>dart-io.IOSink.flush</a> or <a>dart-io.IOSink.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"charCode":{"name":"charCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeln":{"name":"writeln","qualifiedName":"dart-io.IOSink.writeln","comment":"<p>Converts <a>dart-io.IOSink.writeln.obj</a> to a String by invoking <a>dart-io.IOSink.toString</a> and\nwrites the result to <code>this</code>, followed by a newline.</p>\n<p>This operation is non-blocking. See <a>dart-io.IOSink.flush</a> or <a>dart-io.IOSink.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"done":{"name":"done","qualifiedName":"dart-io.IOSink.done","comment":"<p>The <a>dart-io.IOSink.done</a> Future completes with the same values as <a>dart-io.IOSink.close</a>, except\nfor the following case:</p><ul><li>\n<p>The synchronous methods of <a>dart-async.EventSink</a> were called, resulting in an\n  error. If there is no active future (like from an addStream call), the\n  <a>dart-io.IOSink.done</a> future will complete with that error</p></li></ul>","commentFrom":"","inheritedFrom":"dart-async.StreamSink.done","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-io.IOSink.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.IOSink.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.IOSink.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.IOSink.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.IOSink.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.IOSink.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"dart-io.IOSink.add","comment":"<p>Create a data event</p>","commentFrom":"","inheritedFrom":"dart-async.EventSink.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.EventSink.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addError":{"name":"addError","qualifiedName":"dart-io.IOSink.addError","comment":"<p>Create an async error.</p>","commentFrom":"","inheritedFrom":"dart-async.EventSink.addError","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"errorEvent":{"name":"errorEvent","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addStream":{"name":"addStream","qualifiedName":"dart-io.IOSink.addStream","comment":"<p>Consumes the elements of <a>dart-io.IOSink.addStream.stream</a>.</p>\n<p>Listens on <a>dart-io.IOSink.addStream.stream</a> and does something for each event.</p>\n<p>The consumer may stop listening after an error, or it may consume\nall the errors and only stop at a done event.</p>","commentFrom":"","inheritedFrom":"dart-async.StreamConsumer.addStream","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-async.StreamConsumer.S","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"dart-io.IOSink.close","comment":"<p>Close the <a>dart-async.StreamSink</a>. It'll return the <a>dart-io.IOSink.done</a> Future.</p>","commentFrom":"","inheritedFrom":"dart-async.StreamSink.close","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.IOSink.noSuchMethod","comment":"<p><a>dart-io.IOSink.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.IOSink.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.IOSink.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.IOSink.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.IOSink.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"write":{"name":"write","qualifiedName":"dart-io.IOSink.write","comment":"<p>Converts <a>dart-io.IOSink.write.obj</a> to a String by invoking <a>dart-io.IOSink.toString</a> and \nadds the result to <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.write","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeAll":{"name":"writeAll","qualifiedName":"dart-io.IOSink.writeAll","comment":"<p>Iterates over the given <a>dart-io.IOSink.writeAll.objects</a> and <a>dart-io.IOSink.write</a>s them in sequence.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.writeAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"objects":{"name":"objects","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":null,"annotations":[]},"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"writeCharCode":{"name":"writeCharCode","qualifiedName":"dart-io.IOSink.writeCharCode","comment":"<p>Writes the <a>dart-io.IOSink.writeCharCode.charCode</a> to <code>this</code>.</p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.writeCharCode","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"charCode":{"name":"charCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"writeln":{"name":"writeln","qualifiedName":"dart-io.IOSink.writeln","comment":"<p>Converts <a>dart-io.IOSink.writeln.obj</a> to a String by invoking <a>dart-io.IOSink.toString</a> and \nadds the result to <code>this</code>, followed by a newline.</p>","commentFrom":"","inheritedFrom":"dart-core.StringSink.writeln","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}