{"name":"cipher","qualifiedName":"cipher/cipher","comment":"<p>This is the main entry point to the cipher library API. It includes libraries cipher.api (which comprises the whole API\nspecification) and cipher.impl.parameters (which defines CipherParameters to be used with provided implementations).\n.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"AsymmetricBlockCipher","qualifiedName":"cipher/cipher.AsymmetricBlockCipher","preview":"<p>Asymmetric block cipher engines are expected to conform to this interface.</p>"},{"name":"AsymmetricKey","qualifiedName":"cipher/cipher.AsymmetricKey","preview":"<p>The interface that asymmetric (public and private) keys conform to.</p>"},{"name":"AsymmetricKeyPair","qualifiedName":"cipher/cipher.AsymmetricKeyPair","preview":"<p>A pair of public and private asymmetric keys.</p>"},{"name":"AsymmetricKeyParameter","qualifiedName":"cipher/cipher.AsymmetricKeyParameter","preview":"<p>Abstract <a>cipher/cipher.CipherParameters</a> to hold an asymmetric (public or private) key</p>"},{"name":"BlockCipher","qualifiedName":"cipher/cipher.BlockCipher","preview":"<p>Block cipher engines are expected to conform to this interface.</p>"},{"name":"CipherParameters","qualifiedName":"cipher/cipher.CipherParameters","preview":"<p>All cipher initialization parameters classes implement this.</p>"},{"name":"Digest","qualifiedName":"cipher/cipher.Digest","preview":"<p>The interface that a message digest conforms to.</p>"},{"name":"ECAsymmetricKey","qualifiedName":"cipher/cipher.ECAsymmetricKey","preview":"<p>Base class for asymmetric keys in ECC</p>"},{"name":"ECCurve","qualifiedName":"cipher/cipher.ECCurve","preview":"<p>An elliptic curve</p>"},{"name":"ECDomainParameters","qualifiedName":"cipher/cipher.ECDomainParameters","preview":"<p>Standard ECC curve description</p>"},{"name":"ECFieldElement","qualifiedName":"cipher/cipher.ECFieldElement","preview":"<p>Type for coordinates of an <a>cipher/cipher.ECPoint</a></p>"},{"name":"ECKeyGeneratorParameters","qualifiedName":"cipher/cipher.ECKeyGeneratorParameters","preview":"<p>Abstract <a>cipher/cipher.CipherParameters</a> to init an ECC key generator.</p>"},{"name":"ECPoint","qualifiedName":"cipher/cipher.ECPoint","preview":"<p>An elliptic curve point</p>"},{"name":"ECPrivateKey","qualifiedName":"cipher/cipher.ECPrivateKey","preview":"<p>Private keys in ECC</p>"},{"name":"ECPublicKey","qualifiedName":"cipher/cipher.ECPublicKey","preview":"<p>Public keys in ECC</p>"},{"name":"ECSignature","qualifiedName":"cipher/cipher.ECSignature","preview":"<p>A <a>cipher/cipher.Signature</a> created with ECC.</p>"},{"name":"EntropySource","qualifiedName":"cipher/cipher.EntropySource","preview":"<p>An asynchronous source of pure random data (entropy). Data returned by an <a>cipher/cipher.EntropySource</a> should be supposed to be\nunpredictable and of more quality than data obtained from a <a>cipher/cipher.SecureRandom</a>. Usually an <a>cipher/cipher.EntropySource</a> should be seen like\na random generation device while a <a>cipher/cipher.SecureRandom</a> should be seen like a cryptographic PRNG.</p>"},{"name":"KeyDerivator","qualifiedName":"cipher/cipher.KeyDerivator","preview":"<p>The interface that a symmetric key derivator conforms to.</p>"},{"name":"KeyGenerator","qualifiedName":"cipher/cipher.KeyGenerator","preview":"<p>The interface that asymmetric key generators conform to.</p>"},{"name":"KeyGeneratorParameters","qualifiedName":"cipher/cipher.KeyGeneratorParameters","preview":"<p>Abstract <a>cipher/cipher.CipherParameters</a> to init an asymmetric key generator.</p>"},{"name":"KeyParameter","qualifiedName":"cipher/cipher.KeyParameter","preview":"<p><a>cipher/cipher.CipherParameters</a> consisting of just a key of arbitrary length.</p>"},{"name":"Mac","qualifiedName":"cipher/cipher.Mac","preview":"<p>The interface that a MAC (message authentication code) conforms to.</p>"},{"name":"PaddedBlockCipher","qualifiedName":"cipher/cipher.PaddedBlockCipher","preview":"<p>All padded block ciphers conform to this interface.</p>"},{"name":"PaddedBlockCipherParameters","qualifiedName":"cipher/cipher.PaddedBlockCipherParameters","preview":"<p><a>cipher/cipher.CipherParameters</a> for <a>cipher/cipher.PaddedBlockCipher</a>s consisting of two underlying <a>cipher/cipher.CipherParameters</a>, one for the <a>cipher/cipher.BlockCipher</a> (of\ntype <a>cipher/cipher.PaddedBlockCipherParameters.UnderlyingCipherParameters</a>) and the other for the <a>cipher/cipher.Padding</a> (of type <a>cipher/cipher.PaddedBlockCipherParameters.PaddingCipherParameters</a>).</p>"},{"name":"Padding","qualifiedName":"cipher/cipher.Padding","preview":"<p>The interface that a padding conforms to.</p>"},{"name":"ParametersWithIV","qualifiedName":"cipher/cipher.ParametersWithIV","preview":"<p><a>cipher/cipher.CipherParameters</a> consisting of an underlying <a>cipher/cipher.CipherParameters</a> (of type <a>cipher/cipher.ParametersWithIV.UnderlyingParameters</a>) and an initialization\nvector of arbitrary length.</p>"},{"name":"ParametersWithRandom","qualifiedName":"cipher/cipher.ParametersWithRandom"},{"name":"Pbkdf2Parameters","qualifiedName":"cipher/cipher.Pbkdf2Parameters","preview":"<p><a>cipher/cipher.CipherParameters</a> used by PBKDF2.</p>"},{"name":"PrivateKey","qualifiedName":"cipher/cipher.PrivateKey","preview":"<p>The interface that asymmetric private keys conform to.</p>"},{"name":"PrivateKeyParameter","qualifiedName":"cipher/cipher.PrivateKeyParameter","preview":"<p>A <a>cipher/cipher.CipherParameters</a> to hold an asymmetric private key</p>"},{"name":"PublicKey","qualifiedName":"cipher/cipher.PublicKey","preview":"<p>The interface that asymmetric public keys conform to.</p>"},{"name":"PublicKeyParameter","qualifiedName":"cipher/cipher.PublicKeyParameter","preview":"<p>A <a>cipher/cipher.CipherParameters</a> to hold an asymmetric public key</p>"},{"name":"RSAAsymmetricKey","qualifiedName":"cipher/cipher.RSAAsymmetricKey","preview":"<p>Base class for asymmetric keys in RSA</p>"},{"name":"RSAKeyGeneratorParameters","qualifiedName":"cipher/cipher.RSAKeyGeneratorParameters","preview":"<p>Abstract <a>cipher/cipher.CipherParameters</a> to init an RSA key generator.</p>"},{"name":"RSAPrivateKey","qualifiedName":"cipher/cipher.RSAPrivateKey","preview":"<p>Private keys in RSA</p>"},{"name":"RSAPublicKey","qualifiedName":"cipher/cipher.RSAPublicKey","preview":"<p>Public keys in RSA</p>"},{"name":"RSASignature","qualifiedName":"cipher/cipher.RSASignature","preview":"<p>A <a>cipher/cipher.Signature</a> created with RSA.</p>"},{"name":"ScryptParameters","qualifiedName":"cipher/cipher.ScryptParameters","preview":"<p><a>cipher/cipher.CipherParameters</a> for the scrypt password based key derivation function.</p>"},{"name":"SecureRandom","qualifiedName":"cipher/cipher.SecureRandom","preview":"<p>A synchronous secure random number generator (RNG).</p>"},{"name":"Signature","qualifiedName":"cipher/cipher.Signature","preview":"<p>An interface for signatures created by a <a>cipher/cipher.Signer</a></p>"},{"name":"Signer","qualifiedName":"cipher/cipher.Signer","preview":"<p>An interface for DSAs (digital signature algorithms)</p>"},{"name":"StreamCipher","qualifiedName":"cipher/cipher.StreamCipher","preview":"<p>The interface stream ciphers conform to.</p>"}],"typedef":{},"error":[]},"packageName":"cipher","packageIntro":"<h1>cipher</h1>\n<p>A Dart library for encryption and decryption. As of today, most of the classes \nare ports of Bouncy Castle from Java to Dart. The porting is almost always \ndirect except for some classes that had been added to ease the use of low level \ndata.</p>\n<p>To make sure nothing fails, tests and benchmarks for every algorithm are \nprovided. The expected results are taken from the Bouncy Castle Java version \nand also from standards, and matched against the results got from cipher.</p>\n<p>As of the last release, the following algorithms are implemented:</p>\n<p><strong>Block ciphers:</strong></p><ul><li>AES</li></ul>\n<p><strong>Asymmetric block ciphers:</strong></p><ul><li>RSA</li></ul>\n<p><strong>Stream ciphers:</strong></p><ul><li>Salsa20</li></ul>\n<p><strong>Block cipher modes of operation:</strong></p><ul><li>CBC (Cipher Block Chaining mode)</li><li>CFB (Cipher Feedback mode)</li><li>ECB (Electronic Code Book mode)</li><li>GCTR (GOST 28147 OFB counter mode)</li><li>OFB (Output FeedBack mode)</li><li>CTR (Counter mode)</li></ul>\n<p><strong>Paddings:</strong></p><ul><li>PKCS7 </li></ul>\n<p><strong>Digests:</strong></p><ul><li>MD2</li><li>MD4</li><li>MD5</li><li>RIPEMD-128</li><li>RIPEMD-160</li><li>RIPEMD-256</li><li>RIPEMD-320</li><li>SHA-1</li><li>SHA-224</li><li>SHA-256</li><li>SHA-3</li><li>SHA-384</li><li>SHA-512</li><li>SHA-512/t</li><li>Tiger</li><li>Whirlpool</li></ul>\n<p><strong>MACs:</strong></p><ul><li>HMAC</li></ul>\n<p><strong>Signatures:</strong></p><ul><li>ECDSA</li><li>RSA</li></ul>\n<p><strong>Password based key derivators:</strong></p><ul><li>PBKDF2</li><li>scrypt</li></ul>\n<p><strong>Asymmetric key generators:</strong></p><ul><li>ECDSA</li><li>RSA</li></ul>\n<p><strong>Entropy sources (true RNGs):</strong></p><ul><li>URL based (can be used, for example, with random.org)</li><li>File based (can be used, for example, with /dev/random)</li></ul>\n<p><strong>Secure PRNGs:</strong></p><ul><li>Based on block cipher in CTR mode</li><li>Based on block cipher in CTR mode with auto reseed (for forward security)</li></ul>"}