{"name":"cipher-api","qualifiedName":"cipher/cipher-api","comment":"<p>This is the API specification library for the cipher project.</p>\n<p>It declares all abstract types used by the cipher library. In addition, it implements the factories mechanism that allows\nusers to instantiate algorithms by their standard name.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"AsymmetricBlockCipher","qualifiedName":"cipher/cipher-api.AsymmetricBlockCipher","preview":"<p>Asymmetric block cipher engines are expected to conform to this interface.</p>"},{"name":"AsymmetricKey","qualifiedName":"cipher/cipher-api.AsymmetricKey","preview":"<p>The interface that asymmetric (public and private) keys conform to.</p>"},{"name":"AsymmetricKeyPair","qualifiedName":"cipher/cipher-api.AsymmetricKeyPair","preview":"<p>A pair of public and private asymmetric keys.</p>"},{"name":"BlockCipher","qualifiedName":"cipher/cipher-api.BlockCipher","preview":"<p>Block cipher engines are expected to conform to this interface.</p>"},{"name":"CipherParameters","qualifiedName":"cipher/cipher-api.CipherParameters","preview":"<p>All cipher initialization parameters classes implement this.</p>"},{"name":"Digest","qualifiedName":"cipher/cipher-api.Digest","preview":"<p>The interface that a message digest conforms to.</p>"},{"name":"EntropySource","qualifiedName":"cipher/cipher-api.EntropySource","preview":"<p>An asynchronous source of pure random data (entropy). Data returned by an <a>cipher/cipher-api.EntropySource</a> should be supposed to be\nunpredictable and of more quality than data obtained from a <a>cipher/cipher-api.SecureRandom</a>. Usually an <a>cipher/cipher-api.EntropySource</a> should be seen like\na random generation device while a <a>cipher/cipher-api.SecureRandom</a> should be seen like a cryptographic PRNG.</p>"},{"name":"KeyDerivator","qualifiedName":"cipher/cipher-api.KeyDerivator","preview":"<p>The interface that a symmetric key derivator conforms to.</p>"},{"name":"KeyGenerator","qualifiedName":"cipher/cipher-api.KeyGenerator","preview":"<p>The interface that asymmetric key generators conform to.</p>"},{"name":"Mac","qualifiedName":"cipher/cipher-api.Mac","preview":"<p>The interface that a MAC (message authentication code) conforms to.</p>"},{"name":"PaddedBlockCipher","qualifiedName":"cipher/cipher-api.PaddedBlockCipher","preview":"<p>All padded block ciphers conform to this interface.</p>"},{"name":"Padding","qualifiedName":"cipher/cipher-api.Padding","preview":"<p>The interface that a padding conforms to.</p>"},{"name":"PrivateKey","qualifiedName":"cipher/cipher-api.PrivateKey","preview":"<p>The interface that asymmetric private keys conform to.</p>"},{"name":"PublicKey","qualifiedName":"cipher/cipher-api.PublicKey","preview":"<p>The interface that asymmetric public keys conform to.</p>"},{"name":"SecureRandom","qualifiedName":"cipher/cipher-api.SecureRandom","preview":"<p>A synchronous secure random number generator (RNG).</p>"},{"name":"Signature","qualifiedName":"cipher/cipher-api.Signature","preview":"<p>An interface for signatures created by a <a>cipher/cipher-api.Signer</a></p>"},{"name":"Signer","qualifiedName":"cipher/cipher-api.Signer","preview":"<p>An interface for DSAs (digital signature algorithms)</p>"},{"name":"StreamCipher","qualifiedName":"cipher/cipher-api.StreamCipher","preview":"<p>The interface stream ciphers conform to.</p>"}],"typedef":{},"error":[]},"packageName":"cipher","packageIntro":"<h1>cipher</h1>\n<p>A Dart library for encryption and decryption. As of today, most of the classes \nare ports of Bouncy Castle from Java to Dart. The porting is almost always \ndirect except for some classes that had been added to ease the use of low level \ndata.</p>\n<p>To make sure nothing fails, tests and benchmarks for every algorithm are \nprovided. The expected results are taken from the Bouncy Castle Java version \nand also from standards, and matched against the results got from cipher.</p>\n<p>As of the last release, the following algorithms are implemented:</p>\n<p><strong>Block ciphers:</strong></p><ul><li>AES</li></ul>\n<p><strong>Asymmetric block ciphers:</strong></p><ul><li>RSA</li></ul>\n<p><strong>Stream ciphers:</strong></p><ul><li>Salsa20</li></ul>\n<p><strong>Block cipher modes of operation:</strong></p><ul><li>CBC (Cipher Block Chaining mode)</li><li>CFB (Cipher Feedback mode)</li><li>ECB (Electronic Code Book mode)</li><li>GCTR (GOST 28147 OFB counter mode)</li><li>OFB (Output FeedBack mode)</li><li>CTR (Counter mode)</li></ul>\n<p><strong>Paddings:</strong></p><ul><li>PKCS7 </li></ul>\n<p><strong>Digests:</strong></p><ul><li>MD2</li><li>MD4</li><li>MD5</li><li>RIPEMD-128</li><li>RIPEMD-160</li><li>RIPEMD-256</li><li>RIPEMD-320</li><li>SHA-1</li><li>SHA-224</li><li>SHA-256</li><li>SHA-3</li><li>SHA-384</li><li>SHA-512</li><li>SHA-512/t</li><li>Tiger</li><li>Whirlpool</li></ul>\n<p><strong>MACs:</strong></p><ul><li>HMAC</li></ul>\n<p><strong>Signatures:</strong></p><ul><li>ECDSA</li><li>RSA</li></ul>\n<p><strong>Password based key derivators:</strong></p><ul><li>PBKDF2</li><li>scrypt</li></ul>\n<p><strong>Asymmetric key generators:</strong></p><ul><li>ECDSA</li><li>RSA</li></ul>\n<p><strong>Entropy sources (true RNGs):</strong></p><ul><li>URL based (can be used, for example, with random.org)</li><li>File based (can be used, for example, with /dev/random)</li></ul>\n<p><strong>Secure PRNGs:</strong></p><ul><li>Based on block cipher in CTR mode</li><li>Based on block cipher in CTR mode with auto reseed (for forward security)</li></ul>"}