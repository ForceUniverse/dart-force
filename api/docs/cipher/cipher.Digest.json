{"name":"Digest","qualifiedName":"cipher/cipher.Digest","comment":"<p>The interface that a message digest conforms to.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"registry":{"name":"registry","qualifiedName":"cipher/cipher-api.Digest.registry","comment":"<p>The <a>cipher/cipher-api-registry.Registry</a> for <a>cipher/cipher.Digest</a> algorithms</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"algorithmName":{"name":"algorithmName","qualifiedName":"cipher/cipher.Digest.algorithmName","comment":"<p>Get this digest's standard algorithm name.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"digestSize":{"name":"digestSize","qualifiedName":"cipher/cipher.Digest.digestSize","comment":"<p>Get this digest's output size.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"cipher/cipher.Digest.Digest-","comment":"<p>Create the digest specified by the standard <a>cipher/cipher.Digest.Digest-.algorithmName</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"cipher/cipher.Digest","inner":[]}],"parameters":{"algorithmName":{"name":"algorithmName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"doFinal":{"name":"doFinal","qualifiedName":"cipher/cipher.Digest.doFinal","comment":"<p>Store the digest of previously given data in buffer <a>cipher/cipher.Digest.doFinal.out</a> starting at\noffset <a>cipher/cipher.Digest.doFinal.outOff</a>. This method returns the size of the digest.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"value":null,"annotations":[]},"outOff":{"name":"outOff","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"process":{"name":"process","qualifiedName":"cipher/cipher.Digest.process","comment":"<p>Process a whole block of <a>cipher/cipher.Digest.process.data</a> at once, returning the result in a new byte array.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reset":{"name":"reset","qualifiedName":"cipher/cipher.Digest.reset","comment":"<p>Reset the digest to its original state.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"update":{"name":"update","qualifiedName":"cipher/cipher.Digest.update","comment":"<p>Add <a>cipher/cipher.Digest.update.len</a> bytes of data contained in <a>cipher/cipher.Digest.update.inp</a>, starting at position <a>cipher/cipher.Digest.update.inpOff</a>\nti the digested input.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"inp":{"name":"inp","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"value":null,"annotations":[]},"inpOff":{"name":"inpOff","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"len":{"name":"len","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"updateByte":{"name":"updateByte","qualifiedName":"cipher/cipher.Digest.updateByte","comment":"<p>Add one byte of data to the digested input.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"inp":{"name":"inp","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"cipher/cipher.Digest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>cipher/cipher.Digest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"cipher/cipher.Digest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"cipher/cipher.Digest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>cipher/cipher.Digest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>cipher/cipher.Digest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"cipher/cipher.Digest.noSuchMethod","comment":"<p><a>cipher/cipher.Digest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>cipher/cipher.Digest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>cipher/cipher.Digest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>cipher/cipher.Digest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"cipher/cipher.Digest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}