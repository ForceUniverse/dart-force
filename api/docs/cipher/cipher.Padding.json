{"name":"Padding","qualifiedName":"cipher/cipher.Padding","comment":"<p>The interface that a padding conforms to.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"registry":{"name":"registry","qualifiedName":"cipher/cipher-api.Padding.registry","comment":"<p>The <a>cipher/cipher-api-registry.Registry</a> for <a>cipher/cipher.Padding</a> algorithms</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"algorithmName":{"name":"algorithmName","qualifiedName":"cipher/cipher.Padding.algorithmName","comment":"<p>Get this padding's standard algorithm name.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"cipher/cipher.Padding.Padding-","comment":"<p>Create the digest specified by the standard <a>cipher/cipher.Padding.Padding-.algorithmName</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"cipher/cipher.Padding","inner":[]}],"parameters":{"algorithmName":{"name":"algorithmName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addPadding":{"name":"addPadding","qualifiedName":"cipher/cipher.Padding.addPadding","comment":"<p>Add the pad bytes to the passed in block, returning the number of bytes\nadded.</p>\n<p>Note: this assumes that the last block of plain text is always passed to it\ninside <a>cipher/cipher.Padding.addPadding.data</a>. i.e. if <a>cipher/cipher.Padding.addPadding.offset</a> is zero, indicating the entire block is to\nbe overwritten with padding the value of <a>cipher/cipher.Padding.addPadding.data</a> should be the same as the\nlast block of plain text. The reason for this is that some modes such as\n\"trailing bit compliment\" base the padding on the last byte of plain text.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"init":{"name":"init","qualifiedName":"cipher/cipher.Padding.init","comment":"<p>Initialise the padder. Normally, paddings don't need any init params.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"params":{"name":"params","optional":true,"named":false,"default":false,"type":[{"outer":"cipher/cipher.CipherParameters","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"padCount":{"name":"padCount","qualifiedName":"cipher/cipher.Padding.padCount","comment":"<p>Get the number of pad bytes present in the block.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"process":{"name":"process","qualifiedName":"cipher/cipher.Padding.process","comment":"<p>Process a whole block of <a>cipher/cipher.Padding.process.data</a> at once, returning the result in a new byte array. If <a>cipher/cipher.Padding.process.pad</a> is true adds padding to the\ngiven block, otherwise, padding is removed.</p>\n<p>Note: this assumes that the last block of plain text is always passed to it inside <a>cipher/cipher.Padding.process.data</a>. The reason for this is that some\nmodes such as \"trailing bit compliment\" base the padding on the last byte of plain text.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"parameters":{"pad":{"name":"pad","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"cipher/cipher.Padding.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>cipher/cipher.Padding.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"cipher/cipher.Padding.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"cipher/cipher.Padding.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>cipher/cipher.Padding.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>cipher/cipher.Padding.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"cipher/cipher.Padding.noSuchMethod","comment":"<p><a>cipher/cipher.Padding.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>cipher/cipher.Padding.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>cipher/cipher.Padding.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>cipher/cipher.Padding.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"cipher/cipher.Padding.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}