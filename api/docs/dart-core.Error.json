{"name":"Error","qualifiedName":"dart-core.Error","comment":"<p>Error objects thrown in the case of a program failure.</p>\n<p>An <code>Error</code> object represents a program failure that the programmer\nshould have avoided.</p>\n<p>Examples include calling a function with invalid arguments,\nor even with the wrong number of arguments,\nor calling it at a time when it is not allowed.</p>\n<p>These are not errors that a caller should expect or catch -\nif they occur, the program is erroneous,\nand terminating the program may be the safest response.</p>\n<p>When deciding that a function throws an error,\nthe conditions where it happens should be clearly described,\nand they should be detectable and predictable,\nso the programmer using the function can avoid triggering the error.</p>\n<p>Such descriptions often uses words like\n\"must\" or \"must not\" to describe the condition,\nand if you see words like that in a function's documentation,\nthen not satisfying the requirement\nis very likely to cause an error to be thrown.</p>\n<p>Example (from <a>dart-core.String.contains</a>):</p>\n<pre><code>   `startIndex` must not be negative or greater than `length`.\n</code></pre>\n<p>In this case, an error will be thrown if <code>startIndex</code> is negative\nor too large.</p>\n<p>If the conditions are not detectable before calling a function,\nthe called function should not throw an <code>Error</code>.\nIt may still throw a value,\nbut the caller will have to catch the thrown value,\neffectively making it an alternative result rather than an error.\nThe thrown object can choose to implement <a>dart-core.Exception</a>\nto document that it represents an exceptional, but not erroneous, occurrence,\nbut it has no other effect than documentation.</p>\n<p>All non-<code>null</code> values can be thrown in Dart.\nObjects extending <code>Error</code> are handled specially:\nThe first time they are thrown,\nthe stack trace at the throw point is recorded\nand stored in the error object.\nIt can be retrieved using the <a>dart-core.Error.stackTrace</a> getter.\nAn error object that merely implements <code>Error</code>, and doesn't extend it,\nwill not store the stack trace automatically.</p>\n<p>Error objects are also used for system wide failures\nlike stack overflow or an out-of-memory situation.</p>\n<p>Since errors are not created to be caught,\nthere is no need for subclasses to distinguish the errors.\nInstead subclasses have been created in order to make groups\nof related errors easy to create with consistent error messages.\nFor example, the <a>dart-core.String.contains</a> method will use a <a>dart-core.RangeError</a>\nif its <code>startIndex</code> isn't in the range <code>0..length</code>,\nwhich is easily created by <code>new RangeError.range(startIndex, 0, length)</code>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":["dart-core.AbstractClassInstantiationError","dart-core.ArgumentError","dart-core.AssertionError","dart-core.CastError","dart-core.ConcurrentModificationError","dart-core.CyclicInitializationError","dart-core.FallThroughError","dart-convert.JsonUnsupportedObjectError","dart-core.NoSuchMethodError","dart-core.NullThrownError","dart-core.StateError","unittest/matcher.TestFailure","unittest/unittest.TestFailure","dart-core.UnimplementedError","dart-core.UnsupportedError"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"stackTrace":{"name":"stackTrace","qualifiedName":"dart-core.Error.stackTrace","comment":"","commentFrom":"dart-core.Error.stackTrace","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.StackTrace","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.Error.Error-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"safeToString":{"name":"safeToString","qualifiedName":"dart-core.Error.safeToString","comment":"<p>Safely convert a value to a <a>dart-core.String</a> description.</p>\n<p>The conversion is guaranteed to not throw, so it won't use the object's\ntoString method.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Error.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Error.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Error.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Error.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Error.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Error.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Error.noSuchMethod","comment":"<p><a>dart-core.Error.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Error.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Error.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Error.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Error.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}