{"name":"ZLibCodec","qualifiedName":"dart-io.ZLibCodec","comment":"<p>The <a>dart-io.ZLibCodec</a> encodes raw bytes to ZLib compressed bytes and decodes ZLib\ncompressed bytes to raw bytes.</p>","isAbstract":false,"superclass":"dart-convert.Codec","implements":[],"subclass":[],"variables":{"dictionary":{"name":"dictionary","qualifiedName":"dart-io.ZLibCodec.dictionary","comment":"<p>Initial compression dictionary.</p>\n<p>It should consist of strings (byte sequences) that are likely to be\nencountered later in the data to be compressed, with the most commonly used\nstrings preferably put towards the end of the dictionary. Using a\ndictionary is most useful when the data to be compressed is short and can\nbe predicted with good accuracy; the data can then be compressed better\nthan with the default empty dictionary.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"gzip":{"name":"gzip","qualifiedName":"dart-io.ZLibCodec.gzip","comment":"<p>When true, <code>GZip</code> frames will be added to the compressed data.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"level":{"name":"level","qualifiedName":"dart-io.ZLibCodec.level","comment":"<p>The compression-<a>dart-io.ZLibCodec.level</a> can be set in the range of <code>-1..9</code>, with <code>6</code> being\nthe default compression level. Levels above <code>6</code> will have higher\ncompression rates at the cost of more CPU and memory usage. Levels below\n<code>6</code> will use less CPU and memory at the cost of lower compression rates.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"memLevel":{"name":"memLevel","qualifiedName":"dart-io.ZLibCodec.memLevel","comment":"<p>Specifies how much memory should be allocated for the internal compression\nstate. <code>1</code> uses minimum memory but is slow and reduces compression ratio;\n<code>9</code> uses maximum memory for optimal speed. The default value is <code>8</code>.</p>\n<p>The memory requirements for deflate are (in bytes):</p>\n<pre><code>(1 &lt;&lt; (windowBits + 2)) +  (1 &lt;&lt; (memLevel + 9))\n</code></pre>\n<p>that is: 128K for windowBits = 15 + 128K for memLevel = 8 (default values)</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"raw":{"name":"raw","qualifiedName":"dart-io.ZLibCodec.raw","comment":"<p>When true, deflate generates raw data with no zlib header or trailer, and\nwill not compute an adler32 check value</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"strategy":{"name":"strategy","qualifiedName":"dart-io.ZLibCodec.strategy","comment":"<p>Tunes the compression algorithm. Use the value STRATEGY<em>DEFAULT for normal\ndata, STRATEGY</em>FILTERED for data produced by a filter (or predictor),\nSTRATEGY<em>HUFFMAN</em>ONLY to force Huffman encoding only (no string match), or\nSTRATEGY_RLE to limit match distances to one (run-length encoding).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"windowBits":{"name":"windowBits","qualifiedName":"dart-io.ZLibCodec.windowBits","comment":"<p>Base two logarithm of the window size (the size of the history buffer). It\nshould be in the range 8..15. Larger values result in better compression at\nthe expense of memory usage. The default value is 15</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"decoder":{"name":"decoder","qualifiedName":"dart-io.ZLibCodec.decoder","comment":"<p>Get a <a>dart-io.ZLibDecoder</a> for decoding <code>ZLib</code> compressed data.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"encoder":{"name":"encoder","qualifiedName":"dart-io.ZLibCodec.encoder","comment":"<p>Get a <a>dart-io.ZLibEncoder</a> for encoding to <code>ZLib</code> compressed data.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-io.ZLibCodec.ZLibCodec-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"level":{"name":"level","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"6","annotations":[]},"windowBits":{"name":"windowBits","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"15","annotations":[]},"memLevel":{"name":"memLevel","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"8","annotations":[]},"strategy":{"name":"strategy","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"dictionary":{"name":"dictionary","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"raw":{"name":"raw","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"gzip":{"name":"gzip","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"decoder":{"name":"decoder","qualifiedName":"dart-io.ZLibCodec.decoder","comment":"<p>Returns the decoder of <code>this</code>, converting from <a>dart-convert.Codec.T</a> to <a>dart-convert.Codec.S</a>.</p>\n<p>It may be stateful an should not be reused.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.decoder","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"encoder":{"name":"encoder","qualifiedName":"dart-io.ZLibCodec.encoder","comment":"<p>Returns the encoder from <a>dart-convert.Codec.S</a> to <a>dart-convert.Codec.T</a>.</p>\n<p>It may be stateful and should not be reused.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.encoder","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-io.ZLibCodec.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.ZLibCodec.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"inverted":{"name":"inverted","qualifiedName":"dart-io.ZLibCodec.inverted","comment":"<p>Inverts <code>this</code>.</p>\n<p>The <a>dart-io.ZLibCodec.encoder</a> and <a>dart-io.ZLibCodec.decoder</a> of the resulting codec are swapped.</p>","commentFrom":"","inheritedFrom":"dart-convert.Codec.inverted","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Codec","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.ZLibCodec.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.ZLibCodec.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.ZLibCodec.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.ZLibCodec.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"decode":{"name":"decode","qualifiedName":"dart-io.ZLibCodec.decode","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Codec.decode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"encoded":{"name":"encoded","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encode":{"name":"encode","qualifiedName":"dart-io.ZLibCodec.encode","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Codec.encode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec.S","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"dart-io.ZLibCodec.fuse","comment":"<p>Fuses <code>this</code> with <code>other</code>.</p>\n<p>When encoding, the resulting codec encodes with <code>this</code> before\nencoding with <a>dart-io.ZLibCodec.fuse.other</a>.</p>\n<p>When decoding, the resulting codec decodes with <a>dart-io.ZLibCodec.fuse.other</a> before decoding\nwith <code>this</code>.</p>\n<p>In some cases one needs to use the <a>dart-io.ZLibCodec.inverted</a> codecs to be able to fuse\nthem correctly. That is, the output type of <code>this</code> (<a>dart-convert.Codec.T</a>) must match the\ninput type of the second codec <a>dart-io.ZLibCodec.fuse.other</a>.</p>\n<p>Examples:</p>\n<pre><code>final JSON_TO_BYTES = JSON.fuse(UTF8);\nList&lt;int&gt; bytes = JSON_TO_BYTES.encode([\"json-object\"]);\nvar decoded = JSON_TO_BYTES.decode(bytes);\nassert(decoded is List &amp;&amp; decoded[0] == \"json-object\");\n\nvar inverted = JSON.inverted;\nvar jsonIdentity = JSON.fuse(inverted);\nvar jsonObject = jsonIdentity.encode([\"1\", 2]);\nassert(jsonObject is List &amp;&amp; jsonObject[0] == \"1\" &amp;&amp; jsonObject[1] == 2);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-convert.Codec.fuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Codec","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-convert.Codec","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.ZLibCodec.noSuchMethod","comment":"<p><a>dart-io.ZLibCodec.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.ZLibCodec.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.ZLibCodec.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.ZLibCodec.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-io.ZLibCodec.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}