{"name":"ZoneDelegate","qualifiedName":"dart-async.ZoneDelegate","comment":"<p>This class wraps zones for delegation.</p>\n<p>When forwarding to parent zones one can't just invoke the parent zone's\nexposed functions (like <a>dart-async.Zone.run</a>), but one needs to provide more\ninformation (like the zone the <code>run</code> was initiated). Zone callbacks thus\nreceive more information including this <a>dart-async.ZoneDelegate</a> class. When delegating\nto the parent zone one should go through the given instance instead of\ndirectly invoking the parent zone.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"createPeriodicTimer":{"name":"createPeriodicTimer","qualifiedName":"dart-async.ZoneDelegate.createPeriodicTimer","comment":"","commentFrom":"dart-async.ZoneDelegate.createPeriodicTimer","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Timer","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"period":{"name":"period","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"timer":{"name":"timer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Timer","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"createTimer":{"name":"createTimer","qualifiedName":"dart-async.ZoneDelegate.createTimer","comment":"","commentFrom":"dart-async.ZoneDelegate.createTimer","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Timer","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}}},"annotations":[]},"fork":{"name":"fork","qualifiedName":"dart-async.ZoneDelegate.fork","comment":"","commentFrom":"dart-async.ZoneDelegate.fork","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Zone","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"specification":{"name":"specification","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.ZoneSpecification","inner":[]}],"value":null,"annotations":[]},"zoneValues":{"name":"zoneValues","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"handleUncaughtError":{"name":"handleUncaughtError","qualifiedName":"dart-async.ZoneDelegate.handleUncaughtError","comment":"","commentFrom":"dart-async.ZoneDelegate.handleUncaughtError","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"print":{"name":"print","qualifiedName":"dart-async.ZoneDelegate.print","comment":"","commentFrom":"dart-async.ZoneDelegate.print","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"line":{"name":"line","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"registerBinaryCallback":{"name":"registerBinaryCallback","qualifiedName":"dart-async.ZoneDelegate.registerBinaryCallback","comment":"","commentFrom":"dart-async.ZoneDelegate.registerBinaryCallback","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneBinaryCallback","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"registerCallback":{"name":"registerCallback","qualifiedName":"dart-async.ZoneDelegate.registerCallback","comment":"","commentFrom":"dart-async.ZoneDelegate.registerCallback","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneCallback","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[]},"registerUnaryCallback":{"name":"registerUnaryCallback","qualifiedName":"dart-async.ZoneDelegate.registerUnaryCallback","comment":"","commentFrom":"dart-async.ZoneDelegate.registerUnaryCallback","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.ZoneUnaryCallback","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"run":{"name":"run","qualifiedName":"dart-async.ZoneDelegate.run","comment":"","commentFrom":"dart-async.ZoneDelegate.run","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[]},"runBinary":{"name":"runBinary","qualifiedName":"dart-async.ZoneDelegate.runBinary","comment":"","commentFrom":"dart-async.ZoneDelegate.runBinary","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg2":{"name":"arg2","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"runUnary":{"name":"runUnary","qualifiedName":"dart-async.ZoneDelegate.runUnary","comment":"","commentFrom":"dart-async.ZoneDelegate.runUnary","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scheduleMicrotask":{"name":"scheduleMicrotask","qualifiedName":"dart-async.ZoneDelegate.scheduleMicrotask","comment":"","commentFrom":"dart-async.ZoneDelegate.scheduleMicrotask","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"zone":{"name":"zone","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Zone","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-async.ZoneDelegate.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-async.ZoneDelegate.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-async.ZoneDelegate.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-async.ZoneDelegate.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-async.ZoneDelegate.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-async.ZoneDelegate.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-async.ZoneDelegate.noSuchMethod","comment":"<p><a>dart-async.ZoneDelegate.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-async.ZoneDelegate.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-async.ZoneDelegate.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-async.ZoneDelegate.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-async.ZoneDelegate.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}